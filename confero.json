{
  "DataRevision": 917509939,
  "Description": "ICFP 2016 is the 21st ACM SIGPLAN International Conference on Functional Programming.\nICFP provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries.\nThe main conference will take place from September 19 to September 21. The Call For Papers (CFP) for ICFP 2016 can be found here. The submission site is https://icfp2016.hotcrp.com.\nDuring the conference there will be a Student Research Competition for Graduate and Undergraduate students. Submission deadline: August 3rd, 2016.\nPrior to the conference the ICFP Programming Contest will be held from August 5 to August 8.\nDuring the whole ICFP week, the venue will be open from 8:30am for organizers and 8:45am for participants.",
  "Event": "icfp-2016",
  "Items": [
    {
      "Abstract": "A goal of programming language researches is to establish a method of developing efficient and correct programs with ease. However, it is generally difficult to chase these rabbits. Efficient programs are usually complicated and hence difficult to see correctness. In this talk, we study an approach to this problem based on program transformations. Program transformations enable us to derive complex programs from naive but apparently correct ones in a \u201ccorrect by construction\u201d manner. We see effectiveness of program transformations through examples, including deforestation, program inversion, and program parallelization.",
      "Affiliations": ["University of Tokyo, Japan"],
      "AffiliationsString": "University of Tokyo, Japan",
      "Authors": ["akimasamorihata"],
      "Key": "plmw-icfp-2016-program-transformations-for-developing-efficient-and-correct-programs-with-ease",
      "PersonsString": "Akimasa Morihata",
      "Title": "Program Transformations for Developing Efficient and Correct Programs with Ease",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-program-transformations-for-developing-efficient-and-correct-programs-with-ease"
    },
    {
      "Abstract": "We give a short description of a very simple programming language, with a simple typing system that features explicit dependent and polymorphic I/O effects. This system having been inspired by type and effect systems allows types to express what I/O operations the typed program possibly performs. The aim of this system is not to provide a way to prove functional correctness of programs with I/O effects but rather demonstrate and argue that a simple type and effect system can allow us to get an upper bound on the I/O operations that a program performs. We present illustrative examples shedding light on possible uses of such a system. We briefly discuss possible directions for further work.",
      "Affiliations": [
        "",
        "iMinds - Distrinet, KU Leuven"
      ],
      "AffiliationsString": ", iMinds - Distrinet, KU Leuven",
      "Authors": [
        "amintimany1",
        "bartjacobs"
      ],
      "Key": "hope-2016-papers-simple-dependent-polymorphic-i-o-effects",
      "PersonsString": "Amin Timany and Bart Jacobs",
      "Title": "Simple Dependent Polymorphic I/O Effects",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-simple-dependent-polymorphic-i-o-effects"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "EPFL",
        "EPFL, LAMP",
        "EPFL",
        "EPFL",
        "Ecole Polytechnique Federale de Lausanne"
      ],
      "AffiliationsString": "EPFL, EPFL, LAMP, Ecole Polytechnique Federale de Lausanne",
      "Authors": [
        "fengyunliu",
        "nicolasstucki",
        "sandrostucki",
        "nadaamin",
        "martinodersky"
      ],
      "Key": "hope-2016-papers-effects-as-capabilities",
      "PersonsString": "Fengyun Liu, Nicolas Stucki, Sandro Stucki, Nada Amin and Martin Odersky",
      "Title": "Effects as Capabilities",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-effects-as-capabilities"
    },
    {
      "Abstract": "We review some of the many uses of types, including simple, ad hoc and parametric polymorphic, dependent, effect, and linear types, and touching on contributions by Russell, Church, Curry, Turing, Backus, Hoare, Wirth, Strachey, Scott, Hindley, Milner, Reynolds, Girard, Plotkin, Mitchell, Cardelli, Wegner, and Martin Lof.",
      "Affiliations": ["University of Edinburgh"],
      "AffiliationsString": "University of Edinburgh",
      "Authors": ["philipwadler"],
      "Key": "plmw-icfp-2016-some-types-of-types",
      "PersonsString": "Philip Wadler",
      "Title": "Some Types of Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-some-types-of-types"
    },
    {
      "Abstract": "Arguments about linearizability of a concurrent data structure are typically carried out by specifying the linearization points of the data structure\u2019s procedures. Proofs that use such specifications are often cumbersome as the linearization points\u2019 position in time can be dynamic, non-local and non-regional: it can depend on the interference, run-time values and events from the past, or even future, appear in procedures other than the one considered, and might be only determined after the considered procedure has terminated. In this paper we propose a new method, based on a Hoare-style logic, for reasoning about concurrent objects with such linearization points. We embrace the dynamic nature of linearization points, and encode it as part of the data structure\u2019s auxiliary state, so that it can be dynamically modified in place by auxiliary code, as needed when some appropriate run-time event occurs. We name the idea linking-in-time, because it reduces temporal reasoning to spatial reasoning. For example, modifying a temporal position of a linearization point can be modeled similarly to a pointer update in a heap. We illustrate the method by verifying an intricate optimal snapshot algorithm due to Jayanti.",
      "Affiliations": [
        "IMDEA Software Institute",
        "University College London, UK",
        "IMDEA Software Institute",
        "IMDEA Software Institute"
      ],
      "AffiliationsString": "IMDEA Software Institute, University College London, UK",
      "Authors": [
        "germanandresdelbianco",
        "ilyasergey",
        "aleksandarnanevski",
        "anindyabanerjee"
      ],
      "Key": "hope-2016-papers-concurrent-data-structures-linked-in-time",
      "PersonsString": "Germán Andrés Delbianco, Ilya Sergey, Aleksandar Nanevski and Anindya Banerjee",
      "Title": "Concurrent Data Structures Linked in Time",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-concurrent-data-structures-linked-in-time"
    },
    {
      "Abstract": "Analyzing real-world JavaScript web applications is a challenging task. On top of understanding the semantics of JavaScript, it requires modeling of web documents, platform objects, and interactions between them. Not only JavaScript itself but also its usage patterns are extremely dynamic. Most of web applications load JavaScript code dynamically, which makes pure static analysis approaches inapplicable.\nIn this talk, we present our attempts to analyze JavaScript web applications in the wild mostly statically using various approaches. From pure JavaScript programs to JavaScript web applications using platform-specific libraries, we explain technical challenges in analyzing each of them and how we built an open-source analysis framework for JavaScript, SAFE, that addresses the challenges incrementally.",
      "Affiliations": ["KAIST"],
      "AffiliationsString": "KAIST",
      "Authors": ["sukyoungryu"],
      "Key": "plmw-icfp-2016-analyzing-javascript-web-applications-in-the-wild-mostly-statically",
      "PersonsString": "Sukyoung Ryu",
      "Title": "Analyzing JavaScript Web Applications in the Wild (Mostly) Statically",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-analyzing-javascript-web-applications-in-the-wild-mostly-statically"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Aarhus University, Denmark",
        "IMDEA Software Institute"
      ],
      "AffiliationsString": "Aarhus University, Denmark, IMDEA Software Institute",
      "Authors": [
        "larsbirkedal",
        "aleksandarnanevski"
      ],
      "Key": "hope-2016-papers-introduction",
      "PersonsString": "Lars Birkedal and Aleksandar Nanevski",
      "Title": "Opening remarks",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-introduction"
    },
    {
      "Abstract": "Sophisticated domain-specific and user-defined notation is widely used in formal models, but is poorly supported by proof assistants. This notation provides informal extensions to formal model that aid in communicating and reasoning about key ideas. Unfortunately, proof assistants do not allows users to conveniently define sophisticated notation. For instance, in modeling a programming language, we often define infix relations such as Γ ⊢ e : t and use BNF notation to specify the syntax of the language. In a proof assistant like Coq or Agda, users can easily define the notation for Γ ⊢ e : t , but to use BNF notation the user must use a preprocessing tool external to the proof assistant, which is cumbersome. To support sophisticated user-defined notation, we propose to use language extension as a fundamental part of the design of a proof assistant. We describe how to design a proof assistant that support safe, convenient, and sophisticated user-defined extensions, and show how language extension gives users the power to implement features of contemporary proof assistants.",
      "Affiliations": ["Northeastern University"],
      "AffiliationsString": "Northeastern University",
      "Authors": ["williamjbowman"],
      "Key": "hope-2016-papers-growing-a-proof-assistant",
      "PersonsString": "William J. Bowman",
      "Title": "Growing a Proof Assistant",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-growing-a-proof-assistant"
    },
    {
      "Abstract": "Algebraic effect handlers are recently gaining in popularity as a purely functional approach to modeling effects. As a restriction on general monads, algebraic effects come with various advantages: they can be freely composed, and there is a natural separation between their interface (as a set of operations) and their semantics (as a handler).\nIn this talk, I give an end-to-end overview of practical algebraic effects in the context of a compiled implementation in the Koka language. I\u2019ll present a language design for algebraic effects, and show how algebraic effects subsume many control-flow constructs that are specialized in other languages, e.g. exceptions, state, iterators, async-await, etc. In particular, iterators and async-await are complex constructs that can lead to subtle interactions with other features and require complex compilation mechanisms. Being able to generalize over them using a single well-founded abstraction is a huge win.\nFinally, I\u2019ll briefly discuss an effective type inference algorithm based on extensible effect rows using scoped labels, a direct operational semantics. and an efficient compilation scheme to common runtime platforms (such as JavaScript, the JVM, or .NET) using a type directed selective CPS translation.",
      "Affiliations": ["Microsoft Research"],
      "AffiliationsString": "Microsoft Research",
      "Authors": ["daanleijen"],
      "Key": "hope-2016-papers-type-directed-compilation-of-row-typed-algebraic-effects",
      "PersonsString": "Daan Leijen",
      "Title": "Type Directed Compilation of Row-typed Algebraic Effects",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-type-directed-compilation-of-row-typed-algebraic-effects"
    },
    {
      "Abstract": "Administrative normal form (ANF) promises to reap the benefits of continuation-passing style (CPS) while retaining the advantages of direct style. However, we believe ANF falls short of this ideal because it does not provide a satisfactory way to describe shared control flow, as CPS does naturally. We show how CPS itself can guide us in adding a control effect to ANF and taming it to regain purity, guaranteeing an efficient implementation. Interestingly, even though CPS is usually used for compiling call-by-value languages, our technique is independent of the evaluation strategy. In short, we propose that the known advantages of CPS can be achieved by extending ANF, or in general a direct-style representation. Does this mean that CPS is finally out? No: whatever the compiler\u2019s chosen representation, we suspect CPS will reveal new insights about program manipulation.",
      "Affiliations": [
        "University of Oregon, USA",
        "University of Oregon, USA",
        "University of Oregon, USA",
        "Microsoft Research, UK"
      ],
      "AffiliationsString": "University of Oregon, USA, Microsoft Research, UK",
      "Authors": [
        "lukemaurer",
        "pauldownen",
        "zenaariola",
        "simonpaytonjones"
      ],
      "Key": "hope-2016-papers-administrative-normal-form-continued-sharing-control-in-direct-style",
      "PersonsString": "Luke Maurer, Paul Downen, Zena M. Ariola and Simon Peyton Jones",
      "Title": "Administrative normal form, continued: Sharing control in direct style",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-administrative-normal-form-continued-sharing-control-in-direct-style"
    },
    {
      "Abstract": "A key part of life as a researcher is conveying your ideas to an audience at a conference or workshop, in a way that engages and excites them. Giving such a talk is quite different from writing a paper, or giving a lecture as part of a course, and it must be approached in a different way. In this presentation-by-example I\u2019ll explain my own approach, and try to help you avoid a number of (surprisingly common!) pitfalls.",
      "Affiliations": ["Chalmers University of Technology"],
      "AffiliationsString": "Chalmers University of Technology",
      "Authors": ["johnhughes"],
      "Key": "plmw-icfp-2016-unaccustomed-as-i-am-to-public-speaking",
      "PersonsString": "John Hughes",
      "Title": "Unaccustomed as I am to public speaking",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-unaccustomed-as-i-am-to-public-speaking"
    },
    {
      "Abstract": "Algebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Affiliations": ["Jane Street"],
      "AffiliationsString": "Jane Street",
      "Authors": ["leowhite"],
      "Key": "hope-2016-papers-invited-talk",
      "PersonsString": "Leo White",
      "Title": "Effective programming: bringing algebraic effects and handlers to OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-invited-talk"
    },
    {
      "Abstract": "It is not always easy to correct a type error especially for novice programmers. When a type error occurs, the compiler shows a type error message, but often, it does not show the true cause of the type error. Why? Because it is impossible in general. Without knowing the intention of the programmer, the compiler cannot choose a single cause among multiple possible causes of the type error.\nTo locate the true cause of a type error, we have built an interactive type debugger for OCaml that incorporates programmer\u2019s intention. When a type error occurs, the type debugger asks a series of questions to the programmer. By correctly answering these questions, we are lead to the true source of the type error.\nIn this talk, I will first introduce the principle of the type debugger and show how a simple but crucial idea leads to a practicable type debugger. I then describe requirements and challenges for such a tool to be effective in the real use cases, such as in a classroom.",
      "Affiliations": ["Ochanomizu University"],
      "AffiliationsString": "Ochanomizu University",
      "Authors": ["kenichiasai"],
      "Key": "plmw-icfp-2016-principle-and-practice-of-ocaml-type-debugger",
      "PersonsString": "Kenichi Asai",
      "Title": "Principle and Practice of OCaml Type Debugger",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-principle-and-practice-of-ocaml-type-debugger"
    },
    {
      "Abstract": "This presentation serves as an introduction to ICFP for students attending PLMW@ICFP.",
      "Affiliations": ["Tufts University"],
      "AffiliationsString": "Tufts University",
      "Authors": ["kathleenfisher"],
      "Key": "plmw-icfp-2016-welcome-to-icfp-",
      "PersonsString": "Kathleen Fisher",
      "Title": " Welcome to ICFP!",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-welcome-to-icfp-"
    },
    {
      "Abstract": "We present ongoing work developing a straightforward denotational semantics for reference cells of arbitrary types based on sets- with-structure and structure-preserving functions. We start with full ground references \u2014 which can refer to ground values and (recursively) ground references \u2014 where types denotes set-valued presheaves. By considering stores as mixed-variance set-valued functors (i.e., profunctors), we obtain two monads for full ground state which can interpret alloction, dereference, and mutation of full ground references, while validating the usual equations. We use this structure to give a denotational semantics to a monadic metalanguage with a special construct for effect masking similar to Haskell\u2019s runST. Time permitting, we speculate how to extend this approach, using an appropriate recursive domain equation, to account for ML-like general reference cells.",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "ohadkammar1",
        "seanmoss"
      ],
      "Key": "hope-2016-papers-functional-models-of-full-ground-and-general-reference-cells",
      "PersonsString": "Ohad Kammar and Sean Moss",
      "Title": "Functional models of full ground, and general, reference cells",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-functional-models-of-full-ground-and-general-reference-cells"
    },
    {
      "Abstract": "Rust is a new language, sponsored by Mozilla, with the core goal of safe and productive systems programming. It\u2019s a language developed industrially, with ambitions for widespread adoption. But it\u2019s also a language deeply informed by PL research, including substructural types, the Cyclone project, Haskell\u2019s type classes, and Scheme macros. And it\u2019s built by a team that mixes PL PhDs with dyed-in-the-wool engineers.\nIn this talk, I\u2019ll cover some of my experiences as one of those PL PhDs. We\u2019ll tour some of the core features of Rust, tracing the research lineage and seeing what evolution was needed to make them work at scale. We\u2019ll discuss the tough decisions around shipping the language without yet having a soundness proof, and further tough decisions about how to handle soundness fixes. We\u2019ll talk about the way that Rust\u2019s ongoing development is done completely in the open, and how that relates to working in an academic setting. And finally, I\u2019ll mention some of the open research problems around Rust \u2013 which runs the gamut from memory models, specification, soundness, API design, to type theory and more.",
      "Affiliations": ["MPI-SWS"],
      "AffiliationsString": "MPI-SWS",
      "Authors": ["aaronturon"],
      "Key": "plmw-icfp-2016-rust-pl-research-in-industry",
      "PersonsString": "Aaron Turon",
      "Title": "Rust: PL research in industry",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-rust-pl-research-in-industry"
    },
    {
      "Abstract": "Dependent type theory, which enriches simple type systems with types that can explicitly refer to programs, is a foundation for both mathematics and programming. Dependent types are the basis of proof assistants such as Agda, Coq, Idris, Twelf, and NuPRL, and various forms of dependency are making their way into more mainstream languages such as Haskell and OCaml. Dependent type theory has applications to program verification, computer-checked mathematical proofs, programming language metatheory and compiler verification, generic programming, and many other areas of programming and programming languages research. Some research projects in dependent types are very mathematical, studying enrichments of the basic systems of dependent type theory \u2013 for example, to better integrate effectful programming, or to better describe some mathematical concept that is to be formalized. Other projects are more engineering, such as building a large verified software artifact or mathematical proof using existing proof assistants. In this talk, I will show some small examples of dependently types programming, to give you a taste for what it is and can do, and survey some of the current research directions in the field.",
      "Affiliations": ["Wesleyan University"],
      "AffiliationsString": "Wesleyan University",
      "Authors": ["danlicata"],
      "Key": "plmw-icfp-2016-introduction-to-dependent-types",
      "PersonsString": "Dan Licata",
      "Title": "Introduction to Dependent Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-introduction-to-dependent-types"
    },
    {
      "Abstract": "Programming language research is largely the study of properties of programs, but reasoning about such properties presupposes programs have some meaning. Consequently, most papers in the area of programming languages start by establishing what programs mean, i.e., they define a semantics. There are several forms of semantics, but the most common form found in current PL papers is that of operational semantics. Operational semantics defines the meaning of a program by explaining its behavior in terms of a hypothetical computer which performs the set of actions which constitute the evaluation of that program. These \u201chypothetical computers\u201d can range from the very abstract, bearing little resemblance to what you might think of as a physical computer, to the very concrete, amenable to implementation on common hardware.\nThe goal of this talk will be to convey the basic machinery of operational semantics needed to read and understand ICFP papers.",
      "Affiliations": ["University of Maryland, USA"],
      "AffiliationsString": "University of Maryland, USA",
      "Authors": ["davidvanhorn"],
      "Key": "plmw-icfp-2016-basic-mechanics-of-operational-semantics",
      "PersonsString": "David Van Horn",
      "Title": "Basic Mechanics of Operational Semantics",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-basic-mechanics-of-operational-semantics"
    },
    {
      "Abstract": "Recently we have seen a renewed interest in programming languages that tame the complexity of state and concurrency through refined type systems with more fine-grained control over effects. In addition to simplifying reasoning and eliminating whole classes of bugs, statically controlling effects opens the door to advanced compiler optimisations, such as automatic parallelisation. The flip-side of this refined typing is that these languages often have to include trusted library code that violate the static typing discipline, in ways that are claimed to be unobservable to clients. In this paper we define a logical relation for a language with an ML-like type system refined with effect annotations that supports reasoning about contextual equivalence of potentially ill-typed terms. Using this relation we can formally justify such claims about breaking typing in unobservable ways. The logical relation also supports type-based optimizations, such as automatically parallelizing expressions whose effects are suitably disjoint. The logical relation is defined in Iris, a state-of-the-art higher-order separation logic. This allows us to fall back to a powerful program logic to prove semantic well-typedness in cases where the static typing discipline is too imprecise.",
      "Affiliations": [
        "Aarhus University",
        "Aarhus University",
        "Aarhus University, Denmark"
      ],
      "AffiliationsString": "Aarhus University, Aarhus University, Denmark",
      "Authors": [
        "mortenkroghjespersen",
        "kaspersvendsen",
        "larsbirkedal"
      ],
      "Key": "hope-2016-papers-a-logical-account-of-a-type-and-effect-system",
      "PersonsString": "Morten Krogh-Jespersen, Kasper Svendsen and Lars Birkedal",
      "Title": "A Logical Account of a Type-and-Effect System ",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hope-2016-papers-a-logical-account-of-a-type-and-effect-system"
    },
    {
      "Abstract": "Learning to write well is an essential part of becoming a successful researcher. Unfortunately, many researchers find it very hard to write well because they do not know how to view their text from the perspective of the reader. In this talk, we present a simple set of principles for good writing, based on an understanding of how readers process information. Unlike such platitudes as \u201cBe clear\u201d or \u201cOmit needless words\u201d, our principles are constructive: one can easily check whether a piece of text satisfies them, and if it does not, the principles suggest concrete ways to improve it.",
      "Affiliations": ["MPI-SWS, Germany"],
      "AffiliationsString": "MPI-SWS, Germany",
      "Authors": ["derekdreyer"],
      "Key": "plmw-icfp-2016-how-to-write-papers-so-people-can-read-them",
      "PersonsString": "Derek Dreyer",
      "Title": "How to Write Papers So People Can Read Them",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/plmw-icfp-2016-how-to-write-papers-so-people-can-read-them"
    },
    {
      "Abstract": "",
      "Affiliations": ["None"],
      "AffiliationsString": "None",
      "Authors": ["danielszmulewicz"],
      "Key": "scheme-2016-papers-ghosts-in-the-machine",
      "PersonsString": "Daniel Szmulewicz",
      "Title": "Ghosts in the machine",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-ghosts-in-the-machine"
    },
    {
      "Abstract": "This paper demonstrates translation schemes by which programs written in a functional subset of APL can be compiled to code that is run efficiently on general purpose graphical processing units (GPGPUs). Furthermore, the generated programs can be straightforwardly interoperated with mainstream programming environments, such as Python, for example for purposes of visualization and user interaction. Finally, empirical evaluation shows that the GPGPU translation achieves speedups up to hundreds of times faster than sequential C compiled code.",
      "Affiliations": [
        "DIKU, University of Copenhagen",
        "",
        "DIKU, University of Copenhagen",
        "DIKU, University of Copenhagen",
        "DIKU, University of Copenhagen",
        "DIKU, University of Copenhagen",
        "Department of Computer Science, University of Copenhagen",
        "DIKU, University of Copenhagen"
      ],
      "AffiliationsString": "DIKU, University of Copenhagen, , Department of Computer Science, University of Copenhagen",
      "Authors": [
        "troelshenriksen",
        "martindybdal",
        "henrikurms",
        "annasofiekiehn",
        "danielgavin",
        "hjalteabelskov",
        "martinelsman",
        "cosminoancea"
      ],
      "Key": "fhpc-2016-papers-apl-on-gpus-a-tail-from-the-past-scribbled-in-futhark",
      "PersonsString": "Troels Henriksen, Martin Dybdal, Henrik Urms, Anna Sofie Kiehn, Daniel Gavin, Hjalte Abelskov, Martin Elsman and Cosmin Oancea",
      "Title": "APL on GPUs: A TAIL from the Past, Scribbled in Futhark",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-apl-on-gpus-a-tail-from-the-past-scribbled-in-futhark"
    },
    {
      "Abstract": "We present an embedded language in Haskell for programming pipelined computations. The language is a combination of Feldspar (a functional language for array computations) and a new implementation of Ziria (a language for describing streaming computations originally designed for programming software defined radio). The resulting language makes heavy use of fusion: as in Feldspar, computations over arrays are fused to eliminate intermediate arrays, but Ziria processes can also be fused, eliminating the message passing between them, which in turn can give rise to more fusion at the Feldspar level. The result is a language in which we can first describe pipelined computations at a very fine-grained level, and only afterwards map computations onto the details of a specific parallel architecture, where the fusion helps us to generate efficient code. This flexible design method enables late design decisions cheaply, which in turn can lead to more efficient produced code. In the paper, we present two examples of pipelined computations in our language that can be run on Adapteva\u2019s Epiphany many-core coprocessor and on other back-ends.",
      "Affiliations": [
        "Eötvös Loránd University",
        "Chalmers University of Technology"
      ],
      "AffiliationsString": "Eötvös Loránd University, Chalmers University of Technology",
      "Authors": [
        "matekaracsony",
        "koenclaessen"
      ],
      "Key": "fhpc-2016-papers-using-fusion-to-enable-late-design-decisions-for-pipelined-computations",
      "PersonsString": "Mate Karacsony and Koen Claessen",
      "Title": "Using Fusion to Enable Late Design Decisions for Pipelined Computations",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-using-fusion-to-enable-late-design-decisions-for-pipelined-computations"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Indiana University",
        "Indiana University"
      ],
      "AffiliationsString": "Indiana University",
      "Authors": [
        "jasonhemann",
        "danielfriedman"
      ],
      "Key": "scheme-2016-papers-deriving-pure-functional-one-pass-operations-for-processing-tail-aligned-lists",
      "PersonsString": "Jason Hemann and Daniel Friedman",
      "Title": "Deriving Pure, Functional One-Pass Operations for Processing Tail-Aligned Lists",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-deriving-pure-functional-one-pass-operations-for-processing-tail-aligned-lists"
    },
    {
      "Abstract": "Parallel processing of big graph-shaped data still presents many challenges. Several approaches have appeared recently, and a strong trend focusing on understanding graph computation as iterative vertex-centric computations has emerged. There have been several systems in the vertex-centric approach, for example Pregel, Giraph, GraphLab and PowerGraph. Though programs developed in these systems run efficiently in parallel, writing vertex-programs usually results in code with poor readability, that is full of side effects and control statements unrelated to the algorithm.\nIn this paper we introduce \u201cs6raph\u201d, a new vertex-centric graph processing framework with a functional interface that allows the user to write clear and concise functions. The user can choose one of several default behaviours provided for most common graph algorithms. We discuss the design of the functional interface and introduce our prototype implementation in Erlang.",
      "Affiliations": [
        "Kochi University of Technology",
        "Kochi University of Technology, Japan",
        "Kochi University of Technology"
      ],
      "AffiliationsString": "Kochi University of Technology, Kochi University of Technology, Japan",
      "Authors": [
        "onofrecollruiz",
        "kiminorimatsuzaki",
        "shigeyukisato"
      ],
      "Key": "fhpc-2016-papers-s6raph-vertex-centric-graph-processing-framework-with-functional-interface",
      "PersonsString": "Onofre Coll Ruiz, Kiminori Matsuzaki and Shigeyuki Sato",
      "Title": "s6raph: Vertex-Centric Graph Processing Framework with Functional Interface",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-s6raph-vertex-centric-graph-processing-framework-with-functional-interface"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "scheme-2016-papers-r7rs-update",
      "PersonsString": "",
      "Title": "R7RS update",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-r7rs-update"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["yuhengxie"],
      "Key": "scheme-2016-papers-function-compose-type-cut-and-the-algebra-of-logic",
      "PersonsString": "Yuheng Xie",
      "Title": "Function compose, Type cut, And the Algebra of logic",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-function-compose-type-cut-and-the-algebra-of-logic"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Colorado, Boulder",
        "University of Utah",
        "University of Utah, USA"
      ],
      "AffiliationsString": ", University of Colorado, Boulder, University of Utah, University of Utah, USA",
      "Authors": [
        "dakotafisher",
        "matthewahammer",
        "williamebyrd",
        "matthewmight"
      ],
      "Key": "scheme-2016-papers-miniadapton-a-minimal-implementation-of-incremental-computation-in-scheme",
      "PersonsString": "Dakota Fisher, Matthew Hammer, William E. Byrd and Matthew Might",
      "Title": "miniAdapton: A Minimal Implementation of Incremental Computation in Scheme",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-miniadapton-a-minimal-implementation-of-incremental-computation-in-scheme"
    },
    {
      "Abstract": "Programming in HPC is a tedious work. Therefore functional programming languages that generate HPC programs have been proposed. However, they are not widely used by application scientists, because of learning barrier, and lack of demonstrated application performance.\nWe have designed Formura which adopts application-friendly features such as typed rational array indices. Formura users can describe mathematical concepts such as operation over derivative operators using functional programming. Formura allows intuitive expression over array elements while ensuring the program is a stencil computation, so that state-of-the-art stencil optimization techniques such as temporal blocking is always applied to Formura-generated program.\nWe demonstrate the usefulness of Formura by implementing a preliminary below-ground biology simulation. Optimized C-code are generated from 672 bytes of Formura program. The simulation was executed on the full nodes of the K computer, with 1.184 Pflops, 11.62% floating-point-instruction efficiency, and 31.26% memory throughput efficiency.",
      "Affiliations": [
        "RIKEN",
        "RIKEN",
        "RIKEN",
        "RIKEN",
        "RIKEN",
        "",
        "RIKEN",
        "RIKEN",
        "University of Chile, Chile",
        "Kobe University",
        "Kyoto University",
        "Fujitsu Limited"
      ],
      "AffiliationsString": "RIKEN, , University of Chile, Chile, Kobe University, Kyoto University, Fujitsu Limited",
      "Authors": [
        "takayukimuranushi",
        "seiyanishizawa",
        "hirofumitomita",
        "keigonitadori",
        "masakiiwasawa",
        "yutakamaruyama",
        "hisashiyashiro",
        "yoshifuminakamura",
        "hideyukihotta",
        "junichiromakino",
        "natsukihosono",
        "hikaruinoue"
      ],
      "Key": "fhpc-2016-papers-automatic-generation-of-efficient-codes-from-mathematical-descriptions-of-stencil-computation",
      "PersonsString": "Takayuki Muranushi, Seiya Nishizawa, Hirofumi Tomita, Keigo Nitadori, Masaki Iwasawa, Yutaka Maruyama, Hisashi Yashiro, Yoshifumi Nakamura, Hideyuki Hotta, Junichiro Makino, Natsuki Hosono and Hikaru Inoue",
      "Title": "Automatic Generation of Efficient Codes from Mathematical Descriptions of Stencil Computation",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-automatic-generation-of-efficient-codes-from-mathematical-descriptions-of-stencil-computation"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["mulei"],
      "Key": "scheme-2016-papers-multi-purpose-web-framework-design-based-on-websocket-over-http-gateway",
      "PersonsString": "Mu Lei",
      "Title": "Multi-purpose web framework design based on websocket over HTTP Gateway",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-multi-purpose-web-framework-design-based-on-websocket-over-http-gateway"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["takashikato"],
      "Key": "scheme-2016-papers-a-scheme-concurrency-library",
      "PersonsString": "Takashi Kato",
      "Title": "A Scheme concurrency library",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-a-scheme-concurrency-library"
    },
    {
      "Abstract": "Although now parallel computing is very common, current parallel programming methods tend to be domain-specific (specializing in certain program patterns such as nested loops) and/or manual (programmers need to specify independent tasks). This situation poses a serious difficulty in developing efficient parallel programs. We often need to manually transform codes written in usual programming patterns to ones in a parallelizable form. We hope to have a solid foundation to streamline this transformation. This talk first reviews necessity of a method of systematically deriving parallelizable codes and then introduces an ongoing work on extending lambda calculus for the purpose. The distinguished feature of the new calculus is a special construct that enable evaluation with incomplete information, which is useful to express important parallel computation patterns such as reductions (aggregations). We then investigate derivations of parallelizable codes as transformations on the calculus.",
      "Affiliations": ["University of Tokyo, Japan"],
      "AffiliationsString": "University of Tokyo, Japan",
      "Authors": ["akimasamorihata"],
      "Key": "fhpc-2016-papers-invited-talk",
      "PersonsString": "Akimasa Morihata",
      "Title": "From Identification of Parallelizability to Derivation of Parallelizable Codes",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-invited-talk"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["atsurohoshino"],
      "Key": "scheme-2016-papers-nash-a-tracing-jit-for-extension-language",
      "PersonsString": "Atsuro Hoshino",
      "Title": "Nash: a tracing JIT for Extension Language",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-nash-a-tracing-jit-for-extension-language"
    },
    {
      "Abstract": "The proliferation of widely available, but very different, parallel architectures makes the ability to deliver good parallel performance on a range of architectures, or performance portability, highly desirable. Irregular parallel problems, where the number and size of tasks is unpredictable, are particularly challenging and require dynamic coordination.\nThe paper outlines a novel approach to delivering portable parallel performance for irregular parallel programs. The approach combines JIT compiler technology with dynamic scheduling and dynamic transformation of declarative parallelism.\nWe specify families of algorithmic skeletons plus equations for rewriting skeleton expressions. We present the design of a framework that unfolds skeletons into task graphs, dynamically schedules tasks, and dynamically rewrites skeletons, guided by a lightweight JIT trace-based cost model, to adapt the number and granularity of tasks for the architecture.\nWe outline the system architecture and prototype implementation in Racket/Pycket. As the current prototype does not yet automatically perform dynamic rewriting we present results based on manual offline rewriting, demonstrating that (i) the system scales to hundreds of cores given enough parallelism of suitable granularity, and (ii) the JIT trace cost model predicts granularity accurately enough to guide rewriting towards a good adaptive transformation.",
      "Affiliations": [
        "University of Glasgow",
        "University of Glasgow",
        "University of Glasgow"
      ],
      "AffiliationsString": "University of Glasgow",
      "Authors": [
        "patrickmaier",
        "johnmagnusmotron",
        "philtrinder"
      ],
      "Key": "fhpc-2016-papers-jit-costing-adaptive-skeletons-for-performance-portability",
      "PersonsString": "Patrick Maier, John Magnus Motron and Phil Trinder",
      "Title": "JIT Costing Adaptive Skeletons for Performance Portability",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-jit-costing-adaptive-skeletons-for-performance-portability"
    },
    {
      "Abstract": "",
      "Affiliations": ["Indeed.com"],
      "AffiliationsString": "Indeed.com",
      "Authors": ["alexshinn"],
      "Key": "scheme-2016-papers-opening-remarks",
      "PersonsString": "Alex Shinn",
      "Title": "Opening Remarks",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-opening-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": ["Chalmers University of Technology, Sweden"],
      "AffiliationsString": "Chalmers University of Technology, Sweden",
      "Authors": ["magnusomyreen"],
      "Key": "scheme-2016-papers-a-verified-lisp-implementation-for-a-verified-theorem-prover",
      "PersonsString": "Magnus O. Myreen",
      "Title": "A verified Lisp implementation for a verified theorem prover",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-a-verified-lisp-implementation-for-a-verified-theorem-prover"
    },
    {
      "Abstract": "The paradigm of nested data parallelism (NDP) allows a variety of semi-regular computation tasks to be mapped onto SIMD-style hardware, including GPUs and vector units. However, some care is needed to keep down space consumption in situations where the available parallelism may vastly exceed the available computation resources. To allow for an accurate space-cost model in such cases, we have previously proposed the Streaming NESL language, a refinement of NESL with a high-level notion of streamable sequences.\nIn this paper, we report on experience with a prototype implementation of Streaming NESL on a 2-level parallel platform, namely a multicore system in which we also aggressively utilize vector instructions on each core. We show that for several examples of simple, but not trivially parallelizable, text-processing tasks, we obtain single-core performance on par with off-the-shelf GNU Coreutils code, and near-linear speedups for multiple cores.",
      "Affiliations": [
        "DIKU, University of Copenhagen",
        "DIKU, University of Copenhagen"
      ],
      "AffiliationsString": "DIKU, University of Copenhagen",
      "Authors": [
        "frederikmmadsen",
        "andrzejfilinski"
      ],
      "Key": "fhpc-2016-papers-streaming-nested-data-parallelism-on-multicores",
      "PersonsString": "Frederik M. Madsen and Andrzej Filinski",
      "Title": "Streaming Nested Data Parallelism on Multicores",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-streaming-nested-data-parallelism-on-multicores"
    },
    {
      "Abstract": "We present a Functional Compute Language (FCL) for low-level GPU programming. FCL is functional in style, which allows for easy composition of program fragments and thus easy prototyping and a high degree of code reuse. In contrast with projects such as Futhark, Accelerate, Harlan, Nessie and Delite, the intention is not to develop a language providing fully automatic optimizations, but instead to provide a platform that supports absolute control of the GPU computation and memory hierarchies. The developer is thus required to have an intimate knowledge of the target platform, as is also required when using CUDA/OpenCL directly.\nFCL is heavily inspired by Obsidian. However, instead of relying on a multi-staged meta-programming approach for kernel generation using Haskell as meta-language, FCL is completely selfcontained, and we intend it to be suitable as an intermediate language for data-parallel languages, including data-parallel parts of high-level array languages, such as R, Matlab, and APL.\nWe present a type-system and a dynamic semantics suitable for understanding the performance characteristics of both FCL and Obsidian-style programs. Our aim is that FCL will be useful as a platform for developing new parallel algorithms, as well as a targetlanguage for various code-generators targeting GPU hardware.",
      "Affiliations": [
        "",
        "Department of Computer Science, University of Copenhagen",
        "Chalmers University of Technology, Sweden",
        "Chalmers University of Technology"
      ],
      "AffiliationsString": ", Department of Computer Science, University of Copenhagen, Chalmers University of Technology, Sweden, Chalmers University of Technology",
      "Authors": [
        "martindybdal",
        "martinelsman",
        "bojoelsvensson",
        "maryshe"
      ],
      "Key": "fhpc-2016-papers-low-level-functional-gpu-programming-for-parallel-algorithms",
      "PersonsString": "Martin Dybdal, Martin Elsman, Bo Joel Svensson and Mary Sheeran",
      "Title": "Low-Level Functional GPU Programming for Parallel Algorithms",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-low-level-functional-gpu-programming-for-parallel-algorithms"
    },
    {
      "Abstract": "",
      "Affiliations": ["INRIA"],
      "AffiliationsString": "INRIA",
      "Authors": ["ludoviccourtes"],
      "Key": "scheme-2016-papers-gnu-guix-the-functional-gnu-linux-distro-that-s-a-scheme-library",
      "PersonsString": "Ludovic Courtès",
      "Title": "GNU Guix: The Functional GNU/Linux Distro That\u2019s a Scheme Library",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/scheme-2016-papers-gnu-guix-the-functional-gnu-linux-distro-that-s-a-scheme-library"
    },
    {
      "Abstract": "We present Icicle, a pure streaming query language which statically guarantees that multiple queries over the same input stream are fused. We use a modal type system to ensure that fused queries can be computed incrementally, and a fold-based intermediate language to compile down to efficient C code. We present production benchmarks demonstrating significant speedup over existing queries written in R, and on par with the Unix tools grep and wc.",
      "Affiliations": [
        "Ambiata (Australia)",
        "University of New South Wales"
      ],
      "AffiliationsString": "Ambiata (Australia), University of New South Wales",
      "Authors": [
        "amosrobinson",
        "benlippmeier"
      ],
      "Key": "fhpc-2016-papers-icicle-write-once-run-once",
      "PersonsString": "Amos Robinson and Ben Lippmeier",
      "Title": "Icicle: Write Once, Run Once",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-icicle-write-once-run-once"
    },
    {
      "Abstract": "We present an approach to writing fused data parallel data flow programs where the library API guarantees that the client programs run in constant space. Our constant space guarantee is achieved by observing that binary stream operators can be provided in several polarity versions. Each polarity version uses a different combination of stream sources and sinks, and some versions allow constant space execution while others do not. Our approach is embodied in the Repa Flow Haskell library, which we are currently using for production workloads at Vertigo.",
      "Affiliations": [
        "University of New South Wales",
        "Vertigo Technology (Australia)",
        "Ambiata (Australia)"
      ],
      "AffiliationsString": "University of New South Wales, Vertigo Technology (Australia), Ambiata (Australia)",
      "Authors": [
        "benlippmeier",
        "filmackay",
        "amosrobinson"
      ],
      "Key": "fhpc-2016-papers-polarized-data-parallel-data-flow",
      "PersonsString": "Ben Lippmeier, Fil Mackay and Amos Robinson",
      "Title": "Polarized Data Parallel Data Flow",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-polarized-data-parallel-data-flow"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "fhpc-2016-papers-discussion",
      "PersonsString": "",
      "Title": "Discussion",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/fhpc-2016-papers-discussion"
    },
    {
      "Abstract": "As has been the case since the very first Haskell Implementor\u2019s Workshop, Simon Peyton Jones gives a status update on the development GHC, the most widely used Haskell compiler in existence today.",
      "Affiliations": ["Microsoft Research, UK"],
      "AffiliationsString": "Microsoft Research, UK",
      "Authors": ["simonpaytonjones"],
      "Key": "hiw-2016-papers-the-state-of-ghc",
      "PersonsString": "Simon Peyton Jones",
      "Title": "The State of GHC",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-the-state-of-ghc"
    },
    {
      "Abstract": "Algebraic datatypes and pattern matching in Haskell lay a fertile ground to conveniently define and process abstract syntax trees (ASTs). However, in Haskell, trees often cannot grow: once a datatype is defined and compiled, it cannot be extended. Extensions to a datatype mainly appear as new fields to its existing data constructors, and/or new data constructors.\nAt the center of any metaprogramming system stand tall trees representing the abstract syntax of object terms. Metaprograms processing these trees often do so by decorating nodes with additional information. This additional information may appear as new fields to the existing data constructors, and/or new data constructors. Common practice is either post hoc, to define a new separate datatype representing the output decorated trees; or pre hoc, to use the same large datatype to represent both the non-decorated input and the decorated output trees. Both methods are often ad hoc; the former leads to duplication, and the latter forces the input trees to carry an unnecessary set of information making them inconvenient to work with.\nIn this talk, I introduce an encoding of datatypes that allows them to be extended in a post hoc manner, yet still argueably keeping them convenient to work with. It is done as a part of the the Summer of Haskell project titled \u201cNative Metaprogramming in Haskell\u201d, where we considered unifying the two most popular representations of Haskell\u2019s syntax: the small and convenient AST in the popular library Haskell-Src-Exts (HSE), and the large decorated AST used inside GHC\u2019s front-end (HsSyn).",
      "Affiliations": [
        "",
        "Microsoft Research, UK",
        "McMaster University"
      ],
      "AffiliationsString": ", Microsoft Research, UK, McMaster University",
      "Authors": [
        "shayannajd",
        "simonpaytonjones",
        "jacquescarette"
      ],
      "Key": "hiw-2016-papers-trees-that-grow",
      "PersonsString": "Shayan Najd, Simon Peyton Jones and Jacques Carette",
      "Title": "Trees That Grow",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-trees-that-grow"
    },
    {
      "Abstract": "GHC provides a plugin interface for writing type checker plugins and for some time also frontend plugins. The plugin interface, however could be much more powerful.\nWith the addition of a few new hooks, more powerful plugins can be build that can control the compilation pipeline and other parts of ghc.\nThis talk will outline what is currently possible, and what new hooks the author has in development, as well as issues arising from using the plugin interface.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["moritzangermann"],
      "Key": "hiw-2016-papers-more-powerfull-ghc-plugins",
      "PersonsString": "Moritz Angermann",
      "Title": "More powerful GHC Plugins",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-more-powerfull-ghc-plugins"
    },
    {
      "Abstract": "The universal organizing principle for large software systems in programming languages today is the package, the unit by which reusable code may be versioned and distributed. However, most package systems provide only a weak form of modularity, where packages depend directly on other packages. Backpack breaks new ground by arguing mixin packages can be a good fit for package-level modularity. Unfortunately, Backpack as was described in POPL\u201914 cannot be easily implemented for most existing languages today (including Haskell), because it tightly couples the compiler with the package manager. In this talk, I describe an evolution of the Backpack design which respects the division between package manager and compiler. This is not a paper design: it is principally motivated by our (ongoing) efforts to implement Backpack in GHC and the Cabal package system, which we hope to land for GHC 8.2.",
      "Affiliations": ["Stanford University"],
      "AffiliationsString": "Stanford University",
      "Authors": ["edwardzyang"],
      "Key": "hiw-2016-papers-backpack-to-work-towards-backpack-in-practice",
      "PersonsString": "Edward Z. Yang",
      "Title": "Backpack to Work: Towards Backpack in Practice",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-backpack-to-work-towards-backpack-in-practice"
    },
    {
      "Abstract": "GHC has seen a remarkable amount of change in the past five years. This can be seen both in the features that have been implemented, as well as structure of the community which implemented them. While our technical infrastructure has been adapting with the adoption of Phabricator, better automation, and improved continuous integration, the collaborative and social mechanisms which have served our developer community well in the past may be showing their age.\nTo remain sustainable, we need to ensure that the scale of GHC\u2019s developer community keeps up with growth in both the compiler itself and its user community. In this session we will discuss some of the sticking points in GHC\u2019s development process, especially with respect to on-boarding of new contributors and treatment of external proposals.",
      "Affiliations": ["Well-Typed LLP"],
      "AffiliationsString": "Well-Typed LLP",
      "Authors": ["bengamari"],
      "Key": "hiw-2016-papers-contributing-to-ghc",
      "PersonsString": "Ben Gamari",
      "Title": "Contributing to GHC",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-contributing-to-ghc"
    },
    {
      "Abstract": "This talk will include three examples, compilable today, of dependently typed programming in Haskell: \n \n A finely-typed database access library whereby the requirements placed on the schema of the database can be inferred from the client code. This means that the database and the access code can be updated independently of one another, as long as the schema meets the inferred requirements. \n A datatype design pattern allowing for both row and column extensibility. This example makes critical use of both an injective type family and a higher-rank kind. \n A translation of Idris\u2019s algebraic effects library to Haskell, allowing for client code to use several effects (such as state, failure, or I/O) together in a composable fashion without monad transformers or manual lifting. \n\nThe goal of this talk is not to explain all of the details of any of these examples, nor is it to advertise any release-ready software expected to be used in your next project. Instead, this talk is intended to showcase the kinds of problems dependent types in Haskell might solve and a sneak peek at some solutions.",
      "Affiliations": ["Bryn Mawr College"],
      "AffiliationsString": "Bryn Mawr College",
      "Authors": ["richardeisenberg"],
      "Key": "hiw-2016-papers-a-dependent-haskell-triptych",
      "PersonsString": "Richard Eisenberg",
      "Title": "A Dependent Haskell Triptych",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-a-dependent-haskell-triptych"
    },
    {
      "Abstract": "The accumulation of new language additions, standard library interfaces, and compiler features had led to noticably longer compile times in GHC in recent years. Joachim Breitner\u2019s Gipeda is a great diagnostic tool for analysing particular commits. In our effort to make GHC fast again, we were in need of diagnostic tools to analyze compound compile times across periods spanning from weeks to years.\nWith the Performance Indicator Tracking Application, Pita, we introduce a diagnostic tool for visualizing changes in GHC\u2019s performance characteristics over the course of development. Based on the same dataset used by Gipeda, Pita offers side-by-side comparisons across time and multiple tests. Using Pita, we are able to quickly identify correlations and patterns that trigger compile time speed bumps, allowing us to narrow down years of development to a small set of regressing commits.\nThis talk provides an introduction to Pita. Using hands-on examples we show how to chase down speed bumps in past commits. Finally, we discuss the state of our effort in improving GHC\u2019s performance, discussing some of the common themes that we have found in the course of the work and sharing some best practices for GHC contributors to minimize the impact of their changes on compiler performance.\nUsing Pita we have already reduced compiler allocations by 8% on average across nofib. We are hoping that with further work we will ultimately be able to bring compilation times back to pre-7.6 magnitudes in the coming year. We invite the community to help us realize this goal.",
      "Affiliations": ["Well-Typed LLP"],
      "AffiliationsString": "Well-Typed LLP",
      "Authors": ["bengamari"],
      "Key": "hiw-2016-papers-pita-tools-for-making-ghc-fast-again",
      "PersonsString": "Ben Gamari",
      "Title": "Pita: Tools for making GHC fast again",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-pita-tools-for-making-ghc-fast-again"
    },
    {
      "Abstract": "GHCVM is a compiler that translates GHC 7.10.3\u2019s Haskell to Java bytecodes, using a slightly modified version of GHC [1]. It aims to reduce the entry barrier for companies who wish to deploy Haskell but are bound to the JVM. The code generator and runtime system were carefully modeled after GHC, translating the primitive concepts to Java equivalents.\nI will discuss the progress so far and highlight the key design decisions that were made to preserve GHC\u2019s semantics on the JVM. Additionally, I will discuss future directions of GHCVM including an intermediate representation for simplifying bytecode compilation, support for an external interpreter and Template Haskell, and utilizing the recent developments in the JVM for performance boosts.\n[1] The GHC API was used initially, but the rigidity of the API forced me to inline the entire GHC frontend into the GHCVM codebase.",
      "Affiliations": ["TypeLead"],
      "AffiliationsString": "TypeLead",
      "Authors": ["rahulmuttineni"],
      "Key": "hiw-2016-papers-ghcvm-a-jvm-backend-for-ghc",
      "PersonsString": "Rahul Muttineni",
      "Title": "GHCVM - A JVM Backend for GHC",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-ghcvm-a-jvm-backend-for-ghc"
    },
    {
      "Abstract": "Compilation with GHC was non-deterministic prior to version 8.0.2. Compiling with the same flags, sources, and environment could produce incompatible binary objects.\nNon-deterministic compilation causes several problems. Non-deterministic interface files result in slower incremental builds because of unnecessary recompilation. Distributed build systems, such as Buck or Bazel, cannot reliably cache non-deterministic object files, negating the primary benefit of distributed compilation. Non-determinism results in unstable symbol names, making code hot-swapping difficult. Non-deterministic output forces packagers of binary distributions such as Debian to waste resources recompiling after a trivial change and also makes it impossible to verify if a binary was built from the given code. \nDuring the past couple of months I tested GHC for non-determinism on itself and Stackage, developed a non-determinism test suite, and systematically audited GHC\u2019s internals to ensure that compilation is deterministic in GHC 8.0.2. In this talk I will discuss the causes of non-determinism, how I addressed them, and how we can keep GHC deterministic going forward.",
      "Affiliations": ["Facebook"],
      "AffiliationsString": "Facebook",
      "Authors": ["bartosznitka"],
      "Key": "hiw-2016-papers-ghc-determinism",
      "PersonsString": "Bartosz Nitka",
      "Title": "GHC Determinism",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-ghc-determinism"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "hiw-2016-papers-lightning-talks",
      "PersonsString": "",
      "Title": "Lightning talks",
      "Type": "Other",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-lightning-talks"
    },
    {
      "Abstract": "Haxl users at Facebook do a lot of development and testing inside GHCi. In fact, we\u2019ve built a customized version of GHCi that runs code in our Haxl monad by default instead of the IO monad, and has a handful of extra commands to support common workflows needed by our developers. This is a pretty smooth setup: right inside GHCi we can test the production code against real data, and interact with all of the services that our production systems talk to, while having a nice interactive edit/compile/test cycle.\nHowever, one thing is missed by many developers, especially those coming from other languages: easy access to a stack trace when debugging.\nThis talk will tell the story of how we implemented always-on stack traces in GHCi, which are now available in GHC 8.0.1. The implementation involves splitting out the interpreter from GHCi into a separate process, so that the interpreted code can run in profiling mode (where stack traces are available), while the compiler continues to run at full speed on the unprofiled runtime. GHC communicates with the interpreter using binary messages over a pipe.\nRemote GHCi has a number of other benefits, including fixing the long-standing annoyance that to compile TH code with -prof you had to build it twice. It will also be useful for using TH when cross-compiling, and has a lot of overlap with a similar mechanism already implemented in GHCJS; indeed we hope to converge on a single implementation in the future.\n(more background for the talk in this blog post: http://simonmar.github.io/posts/2016-02-12-Stack-traces-in-GHCi.html)",
      "Affiliations": ["Facebook"],
      "AffiliationsString": "Facebook",
      "Authors": ["simonmarlow"],
      "Key": "hiw-2016-papers-remote-ghci",
      "PersonsString": "Simon Marlow",
      "Title": "Remote GHCi",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-remote-ghci"
    },
    {
      "Abstract": "New Haskell programmers often find themselves \u201ctrapped in a monad\u201d. Given a computation of type \u2018IO a\u2019, there is no way to get the \u2018a\u2019 value \u201cout\u201d of the computation. One can use the monadic \u2018bind\u2019 operator to create a new computation based on the old one, but this can lead to an awkward style of programming. Haskell is really two distinct sub languages, where the pure sub language is used to compose computations in the monadic sub-language. When effects need to be added to previously pure code we also need to undertake a big refactoring effort, converting \u2018let\u2019 to \u2018do\u2019, and \u2018map\u2019 to \u2018mapM\u2019 and so on.\nIn this talk I\u2019ll present a practical implementation of a coeffect system that lets us get the \u2018a\u2019 out. Given a suspended computation M of type \u2018IO a\u2019, \u2018run M\u2019 evaluates it, releasing its effect into the context, and producing the value of type \u2018a\u2019. Conversely, given a term N of type \u2018a\u2019 which would perform an IO effect when evaluated, \u2018box N\u2019 suspends its evaluation, returning a value of type \u2018IO a\u2019. This idea has been described previously, by both Filinski [1] who named the operators \u2018reflect\u2019 and \u2018reify\u2019, as well as Pfenning and Davies [2] in the context of lax modal logic.\nAlthough the theory works out, manually inserting \u2018run\u2019 and \u2018box\u2019 casts into a program is even more annoying than converting \u2018let\u2019-expressions to \u2018do\u2019-expressions when effects need to be added to pure code. Luckily, there is a way to automatically insert these casts during type checking, so we can write code in a style that assumes implicit effects (like in ML), but with types as nice as in Haskell. This system has recently been implemented in DDC [3] as an extension to Dunfield and Krishnaswami\u2019s bidirectional type checking algorithm [4]. Automatically inserting run and box casts works surprisingly well, and also supports DDC\u2019s approach to type safe freezing, where mutable objects can be converted to immutable ones, without unsafe hacks like \u2018unsafeFreezeArray\u2019.\n[1] Representing Monads Andrzej Filinski Principles of Programming Languages, 2004.\n[2] A Judgmental Reconstruction of Modal Logic Frank Pfenning and Rowan Davies Mathematical Structures in Computer Science, 2000.\n[3] The Disciplined Disciple Compiler https://github.com/DDCSF/ddc\n[4] Complete and Easy Bidirectional Typechecking for Higher-Ranked Polymorphism. Joshua Dunfield and Neelakantan Krishnaswami International Conference on Functional Programming, 2013.",
      "Affiliations": ["University of New South Wales"],
      "AffiliationsString": "University of New South Wales",
      "Authors": ["benlippmeier"],
      "Key": "hiw-2016-papers-automatically-escaping-monads",
      "PersonsString": "Ben Lippmeier",
      "Title": "Automatically Escaping Monads",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/hiw-2016-papers-automatically-escaping-monads"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["marcovassena"],
      "Key": "tyde-2016-papers-generic-diff3-for-algebraic-datatypes",
      "PersonsString": "Marco Vassena",
      "Title": "Generic diff3 for Algebraic Datatypes",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-generic-diff3-for-algebraic-datatypes"
    },
    {
      "Abstract": "At Fugue, we built our own statically typed DSL, Ludwig, to configure cloud infrastructure in a declarative way.\nThe DSL relates to the Haskell language in two ways. First, the language\u2019s compiler and toolchain are written in Haskell. Secondly, the DSL is heavily inspired by Haskell. It also borrows interesting features from other languages, such as extensible records with row-type polymorphism and an intuitive YAML-like syntax.\nHaving a Haskell-inspired functional language certainly made it possible to build powerful abstractions. However, this often come at a price. Many of our prospective users in DevOps have little or no experience in functional programming. This means that they frequently have a hard time understanding how these languages work.\nThis is a problem for adoption: we want people to look at our examples and immediately feel at home. This talk will focus on how we are trying to achieve that. We will talk about how we constructed the different aspects of the DSL (syntax, type system\u2026) in such a way that anyone who is comfortable editing YAML can pick up the language easily.",
      "Affiliations": ["Fugue"],
      "AffiliationsString": "Fugue",
      "Authors": ["jaspervanderjeugt"],
      "Key": "cufp-2016-papers-creating-an-approachable-haskell-like-dsl",
      "PersonsString": "Jasper Van der Jeugt",
      "Title": "Creating an approachable Haskell-like DSL",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-creating-an-approachable-haskell-like-dsl"
    },
    {
      "Abstract": "",
      "Affiliations": ["Ambiata"],
      "AffiliationsString": "Ambiata",
      "Authors": ["nickhibberd"],
      "Key": "cufp-2016-papers-immutable-infrastructure-deployment-with-haskell",
      "PersonsString": "Nick Hibberd",
      "Title": "Immutable Infrastructure Deployment with Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-immutable-infrastructure-deployment-with-haskell"
    },
    {
      "Abstract": "We implement a library for encoding constructor classes in Standard ML, including elaboration from minimal definitions, and automatic instantiation of superclasses.",
      "Affiliations": [
        "Data61, Australia",
        "UNSW, Australia"
      ],
      "AffiliationsString": "Data61, Australia, UNSW, Australia",
      "Authors": [
        "yutakanagashima",
        "liamoconnor"
      ],
      "Key": "mlfamilyworkshop-2016-papers-close-encounters-of-the-higher-kind-emulating-constructor-classes-in-standard-ml",
      "PersonsString": "Yutaka Nagashima and Liam O'Connor",
      "Title": "Close Encounters of the Higher Kind - Emulating Constructor Classes in Standard ML",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-close-encounters-of-the-higher-kind-emulating-constructor-classes-in-standard-ml"
    },
    {
      "Abstract": "The ML family of programming languages is best known as a family of functional programming languages, but most ML-family languages also offer support for effects such as control operators and state. Indeed, they usually support full first-class general references, which can contain values of any type, including higher types. Concretely, programmers may store functions that can modify the heap, within the heap itself.\nSince higher-order imperative programs are often much more difficult to understand than programs using either higher-order or imperative features alone, programmers are encouraged to stick to the functional fragment much as possible. However, one place where higher-order state is used quite heavily in practice is in interactive programs, like graphical user interfaces. These reactive systems are typically implemented in an aggressively higher-order stateful style, with each mutable component storing a set of callbacks to invoke whenever a particular event happens.\nIn this talk, I will describe a recent line of work on structuring these kinds of programs, based on the idea of using a Curry-Howard proof term correspondence with temporal logic as a type system for reactive programs. One of the surprises of this line of work is how many of the standard implementation techniques for reactive programs turn out to realize fundamental logical primitives. This opens the door to reactive programming models which retain both the simple reasoning principles of functional programming, and the efficient implementation strategies known to working programmers.",
      "Affiliations": ["University of Birmingham, UK"],
      "AffiliationsString": "University of Birmingham, UK",
      "Authors": ["neelakantankrishnaswami"],
      "Key": "mlfamilyworkshop-2016-papers-invited-talk",
      "PersonsString": "Neelakantan R. Krishnaswami",
      "Title": "Making Reactive Programs Function",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-invited-talk"
    },
    {
      "Abstract": "The or-pattern (p | q) matches a value v if either p or q match v. It may happen that both p and q match certain values, but that they don\u2019t bind their variables at the same places. OCaml specifies that the left pattern p then takes precedence, but users intuitively expect an angelic behavior, making the ``best\u2019\u2019 choice. Subtle bugs arise from this mismatch. When are (p | q) and (q | p) observably different? \nTo correctly answer this question we had to go back to pattern matrices, the primary technique to compile patterns and analyze them for exhaustivity, redundant clauses, etc. There is a generational gap: pattern matching was actively studied when most ML languages were first implemented, but many of today\u2019s students and practitioners trust our elders to maintain and improve them. Read on for your decadely fix of pattern matching theory!",
      "Affiliations": [
        "INRIA",
        "INRIA Rocquencourt",
        ""
      ],
      "AffiliationsString": "INRIA, INRIA Rocquencourt, ",
      "Authors": [
        "gabrielscherer",
        "lucmaranget",
        "thomasrefis"
      ],
      "Key": "mlfamilyworkshop-2016-papers-ambiguous-pattern-variables",
      "PersonsString": "Gabriel Scherer, Luc Maranget and Thomas Réfis",
      "Title": "Ambiguous pattern variables",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-ambiguous-pattern-variables"
    },
    {
      "Abstract": "",
      "Affiliations": ["Tohoku University"],
      "AffiliationsString": "Tohoku University",
      "Authors": ["olegkiselyov"],
      "Key": "tyde-2016-papers-parameterized-extensible-effects-and-session-types",
      "PersonsString": "Oleg Kiselyov",
      "Title": "Parameterized Extensible Effects and Session Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-parameterized-extensible-effects-and-session-types"
    },
    {
      "Abstract": "Type classes are an immensely popular and productive feature of Haskell. They have since been adopted in, and adapted to, numerous other languages, including theorem provers. This talk will show that type classes have a natural and efficient representation in .NET. This paves the way for the extension of F# and other .NET languages with Haskell style type classes. The representation is type preserving and promises easy and safe cross-language inter-operation. We are currently, and rapidly, extending the open source C# compiler and language service, Roslyn, with support for type classes but intend to do the same for F# once that work has been completed.",
      "Affiliations": [
        "Microsoft Research",
        "",
        "Microsoft",
        "",
        ""
      ],
      "AffiliationsString": "Microsoft Research, , Microsoft",
      "Authors": [
        "claudiorusso",
        "matthewwindsor",
        "donsyme",
        "ruperthorlick",
        "jamesclarke"
      ],
      "Key": "mlfamilyworkshop-2016-papers-classes-for-the-masses",
      "PersonsString": "Claudio Russo, Matthew Windsor, Don Syme, Rupert Horlick and James Clarke",
      "Title": "Classes for the Masses",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-classes-for-the-masses"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of  A Coruña"
      ],
      "AffiliationsString": ", University of  A Coruña",
      "Authors": [
        "danielcarballa",
        "lauramcastro"
      ],
      "Key": "erlang-2016-papers-automatic-generation-of-uml-sequence-diagrams-from-test-counterexamples",
      "PersonsString": "Daniel Carballa and Laura M. Castro",
      "Title": "Automatic generation of UML sequence diagrams from test counterexamples",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-automatic-generation-of-uml-sequence-diagrams-from-test-counterexamples"
    },
    {
      "Abstract": "We present an implementation of relational programming language miniKanren as a set of combinators and syntax extension for OCaml. The key feature of our approach is polymorphic unification, which can be used to unify data structures of almost arbitrary types. In addition we provide a useful generic programming pattern to systematically develop relational specifications in a typed manner, and address the problem of relational and functional code integration.",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "dmitrikosarev",
        "dmitriboulytchev"
      ],
      "Key": "mlfamilyworkshop-2016-papers-typed-embedding-of-relational-language-in-ocaml",
      "PersonsString": "Dmitri Kosarev and Dmitri Boulytchev",
      "Title": "Typed Embedding of Relational Language in OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-typed-embedding-of-relational-language-in-ocaml"
    },
    {
      "Abstract": "We define a block based matrix representation in Agda and lift various algebraic structures (semi-near-rings, semi-rings and closed semi-rings) to matrices in order to verify algorithms that can be implemented using the closure operation in a semi-ring.",
      "Affiliations": [
        "Chalmers University of Technology",
        ""
      ],
      "AffiliationsString": "Chalmers University of Technology, ",
      "Authors": [
        "patrikjansson",
        "adamsandbergeriksson"
      ],
      "Key": "tyde-2016-papers-an-agda-formalisation-of-the-transitive-closure-of-block-matrices",
      "PersonsString": "Patrik Jansson and Adam Sandberg Eriksson",
      "Title": "An Agda formalisation of the transitive closure of block matrices",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-an-agda-formalisation-of-the-transitive-closure-of-block-matrices"
    },
    {
      "Abstract": "",
      "Affiliations": ["Jane Street"],
      "AffiliationsString": "Jane Street",
      "Authors": ["yaronminsky"],
      "Key": "cufp-2016-papers-keynote",
      "PersonsString": "Yaron Minsky",
      "Title": "Keynote",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-keynote"
    },
    {
      "Abstract": "This paper describes a new LLVM-based backend for the Parallel ML compiler (part of the Manticore system). This backend is novel in that it supports heap-allocated first-class continuations (a first for LLVM), which, in turn enables language features, such as callcc, lightweight concurrency mechanisms, and PML\u2019s parallelism features.",
      "Affiliations": [
        "University of Chicago",
        "University of Chicago"
      ],
      "AffiliationsString": "University of Chicago",
      "Authors": [
        "kavonfarvardin",
        "johnreppy"
      ],
      "Key": "mlfamilyworkshop-2016-papers-compiling-with-continuations-and-llvm",
      "PersonsString": "Kavon Farvardin and John Reppy",
      "Title": "Compiling with Continuations and LLVM",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-compiling-with-continuations-and-llvm"
    },
    {
      "Abstract": "GNU Guix is a tool implementing the functional package management paradigm pioneered by Nix. It is rooted in the free software world where it has a growing user and contributor community. Guix and the Guix System Distribution (GuixSD) put an emphasis on providing a unified Scheme environment to deal with package management, container and virtual machine provisioning, operating system deployment, configuration, services, and associated activities.\nIn this talk I will describe the techniques we use to achieve this unified interface, with the intent to blur the user/developer distinction, and our early experience. The oft-discussed advantages of embedding domain-specific languages (DSLs) have allowed us to develop tools and a programming environment that many envy. Our use of Scheme covers domains traditionally associated with C, Perl, or Python: \u201cbuild scripts\u201d, system initialization code, service management, Linux containers, and more. Pervasive use of Scheme leads to a \u201cmulti-tier\u201d programming environment; I will describe our staging techniques, implemented as mere Scheme syntax extensions.",
      "Affiliations": ["INRIA"],
      "AffiliationsString": "INRIA",
      "Authors": ["ludoviccourtes"],
      "Key": "cufp-2016-papers-guix-scheme-as-a-uniform-os-admin-and-deployment-interface",
      "PersonsString": "Ludovic Courtès",
      "Title": "Guix: Scheme as a uniform OS admin and deployment interface",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-guix-scheme-as-a-uniform-os-admin-and-deployment-interface"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Facebook",
        "Tsuru Capital"
      ],
      "AffiliationsString": "Facebook, Tsuru Capital",
      "Authors": [
        "katieots",
        "alexlang"
      ],
      "Key": "cufp-2016-papers-closing-remarks",
      "PersonsString": "Katie Ots and Alex Lang",
      "Title": "Closing remarks",
      "Type": "Day closing",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-closing-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Edinburgh, UK"
      ],
      "AffiliationsString": ", University of Edinburgh, UK",
      "Authors": [
        "danielhillerstrom1",
        "samlindley"
      ],
      "Key": "tyde-2016-papers-liberating-effects-with-rows-and-handlers",
      "PersonsString": "Daniel Hillerström and Sam Lindley",
      "Title": "Liberating Effects with Rows and Handlers",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-liberating-effects-with-rows-and-handlers"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Glasgow",
        "",
        "University of Glasgow"
      ],
      "AffiliationsString": ", University of Glasgow",
      "Authors": [
        "andreealutac",
        "nataliachechina",
        "gerardoaragoncamarasa",
        "philtrinder"
      ],
      "Key": "erlang-2016-papers-towards-reliable-and-scalable-robot-communication",
      "PersonsString": "Andreea Lutac, Natalia Chechina, Gerardo Aragon-Camarasa and Phil Trinder",
      "Title": "Towards Reliable and Scalable Robot Communication",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-towards-reliable-and-scalable-robot-communication"
    },
    {
      "Abstract": "Malfunction is an untyped program representation intended as a compilation target for functional languages, consisting of a thin wrapper around OCaml\u2019s Lambda intermediate representation. \nCompilers targeting Malfunction convert programs to a simple s-expression-based syntax with clear semantics, which is then compiled to native code using OCaml\u2019s back-end, enjoying both the optimisations of OCaml\u2019s new flambda pass, and its battle-tested runtime and garbage collector.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["stephendolan"],
      "Key": "mlfamilyworkshop-2016-papers-malfunctional-programming",
      "PersonsString": "Stephen Dolan",
      "Title": "Malfunctional Programming",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-malfunctional-programming"
    },
    {
      "Abstract": "Nowadays, microservice architectures are commonly used for building distributed systems. Despite their advantages, there are some common problems that arise. In this talk, I present my experience solving some of these problems by using actors, and more specifically, the Akka toolkit.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["mariadelmarrubiogonzalez"],
      "Key": "erlang-2016-papers-keynote",
      "PersonsString": "María del Mar Rubio González",
      "Title": "Keynote: Solutions to distributed system problems, 'Akka', actors.",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-keynote"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Facebook",
        "Tsuru Capital"
      ],
      "AffiliationsString": "Facebook, Tsuru Capital",
      "Authors": [
        "katieots",
        "alexlang"
      ],
      "Key": "cufp-2016-papers-opening-remarks",
      "PersonsString": "Katie Ots and Alex Lang",
      "Title": "Opening remarks",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-opening-remarks"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of  A Coruña",
        "",
        ""
      ],
      "AffiliationsString": "University of  A Coruña, ",
      "Authors": [
        "lauramcastro",
        "jdanielfernandez",
        "carloslopezpampin"
      ],
      "Key": "erlang-2016-papers-making-everybody-comfortable-with-erlang-a-scada-system-for-thermal-control",
      "PersonsString": "Laura M. Castro, J. Daniel Fernandez and Carlos Lopez Pampin",
      "Title": "Making everybody comfortable with Erlang: a SCADA system for thermal control",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-making-everybody-comfortable-with-erlang-a-scada-system-for-thermal-control"
    },
    {
      "Abstract": ".",
      "Affiliations": ["University of Massachusetts Lowell"],
      "AffiliationsString": "University of Massachusetts Lowell",
      "Authors": ["jaymccarthy1"],
      "Key": "farm-2016-papers-bithoven-g-del-encoding-of-chamber-music-and-functional-8-bit-audio-synthesis",
      "PersonsString": "Jay McCarthy",
      "Title": "Bithoven: Gödel Encoding of Chamber Music and Functional 8-Bit Audio Synthesis",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-bithoven-g-del-encoding-of-chamber-music-and-functional-8-bit-audio-synthesis"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["tommurphy"],
      "Key": "farm-2016-papers-a-livecoding-semantics-for-functional-reactive-programming",
      "PersonsString": "Tom Murphy",
      "Title": "A Livecoding Semantics for Functional Reactive Programming",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-a-livecoding-semantics-for-functional-reactive-programming"
    },
    {
      "Abstract": "",
      "Affiliations": ["UNSW, Australia"],
      "AffiliationsString": "UNSW, Australia",
      "Authors": ["liamoconnor"],
      "Key": "tyde-2016-papers-applications-of-applicative-proof-search",
      "PersonsString": "Liam O'Connor",
      "Title": "Applications of Applicative Proof Search",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-applications-of-applicative-proof-search"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "Portland State University"
      ],
      "AffiliationsString": ", Portland State University",
      "Authors": [
        "larrydiehl",
        "timsheard"
      ],
      "Key": "tyde-2016-papers-generic-lookup-and-update-for-infinitary-inductive-recursive-types",
      "PersonsString": "Larry Diehl and Tim Sheard",
      "Title": "Generic Lookup and Update for Infinitary Inductive-Recursive Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-generic-lookup-and-update-for-infinitary-inductive-recursive-types"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "erlang-2016-papers-erlang-latest-news",
      "PersonsString": "",
      "Title": "Erlang latest news",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-erlang-latest-news"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "jenniferpaykin",
        "antalspectorzabusky",
        "kennethfoner"
      ],
      "Key": "tyde-2016-papers-choose-your-own-derivative",
      "PersonsString": "Jennifer Paykin, Antal Spector-Zabusky and Kenneth Foner",
      "Title": "Choose Your Own Derivative",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-choose-your-own-derivative"
    },
    {
      "Abstract": "F* is a language in the tradition of ML equipped with dependent types, monadic effects, refinement types and a weakest precondition calculus. Together, these features enable the F* programmer to prove functional correctness using a combination of automation via SMT solving and manual program proofs. \nIn the context of the greater Everest project, we are using F* to prove, build and deploy miTLS, a verified, efficient implementation of the Transport Layer Security (TLS) 1.3 protocol. \nThis extended abstract presents our work in progress. We are currently focusing our efforts on proving the memory safety and functional correctness of Elliptic Curve Cryptography (ECC) primitives, and on extracting this code to C. ECC primitives are a good candidate: they are modeled after the reference implementations in C. Therefore, they only exercise an imperative, first-order subset of F* that lends itself well to an efficient extraction to C.",
      "Affiliations": [
        "Microsoft Research",
        "INRIA",
        "INRIA",
        "",
        "Microsoft Research",
        "",
        "Microsoft Research India",
        "Microsoft Research"
      ],
      "AffiliationsString": "Microsoft Research, INRIA, , Microsoft Research India",
      "Authors": [
        "jonathanprotzenko",
        "karthikeyanbhargavan",
        "jeankarimzinzindohoue",
        "abhishekanand",
        "cedricfournet",
        "bryanparno",
        "aseemrastogi",
        "nikhilswamy"
      ],
      "Key": "mlfamilyworkshop-2016-papers-extracting-from-f-to-c-a-progress-report",
      "PersonsString": "Jonathan Protzenko, Karthikeyan Bhargavan, Jean-Karim Zinzindohoue, Abhishek Anand, Cedric Fournet, Bryan Parno, Aseem Rastogi and Nikhil Swamy",
      "Title": "Extracting from F* to C: a progress report",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-extracting-from-f-to-c-a-progress-report"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "University of St. Andrews, UK",
        "University of St. Andrews, UK"
      ],
      "AffiliationsString": ", University of St. Andrews, UK",
      "Authors": [
        "adambarwell",
        "christopherbrown",
        "kevinhammond",
        "davidcastro"
      ],
      "Key": "erlang-2016-papers-towards-semi-automatic-data-type-translation-for-parallelism-in-erlang",
      "PersonsString": "Adam Barwell, Christopher Brown, Kevin Hammond and David Castro",
      "Title": "Towards Semi-Automatic Data-Type Translation for Parallelism in Erlang",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-towards-semi-automatic-data-type-translation-for-parallelism-in-erlang"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "CNRS LaBRI, Inria Bordeaux,",
        "University of Bordeaux"
      ],
      "AffiliationsString": "CNRS LaBRI, Inria Bordeaux,, University of Bordeaux",
      "Authors": [
        "simonarchipoff",
        "davidjanin"
      ],
      "Key": "farm-2016-papers-structured-reactive-programming-with-polymorphic-temporal-tiles",
      "PersonsString": "Simon Archipoff and David Janin",
      "Title": "Structured reactive programming with polymorphic temporal tiles",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-structured-reactive-programming-with-polymorphic-temporal-tiles"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "tyde-2016-papers-opening",
      "PersonsString": "",
      "Title": "Opening",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-opening"
    },
    {
      "Abstract": "Some of the biggest growing pains we\u2019ve experienced with our microservice architecture at Jet is in preparing for system outages. I\u2019ll start with an overview of the benefits of choosing F# specifically, and functional programming in general, as well as Azure, for a chaos program. I\u2019ll follow up with a discussion of why your team needs to implement a chaos testing program, and finish with showing off our methods and code in depth.",
      "Affiliations": ["Jet.com"],
      "AffiliationsString": "Jet.com",
      "Authors": ["rachelreese"],
      "Key": "cufp-2016-papers-chaos-testing-with-f-and-azure",
      "PersonsString": "Rachel Reese",
      "Title": "Chaos testing with F# and Azure",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-chaos-testing-with-f-and-azure"
    },
    {
      "Abstract": "",
      "Affiliations": ["Grinnell College"],
      "AffiliationsString": "Grinnell College",
      "Authors": ["petermichaelosera"],
      "Key": "tyde-2016-papers-programming-assistance-for-type-directed-programming",
      "PersonsString": "Peter-Michael Osera",
      "Title": "Programming Assistance for Type-directed Programming",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-programming-assistance-for-type-directed-programming"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Cambridge, UK"
      ],
      "AffiliationsString": ", University of Cambridge, UK",
      "Authors": [
        "davidkalopermersinjak",
        "jeremyyallop"
      ],
      "Key": "tyde-2016-papers-generic-partially-static-data",
      "PersonsString": "David Kaloper-Mersinjak and Jeremy Yallop",
      "Title": "Generic partially-static data",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-generic-partially-static-data"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "Tufts University"
      ],
      "AffiliationsString": ", Tufts University",
      "Authors": [
        "samguyer",
        "calebhelbling"
      ],
      "Key": "farm-2016-papers-demo-juniper-a-functional-reactive-programming-language-for-the-arduino",
      "PersonsString": "Sam Guyer and Caleb Helbling",
      "Title": "Demo: Juniper: A Functional Reactive Programming Language for the Arduino",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-demo-juniper-a-functional-reactive-programming-language-for-the-arduino"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "UMR STMS: IRCAM-CNRS-UPMC",
        "CNMAT - UC Berkeley",
        "CNMAT - UC Berkeley"
      ],
      "AffiliationsString": "UMR STMS: IRCAM-CNRS-UPMC, CNMAT - UC Berkeley",
      "Authors": [
        "jeanbresson",
        "johnmaccallum",
        "adrianfreed"
      ],
      "Key": "farm-2016-papers-o-om-structured-functional-communication-between-computer-music-systems-using-osc-and-odot",
      "PersonsString": "Jean Bresson, John MacCallum and Adrian Freed",
      "Title": "o.OM: Structured-Functional Communication between Computer Music Systems using OSC and Odot",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-o-om-structured-functional-communication-between-computer-music-systems-using-osc-and-odot"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Erlang Solutions Ltd.",
        ""
      ],
      "AffiliationsString": "Erlang Solutions Ltd., ",
      "Authors": [
        "viktoriafordos",
        "francescocesarini"
      ],
      "Key": "erlang-2016-papers-crdts-for-the-configuring-distributed-erlang-systems",
      "PersonsString": "Viktória Fördős and Francesco Cesarini",
      "Title": " CRDTs for the Configuration of Distributed Erlang Systems",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-crdts-for-the-configuring-distributed-erlang-systems"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Tufts University",
        ""
      ],
      "AffiliationsString": "Tufts University, ",
      "Authors": [
        "calebhelbling",
        "samguyer"
      ],
      "Key": "farm-2016-papers-juniper-a-functional-reactive-programming-language-for-the-arduino",
      "PersonsString": "Caleb Helbling and Sam Guyer",
      "Title": "Juniper: A Functional Reactive Programming Language for the Arduino",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-juniper-a-functional-reactive-programming-language-for-the-arduino"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Victoria"],
      "AffiliationsString": "University of Victoria",
      "Authors": ["jakobleben"],
      "Key": "farm-2016-papers-arrp-a-functional-language-with-multi-dimensional-signals-and-recurrence-equations",
      "PersonsString": "Jakob Leben",
      "Title": "Arrp: A Functional Language with Multi-dimensional Signals and Recurrence Equations",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-arrp-a-functional-language-with-multi-dimensional-signals-and-recurrence-equations"
    },
    {
      "Abstract": "WebAssembly is a new language- and platform-independent binary code format bringing native-code performance to the web. We present its design and report our experience with specifying its semantics via a reference interpreter written in OCaml, that currently serves as a proxy for a future formal specification.",
      "Affiliations": ["Google"],
      "AffiliationsString": "Google",
      "Authors": ["andreasrossberg"],
      "Key": "mlfamilyworkshop-2016-papers-webassembly-high-speed-at-low-cost-for-everyone",
      "PersonsString": "Andreas Rossberg",
      "Title": "WebAssembly: high speed at low cost for everyone",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-webassembly-high-speed-at-low-cost-for-everyone"
    },
    {
      "Abstract": "Unikernels are an exciting new take on applications design and deployment. OCaml has been quietly forging ahead in the area with libraries like Mirage, whereby we can generate apps that operate at such a low level we don\u2019t even need operating systems on the backend anymore (removing 15 million lines of memory-unsafe code) - while at the same time, maintaining more reliable software with less effort through lightweight type-checked code sharing between server, browser clients, &amp; native mobile apps.\nWhile much theory and effort has been put into building the basis of Mirage, deploying unikernels into production (whether on public clouds or private servers) remains a very artisanal experience. In the talk we\u2019ll look at how the properties of Mirage unikernel enable us to rethink large sections of the app development lifecycle (apps that are MBs in size and boot in 50 milliseconds!), and also look at a case study of what it takes to move said unikernels to production with reliable testing, deployment, monitoring, and debug tooling.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["seangrove"],
      "Key": "cufp-2016-papers-baby-steps-to-unikernels-in-production",
      "PersonsString": "Sean Grove",
      "Title": "Baby steps to unikernels in production",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-baby-steps-to-unikernels-in-production"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "andreasloscher",
        "kostissagonas"
      ],
      "Key": "erlang-2016-papers-the-nifty-way-to-call-hell-from-heaven",
      "PersonsString": "Andreas Löscher and Kostis Sagonas",
      "Title": "The Nifty Way to Call Hell from Heaven ",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-the-nifty-way-to-call-hell-from-heaven"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["willsewell"],
      "Key": "cufp-2016-papers-developing-a-fast-and-durable-pub-sub-message-bus",
      "PersonsString": "Will Sewell",
      "Title": "Developing a fast and durable pub/sub message bus",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-developing-a-fast-and-durable-pub-sub-message-bus"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "erlang-2016-papers-opening-welcome",
      "PersonsString": "",
      "Title": "Opening & Welcome",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-opening-welcome"
    },
    {
      "Abstract": "Niconico is a video sharing and a live streaming platform operated by Dwango. Dwango uses Scala widely for foundation systems such as an account system, a billing system and an event bus for inter-services. In this talk, we will introduce how to build web applications by using continuation monads. This approach is mainly used in the Niconico account system.\nThe Niconico account system has the following requirements: \n \n Various requests \n Various user registration leads \n OAuth logins (Google, Facebook, Twitter, etc.) \n Multi-factor authentication \n Various responses \n HTML Pages (in Japanese, English and Chinese) \n JSON and XML \n Redirects \n Various filterings \n CSRF check \n Add CORS headers \n User tracking \n\nThe Niconico account system is developed with Play framework which is one of the most popular web framework in Scala. Play framework has component technologies for building web applications. But the composition functionality of Play framework is insufficient to our requirements. Therefore, we decided to use components of continuation monads instead of the standard technique of Play framework. We believe that our approach can also be applied to other languages, because a web framework often has similar nested structures such as Java Servlet, Python WSGI, and so on.\nThis talk will be a detailed explanation of the topic presented at ScalaMatsuri 2016.\nOur prototype implementation has been published on GitHub.",
      "Affiliations": ["Dwango"],
      "AffiliationsString": "Dwango",
      "Authors": ["seitaroyuki"],
      "Key": "cufp-2016-papers-building-a-web-application-with-continuation-monads",
      "PersonsString": "Seitaro Yuki",
      "Title": "Building a web application with continuation monads",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-building-a-web-application-with-continuation-monads"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "basharigrieddebalkhawaldeh",
        "antonsetzer"
      ],
      "Key": "tyde-2016-papers-programming-with-monadic-csp-style-processes-in-dependent-type-theory",
      "PersonsString": "Bashar Igried Deb Alkhawaldeh and Anton Setzer",
      "Title": "Programming with Monadic CSP-Style Processes in Dependent Type Theory",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-programming-with-monadic-csp-style-processes-in-dependent-type-theory"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of Glasgow",
        "",
        "University of Glasgow"
      ],
      "AffiliationsString": "University of Glasgow, ",
      "Authors": [
        "nataliachechina",
        "mariomorohernandez",
        "philtrinder"
      ],
      "Key": "erlang-2016-papers-a-scalable-reliable-instant-messenger-using-the-sd-erlang-libraries",
      "PersonsString": "Natalia Chechina, Mario Moro Hernandez and Phil Trinder",
      "Title": "A Scalable Reliable Instant Messenger using the SD Erlang Libraries",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-a-scalable-reliable-instant-messenger-using-the-sd-erlang-libraries"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "erlang-2016-papers-farewell-closing",
      "PersonsString": "",
      "Title": "Farewell & Closing",
      "Type": "Day closing",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-farewell-closing"
    },
    {
      "Abstract": "This paper reports on the extension of SML# with natural join operator commonly used in database query. The extension is based on the database typing of Ohori and Buneman and an HM(X)-style constraint polymorphic typing. Based on this typing and type inference algorithm, the seamless SQL integration of SML# is extended with natural join. The extended SML# is available as a version 3.1.0-trial_join.",
      "Affiliations": [
        "Tohoku University",
        "Tohoku University, Japan",
        "Tohoku University, Japan"
      ],
      "AffiliationsString": "Tohoku University, Tohoku University, Japan",
      "Authors": [
        "tomohirosasaki",
        "katsuhiroueno",
        "atsushiohori"
      ],
      "Key": "mlfamilyworkshop-2016-papers-sml-with-natural-join",
      "PersonsString": "Tomohiro Sasaki, Katsuhiro Ueno and Atsushi Ohori",
      "Title": "SML# with Natural Join",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-sml-with-natural-join"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["renickbell"],
      "Key": "farm-2016-papers-farm-2016-performance-evening",
      "PersonsString": "Renick Bell",
      "Title": "FARM 2016 Performance Evening",
      "Type": "Other",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-farm-2016-performance-evening"
    },
    {
      "Abstract": "Consider what it means to be a cache. You need to be able to (1) associate a key with a value and (2) get some value given a key if such a value exists. That\u2019s basically it. Caches tend to appear in layers. In a CPU, memory reads check L1, then L2, then L3, then RAM. When we want to load an image, we first check RAM, then disk, and finally network. \nIn a mobile app, if you don\u2019t nail your cache code, your users will suffer. Excessive networking causes both battery and data-plan drain. We can help ensure a clean correct implementation by combining caches. Given two caches A and B, A on-top-of B means first check A, fallthrough to B, then write back to A. Now we can define a monoid for caches. Monoids imply easy composition. Easy composition means reasoning about our code becomes easy.\nSuch an abstraction isn\u2019t possible to express both statically and generically in languages like Objective-C and Java, but we can with Swift\u2019s strong type system. The caching library Carlos provides the foundation upon which we can build prefetching and other useful transformations. In our app, adopting such a system simplified our codebase: Caches became reusable legos. But the complexity doesn\u2019t just all go away, it\u2019s just hidden. With an abstraction so nice, it\u2019s tempting to think of the actual caches and cache glue as black-boxes. One problem we ran into was a reference cycle that led to large bitmaps leaking and phones running out of memory. It\u2019s important to actually think about the implementation details in detail, since these are your building blocks for the rest of the system. When your building blocks are stable, your building is stable.\nCaching and prefetching are necessary for mobile apps. In this talk, I will explain how to think about caches as monoids, how a monoidal caching system can simplify our jobs as software engineers, and what real-world problems we ran into when putting such a system into production.",
      "Affiliations": ["Pinterest"],
      "AffiliationsString": "Pinterest",
      "Authors": ["brandonkase"],
      "Key": "cufp-2016-papers-composable-caching-in-swift",
      "PersonsString": "Brandon Kase",
      "Title": "Composable Caching in Swift",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-composable-caching-in-swift"
    },
    {
      "Abstract": "What, in the end, distinguishes the functional programmer from the OO developer? Much effort is spent on arguing how FP is more efficient. More significant, however, is that functional programmers produce different models from their OO and relational counterparts, which enable more powerful software architecture. The talk traces this observation through 13 years of functional programming applied in industrial projects, in a variety of languages. I\u2019ll touch on projects in stage lighting (&quot;\u201cstage lighting has algebraic structure\u201d\u201c), financial derivatives (\u201d\u201cmarket data is compositional\u201d\u201c), semiconductor manufacturing (\u201d\u201chope is a monad\u201d\u201c, \u201d\u201cscheduling is an arrow\u201d\u201c), social pedagogy (\u201d\u201cthe GUI is a function\u201d&quot;), and others, as time permits.\nWhile a number of lessons from these experiences may seem obvious, they were hard-won: \n \n purely functional is better \n look for compositionality \n monads can be found in unexpected places \n\n(Not among them: Static types are better.)",
      "Affiliations": ["Active Group GmbH"],
      "AffiliationsString": "Active Group GmbH",
      "Authors": ["michaelsperber"],
      "Key": "cufp-2016-papers-hope-is-a-monad",
      "PersonsString": "Michael Sperber",
      "Title": "Hope is a Monad",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-hope-is-a-monad"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["francisshuman"],
      "Key": "farm-2016-papers-demo-epimorphism",
      "PersonsString": "Francis Shuman",
      "Title": "Demo: Epimorphism",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-demo-epimorphism"
    },
    {
      "Abstract": "We present the embedding of the language Eff into OCaml, using the library of delimited continuations or the OCaml-effects branch. The embedding is systematic, lightweight, performant and supports even higher-order, `dynamic\u2019 effects with their polymorphism. OCaml thus may be regarded as another implementation of Eff, broadening the scope and appeal of that language.",
      "Affiliations": [
        "Tohoku University",
        "University of Cambridge"
      ],
      "AffiliationsString": "Tohoku University, University of Cambridge",
      "Authors": [
        "olegkiselyov",
        "kcsivaramakrishnan"
      ],
      "Key": "mlfamilyworkshop-2016-papers-eff-directly-in-ocaml",
      "PersonsString": "Oleg Kiselyov and KC Sivaramakrishnan",
      "Title": "Eff Directly in OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-eff-directly-in-ocaml"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["jamesmckinna1"],
      "Key": "tyde-2016-papers-bidirectional-transformations-are-proof-relevant-bisimulations",
      "PersonsString": "James McKinna",
      "Title": "Bidirectional Transformations are Proof-Relevant Bisimulations",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-bidirectional-transformations-are-proof-relevant-bisimulations"
    },
    {
      "Abstract": "Algebraic effects and handlers provide a modular abstraction for modeling and controlling computational effects. We present a compiler for the experimental language Links with effect handlers. Our compiler interfaces with the Multicore OCaml backend to take advantage of OCaml\u2019s implementation of efficient handlers.",
      "Affiliations": [
        "The University of Edinburgh",
        "University of Edinburgh, UK",
        "University of Cambridge"
      ],
      "AffiliationsString": "The University of Edinburgh, University of Edinburgh, UK, University of Cambridge",
      "Authors": [
        "danielhillerstrom",
        "samlindley",
        "kcsivaramakrishnan"
      ],
      "Key": "mlfamilyworkshop-2016-papers-compiling-links-effect-handlers-to-the-ocaml-backend",
      "PersonsString": "Daniel Hillerström, Sam Lindley and KC Sivaramakrishnan",
      "Title": "Compiling Links Effect Handlers to the OCaml Backend",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-compiling-links-effect-handlers-to-the-ocaml-backend"
    },
    {
      "Abstract": "",
      "Affiliations": ["ThoughtWorks (UK) Ltd."],
      "AffiliationsString": "ThoughtWorks (UK) Ltd.",
      "Authors": ["chrisford"],
      "Key": "farm-2016-papers-call-for-collaboration-computational-musicology-profit",
      "PersonsString": "Chris Ford",
      "Title": "Call for Collaboration: Computational Musicology, ????, Profit",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-call-for-collaboration-computational-musicology-profit"
    },
    {
      "Abstract": "So, you\u2019ve written a DSL, it\u2019s a work of art! It so perfectly models the problem at hand that even a trained house cat could generate business value. You just have one problem, your interpreter runs 100x slower than a shell script launching JVMs in a loop.\nDomain specific languages (DSLs) are able to offer the abstraction benefits of a high-level language, while when compiled, competing with low-level languages on performance. Because DSLs have a much smaller problem area, many specialised optimisations can be performed which are not feasible for a general purpose language.\nIn this talk, we will explain a number of optimisations which are useful for DSLs, and show our solutions to the practical issues we faced when implementing them in our query language, Icicle.\nIcicle is a query language for processing large amounts of time-series data. Its type system enforces that queries require only a single pass over the data, and that multiple queries over the same data can be fused together. By using a combination of high level optimisations such as partial evaluation and common subexpression elimination, and low level optimisations such as parsing code which is specialised for the given input, our queries are faster than the equivalent hand-written C code.\nFrom this talk, the audience will learn how the focused point of view that DSLs provide can be useful in performance critical systems, as well as a number of concrete techniques for optimising their own DSLs.\nTarget\nAnyone who is interested in domain specific languages (DSLs), embedded or external, and wants to know how to make them beat the pants off hand written C/C++.\nThe techniques presented are applicable to DSLs written in any language, although a familiarity with Haskell syntax would be a plus.",
      "Affiliations": ["Ambiata"],
      "AffiliationsString": "Ambiata",
      "Authors": ["jacobstanley"],
      "Key": "cufp-2016-papers-the-highs-and-lows-of-optimising-dsls",
      "PersonsString": "Jacob Stanley",
      "Title": "The Highs and Lows of Optimising DSLs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/cufp-2016-papers-the-highs-and-lows-of-optimising-dsls"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Imperial College London",
        "Imperial College London"
      ],
      "AffiliationsString": "Imperial College London",
      "Authors": [
        "csongorkiss",
        "tobyshaw1"
      ],
      "Key": "farm-2016-papers-demo-voxelcad-a-collaborative-voxel-based-cad-tool",
      "PersonsString": "Csongor Kiss and Toby Shaw",
      "Title": "Demo: VoxelCAD, a collaborative voxel-based CAD tool",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-demo-voxelcad-a-collaborative-voxel-based-cad-tool"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "Università della Svizzera italiana",
        "IBM Research Lab Zurich",
        "University of Lugano"
      ],
      "AffiliationsString": "Università della Svizzera italiana, IBM Research Lab Zurich, University of Lugano",
      "Authors": [
        "andrearosa",
        "lydiaychen",
        "walterbinder"
      ],
      "Key": "erlang-2016-papers-profiling-actor-utilization-and-communication-in-akka",
      "PersonsString": "Andrea Rosà, Lydia Y. Chen and Walter Binder",
      "Title": "Profiling Actor Utilization and Communication in Akka",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-profiling-actor-utilization-and-communication-in-akka"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "Erlang Solutions Ltd.",
        "Technischen Universität Kaiserslautern"
      ],
      "AffiliationsString": ", Erlang Solutions Ltd., Technischen Universität Kaiserslautern",
      "Authors": [
        "deepthidevakiakkoorath",
        "viktoriafordos",
        "annettebieniusa"
      ],
      "Key": "erlang-2016-papers-observing-the-consistency-of-distributed-systems",
      "PersonsString": "Deepthi Devaki Akkoorath, Viktória Fördős and Annette Bieniusa",
      "Title": "Observing the consistency of distributed systems",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/erlang-2016-papers-observing-the-consistency-of-distributed-systems"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "mlfamilyworkshop-2016-papers-welcome",
      "PersonsString": "",
      "Title": "Welcome",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/mlfamilyworkshop-2016-papers-welcome"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Oxford, UK"],
      "AffiliationsString": "University of Oxford, UK",
      "Authors": ["jeremygibbons"],
      "Key": "tyde-2016-papers-welcome",
      "PersonsString": "Jeremy Gibbons",
      "Title": "APLicative Programming with Naperian Functors",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/tyde-2016-papers-welcome"
    },
    {
      "Abstract": "",
      "Affiliations": ["ThoughtWorks (UK) Ltd."],
      "AffiliationsString": "ThoughtWorks (UK) Ltd.",
      "Authors": ["chrisford"],
      "Key": "farm-2016-papers-demo-klangmeister",
      "PersonsString": "Chris Ford",
      "Title": "Demo: Klangmeister",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-demo-klangmeister"
    },
    {
      "Abstract": "",
      "Affiliations": ["Adzerk"],
      "AffiliationsString": "Adzerk",
      "Authors": ["daveyarwood"],
      "Key": "farm-2016-papers-demo-alda-a-text-based-music-composition-language",
      "PersonsString": "Dave Yarwood",
      "Title": "Demo: Alda: A text-based music composition language",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/farm-2016-papers-demo-alda-a-text-based-music-composition-language"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["romaincalascibetta"],
      "Key": "ocaml-2016-papers-who-s-got-your-mail-mr-mime-",
      "PersonsString": "Romain Calascibetta",
      "Title": "Who's got your Mail? Mr. Mime!",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-who-s-got-your-mail-mr-mime-"
    },
    {
      "Abstract": "",
      "Affiliations": ["OCamlPro"],
      "AffiliationsString": "OCamlPro",
      "Authors": ["fabricelefessant"],
      "Key": "ocaml-2016-papers-opam-builder-continuous-monitoring-of-opam-repositories",
      "PersonsString": "Fabrice Le Fessant",
      "Title": "OPAM-builder: Continuous Monitoring of OPAM Repositories",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-opam-builder-continuous-monitoring-of-opam-repositories"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "University of Cambridge",
        ""
      ],
      "AffiliationsString": "University of Cambridge, ",
      "Authors": [
        "kcsivaramakrishnan",
        "theolaurent"
      ],
      "Key": "ocaml-2016-papers-lock-free-programming-for-the-masses",
      "PersonsString": "KC Sivaramakrishnan and Théo Laurent",
      "Title": "Lock-free programming for the masses",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-lock-free-programming-for-the-masses"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "",
        "OCamlPro"
      ],
      "AffiliationsString": ", OCamlPro",
      "Authors": [
        "benjamincanou",
        "gregoirehenry",
        "cagdasbozman",
        "fabricelefessant"
      ],
      "Key": "ocaml-2016-papers-learn-ocaml-an-online-learning-center-for-ocaml",
      "PersonsString": "Benjamin Canou, Grégoire Henry, Çagdas Bozman and Fabrice Le Fessant",
      "Title": "Learn OCaml: An Online Learning Center for OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-learn-ocaml-an-online-learning-center-for-ocaml"
    },
    {
      "Abstract": "",
      "Affiliations": ["OCamlPRO"],
      "AffiliationsString": "OCamlPRO",
      "Authors": ["pierrechambart"],
      "Key": "ocaml-2016-papers-partial-evaluation-and-metaprogramming",
      "PersonsString": "Pierre Chambart",
      "Title": "Partial evaluation and metaprogramming",
      "Type": "Event",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-partial-evaluation-and-metaprogramming"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "florentbalestrieri",
        "michelmauny"
      ],
      "Key": "ocaml-2016-papers-generic-programming-in-ocaml",
      "PersonsString": "Florent Balestrieri and Michel Mauny",
      "Title": "Generic Programming in OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-generic-programming-in-ocaml"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["jacqueshenrijourdan"],
      "Key": "ocaml-2016-papers-statistically-profiling-memory-in-ocaml",
      "PersonsString": "Jacques-Henri Jourdan",
      "Title": "Statistically profiling memory in OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-statistically-profiling-memory-in-ocaml"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["damiendoligez"],
      "Key": "ocaml-2016-papers-invited-talk",
      "PersonsString": "Damien Doligez",
      "Title": "Invited Talk",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-invited-talk"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "INRIA",
        "National Institute of Advanced Industrial Science and Technology, Japan",
        ""
      ],
      "AffiliationsString": "INRIA, National Institute of Advanced Industrial Science and Technology, Japan, ",
      "Authors": [
        "timothybourke",
        "juninoue",
        "marcpouzet"
      ],
      "Key": "ocaml-2016-papers-sundials-ml-interfacing-with-numerical-solvers",
      "PersonsString": "Timothy Bourke, Jun Inoue and Marc Pouzet",
      "Title": "Sundials/ML: interfacing with numerical solvers",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-sundials-ml-interfacing-with-numerical-solvers"
    },
    {
      "Abstract": "",
      "Affiliations": ["OCamlPRO"],
      "AffiliationsString": "OCamlPRO",
      "Authors": ["pierrechambart"],
      "Key": "ocaml-2016-papers-semantics-of-the-lambda-intermediate-language",
      "PersonsString": "Pierre Chambart",
      "Title": "Semantics of the Lambda intermediate language",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-semantics-of-the-lambda-intermediate-language"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "OCamlPro"
      ],
      "AffiliationsString": ", OCamlPro",
      "Authors": [
        "hannesmehnert",
        "louisgesbert"
      ],
      "Key": "ocaml-2016-papers-conex-establishing-trust-into-data-repositories",
      "PersonsString": "Hannes Mehnert and Louis Gesbert",
      "Title": "Conex -- establishing trust into data repositories",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-conex-establishing-trust-into-data-repositories"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "University of Cambridge, UK",
        ""
      ],
      "AffiliationsString": ", University of Cambridge, UK",
      "Authors": [
        "enguerranddecorne",
        "jeremyyallop",
        "davidkalopermersinjak"
      ],
      "Key": "ocaml-2016-papers-ocaml-inside-a-drop-in-replacement-for-libtls",
      "PersonsString": "Enguerrand Decorne, Jeremy Yallop and David Kaloper-Mersinjak",
      "Title": "OCaml inside: a drop-in replacement for libtls",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-ocaml-inside-a-drop-in-replacement-for-libtls"
    },
    {
      "Abstract": "",
      "Affiliations": ["Jane Street"],
      "AffiliationsString": "Jane Street",
      "Authors": ["markshinwell"],
      "Key": "ocaml-2016-papers-welcome-mark-shinwell-",
      "PersonsString": "Mark Shinwell",
      "Title": "Welcome",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-welcome-mark-shinwell-"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["fredericbour"],
      "Key": "ocaml-2016-papers-inuit-library-from-printf-to-interactive-user-interfaces",
      "PersonsString": "Frédéric Bour",
      "Title": "Inuit library: from printf to interactive user-interfaces",
      "Type": "Event",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-inuit-library-from-printf-to-interactive-user-interfaces"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["spiridoneliopoulos"],
      "Key": "ocaml-2016-papers-improving-the-ocaml-web-stack-motivations-and-progress",
      "PersonsString": "Spiridon Eliopoulos",
      "Title": "Improving the OCaml Web Stack: Motivations and Progress",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-improving-the-ocaml-web-stack-motivations-and-progress"
    },
    {
      "Abstract": "",
      "Affiliations": [
        "",
        "",
        "",
        "OCamlPro"
      ],
      "AffiliationsString": ", OCamlPro",
      "Authors": [
        "cagdasbozman",
        "theophanehufschmitt",
        "michaellaporte",
        "fabricelefessant"
      ],
      "Key": "ocaml-2016-papers-ocp-lint-a-plugin-based-style-checker-with-semantic-patches",
      "PersonsString": "Çagdas Bozman, Théophane Hufschmitt, Michael Laporte and Fabrice Le Fessant",
      "Title": "ocp-lint, A Plugin-based Style-Checker with Semantic Patches",
      "Type": "Event",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-ocp-lint-a-plugin-based-style-checker-with-semantic-patches"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "ocaml-2016-papers-closing",
      "PersonsString": "",
      "Title": "Closing",
      "Type": "Day closing",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-closing"
    },
    {
      "Abstract": "",
      "Affiliations": ["OCamlPro"],
      "AffiliationsString": "OCamlPro",
      "Authors": ["louisgesbert"],
      "Key": "ocaml-2016-papers-the-state-of-the-ocaml-platform-september-2016",
      "PersonsString": "Louis Gesbert",
      "Title": "The State of the OCaml Platform: September 2016",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/ocaml-2016-papers-the-state-of-the-ocaml-platform-september-2016"
    },
    {
      "Abstract": "Most build systems start small and simple, but over time grow into hairy monstersthat few dare to touch. As we demonstrate in this paper, there are a few issuesthat cause build systems major scalability challenges, and many pervasivelyused build systems (e.g. Make) do not scale well. \nThis paper presents a solution to the challenges we identify. We use functionalprogramming to design abstractions for build systems, and implementthem on top of the Shake library, which allows us to describe build rules anddependencies. To substantiate our claims, we engineer a new build systemfor the Glasgow Haskell Compiler. The result is more scalable, faster, andspectacularly more maintainable than its Make-based predecessor.",
      "Affiliations": [
        "",
        "",
        "Microsoft Research, UK",
        "Facebook"
      ],
      "AffiliationsString": ", Microsoft Research, UK, Facebook",
      "Authors": [
        "andreymokhov",
        "neilmitchell",
        "simonpaytonjones",
        "simonmarlow"
      ],
      "Key": "haskellsymp-2016-papers-non-recursive-make-considered-harmful-build-systems-at-scale",
      "PersonsString": "Andrey Mokhov, Neil Mitchell, Simon Peyton Jones and Simon Marlow",
      "Title": "Non-recursive Make Considered Harmful: Build Systems at Scale",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-non-recursive-make-considered-harmful-build-systems-at-scale"
    },
    {
      "Abstract": "Fuzzing is a technique that involves testing programs using invalidor erroneous inputs. Most fuzzers require a set of valid inputs as astarting point, in which mutations are then introduced. QuickFuzz is afuzzer that leverages QuickCheck-style random test-case generationto automatically test programs that manipulate common file formatsby fuzzing. We rely on existing Haskell implementations offile-format-handling libraries found on Hackage, thecommunity-driven Haskell code repository. We have tried QuickFuzzin the wild and found that the approach is effective indiscovering vulnerabilities in real-world implementations of browsers,image processing utilities and file compressors among others.In addition, we introduce a mechanism to automatically derive random generators for the typesrepresenting these formats. QuickFuzz handles most well-known imageand media formats, and can be used to test programs and librarieswritten in any language.",
      "Affiliations": [
        "",
        "",
        "Chalmers University of Technology"
      ],
      "AffiliationsString": ", Chalmers University of Technology",
      "Authors": [
        "gustavogrieco",
        "martinceresa",
        "pablobuiras"
      ],
      "Key": "haskellsymp-2016-papers-quickfuzz-an-automatic-random-fuzzer-for-common-file-formats",
      "PersonsString": "Gustavo Grieco, Martín Ceresa and Pablo Buiras",
      "Title": "QuickFuzz: An Automatic Random Fuzzer for Common File Formats",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-quickfuzz-an-automatic-random-fuzzer-for-common-file-formats"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "haskellsymp-2016-papers-lightning-talks",
      "PersonsString": "",
      "Title": "Lightning Talks",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-lightning-talks"
    },
    {
      "Abstract": "Software Transactional Memory (STM) has become very popular in Haskell. Currently, there are nearly 500 packages on Haskell's package archive that directly use STM\\@. Despite the widespread use in real world applications, Haskell's STM implementation has seen very few updates since its introduction in 2005. \nIn this work, we describe our efforts to redesign the STM implementation in the Glasgow Haskell Compiler (GHC), based on a TL2-like implementation that is able to support both \\verb|orElse| and \\verb|retry| without the use of traditional nested transactions. We argue that our implementation is simpler than the current GHC implementation while supporting opacity. We also demonstrate that our implementation performs better than the current GHC implementation on a number of benchmarks by multiple orders of magnitude for long-running transactions. \nIn an effort to measure the performance of \\verb|orElse| and \\verb|retry|, we present an STM-based work stealing scheduler. With \\verb|orElse| and \\verb|retry|, we are able to elegantly implement the scheduler in just a few lines of code. We have modified the Par Monad, a real-world Haskell package that provides deterministic parallelism, to use our STM-based work stealing scheduler and show that it is not only simpler but is able to perform as well as the current scheduler.",
      "Affiliations": [
        "",
        "",
        "Rochester Institute of Technology"
      ],
      "AffiliationsString": ", Rochester Institute of Technology",
      "Authors": [
        "matthewle",
        "ryanyates",
        "matthewfluet"
      ],
      "Key": "haskellsymp-2016-papers-revisiting-software-transactional-memory-in-haskell",
      "PersonsString": "Matthew Le, Ryan Yates and Matthew Fluet",
      "Title": "Revisiting Software Transactional Memory in Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-revisiting-software-transactional-memory-in-haskell"
    },
    {
      "Abstract": "Using the theory of monoids and monoid actions, we give a unified framework that handles three common pointer manipulation tasks, namely, data serialisation, deserialisation, and memory allocation. Our main theoretical contribution is the formulation of the notion of a \\emph{twisted functor}, a generalisation of the semi-direct product construction for monoids. We show that semi-direct products and twisted functors are particularly well suited as an abstraction for many pointer manipulation tasks. \nWe describe the implementation of these abstractions in the context of a cryptographic library for Haskell. Twisted functors allow us to abstract all pointer arithmetic and size calculations into a few lines of code, significantly reducing the opportunities for buffer overflows.",
      "Affiliations": [
        "",
        "",
        "Hendrix College"
      ],
      "AffiliationsString": ", Hendrix College",
      "Authors": [
        "satvikchauhan",
        "piyushkurur",
        "brentyorgey"
      ],
      "Key": "haskellsymp-2016-papers-how-to-twist-pointers-without-breaking-them",
      "PersonsString": "Satvik Chauhan, Piyush Kurur and Brent Yorgey",
      "Title": "How to Twist Pointers without Breaking Them",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-how-to-twist-pointers-without-breaking-them"
    },
    {
      "Abstract": "This paper presents FitSpec, a tool providing automated assistance in the task of refining sets of test properties for Haskell functions. FitSpec tests mutant variations of functions under test against a given property set, recording any surviving mutants that pass all tests. The number of survivingmutants and any smallest survivor are presented to the user. A surviving mutant indicates incompleteness of the property set, prompting the user to amend a property or to add a new one, making the property set stronger. Based on the same test results, FitSpec also provides conjectures in the form of equivalences and implications between property subsets. These conjectures help the user to identify minimal core subsets of properties and so to reduce the cost of future property-based testing.",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "rudybraquehais",
        "colinrunciman"
      ],
      "Key": "haskellsymp-2016-papers-fitspec-refining-property-sets-for-functional-testing",
      "PersonsString": "Rudy Braquehais and Colin Runciman",
      "Title": "FitSpec: Refining Property Sets for Functional Testing",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-fitspec-refining-property-sets-for-functional-testing"
    },
    {
      "Abstract": "As part of our software toolkit at a major financial institutionwe have a library for relational algebra.This library is written in C++ and the type checking of the operations on the relations is very dynamic; all relations have the same static type.Of course, relational algebra operations have stringent type constraints,and since we believe in static typing, we would prefer these to be checked at compile time. \nWe have managed to get full static type checking of the relational code,using some modern extensions to the Haskell type system, such asclosed type families, type level strings, user-defined kinds, and custom type errors.The static type checking incurs no runtime overhead compared to the dynamically checked library. \nSome effort has gone into making the use of the typed library similar to the dynamically typed version.We have also tried to produce good error messages when something is wrong.",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "martenagren",
        "lennartaugustsson"
      ],
      "Key": "haskellsymp-2016-papers-experience-report-types-for-a-relational-algebra-library",
      "PersonsString": "Marten Agren and Lennart Augustsson",
      "Title": "Experience Report: Types for a Relational Algebra Library",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-experience-report-types-for-a-relational-algebra-library"
    },
    {
      "Abstract": "Pattern matching has proven to be a convenient, expressive way of inspecting data. Yet this language feature, in its traditional form, is limited: patterns must be data constructors of concrete data types. No computation or abstraction is allowed. The data type in question must be concrete, with no ability to enforce any invariants. Any change in this data type requires all clients to update their code. \nThis paper introduces pattern synonyms, which allow programmers to abstract over patterns, painting over all the shortcomings listed above. Pattern synonyms are assigned types, enabling a compiler to check the validity of a synonym independent of its definition. These types are intricate; detailing how to assign a type to a pattern synonym is a key contribution of this work. We have implemented pattern synonyms in the Glasgow Haskell Compiler, where they have enjoyed immediate popularity, but we believe this feature could easily be exported to other languages that support pattern matching.",
      "Affiliations": [
        "",
        "",
        "Microsoft Research, UK",
        "Bryn Mawr College"
      ],
      "AffiliationsString": ", Microsoft Research, UK, Bryn Mawr College",
      "Authors": [
        "matthewpickering",
        "gergoerdi",
        "simonpaytonjones",
        "richardeisenberg"
      ],
      "Key": "haskellsymp-2016-papers-pattern-synonyms",
      "PersonsString": "Matthew Pickering, Gergo Erdi, Simon Peyton Jones and Richard Eisenberg",
      "Title": "Pattern Synonyms",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-pattern-synonyms"
    },
    {
      "Abstract": "Remote procedure calls are computationally expensive, because network round-trips take several orders of magnitude longer than local interactions. One common technique for amortizing this cost is to batch together multiple independent requests into one compound request. Batching requests amounts to serializing the abstract syntax tree of a small program, in order to transmit it and run it remotely. The standard representation for abstract syntax is to use free monads; we show that free applicative functors are actually a better choice of representation for this scenario.",
      "Affiliations": ["University of Oxford, UK"],
      "AffiliationsString": "University of Oxford, UK",
      "Authors": ["jeremygibbons"],
      "Key": "haskellsymp-2016-papers-free-delivery-functional-pearl-",
      "PersonsString": "Jeremy Gibbons",
      "Title": "Free Delivery (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-free-delivery-functional-pearl-"
    },
    {
      "Abstract": "This paper presents a Haskell library for graph processing:DeltaGraph. One unique feature of this system is that intentionsto perform graph updates can be memoized \\emph{in-graph} in adecentralized fashion, and the propagation of these intentionswithin the graph can be decoupled from the realization of theupdates. As a result, DeltaGraph can respond to updates inconstant time and work elegantly with parallelism support. Webuild a Twitter-like application on top of DeltaGraph todemonstrate its effectiveness and explore parallelism andopportunistic computing optimizations.",
      "Affiliations": [
        "",
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "philipdexter",
        "yudavidliu",
        "kennethchiu"
      ],
      "Key": "haskellsymp-2016-papers-lazy-graph-processing-in-haskell",
      "PersonsString": "Philip Dexter, Yu David Liu and Kenneth Chiu",
      "Title": "Lazy Graph Processing in Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-lazy-graph-processing-in-haskell"
    },
    {
      "Abstract": "We present Aplite, a domain-specific language embedded in Haskell for implementing performance-critical functions in client-side web applications. In Aplite, we apply partial evaluation, multi-stage programming and techniques adapted from machine code-targeting, high-performance EDSLs to the domain of web applications. We use Aplite to implement, among other benchmarks, procedural animation using Perlin noise, symmetrical encryption and K-means clustering, showing Aplite to be consistently faster than equivalent hand-written JavaScript \u2013 up to an order of magnitude for some benchmarks. We also demonstrate how Aplite's multi-staged nature can be used to automatically tune programs to the environment in which they are running, as well as to inputs representative of the programs' intended workload. \nHigh-performance computation in the web browser is an attractive goal for many reasons: interactive simulations and games, cryptographic applications and reducing web companies' electricity bills by outsourcing expensive computations to users' web browsers. Similarly, functional programming in the browser is attractive due to its promises of simpler, shorter, safer programs. In this paper, we propose a way to combine the two.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["antonekblad"],
      "Key": "haskellsymp-2016-papers-high-performance-client-side-web-applications-through-haskell-edsls",
      "PersonsString": "Anton Ekblad",
      "Title": "High-Performance Client-Side Web Applications through Haskell EDSLs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-high-performance-client-side-web-applications-through-haskell-edsls"
    },
    {
      "Abstract": "Although laziness enables beautiful code, it comes with non-trivial performance costs. The ghc compiler for Haskell has optimizations to reduce those costs, but the optimizations are not sufficient. As a result, Haskell also provides a variety of strictness annotations so that users can indicate program points where an expression should be evaluated eagerly. Skillful use of those annotations is a black art, known only to expert Haskell programmers. In this paper, we introduce AUTOBAHN, a tool that uses genetic algorithms to automatically infer strictness annotations that improve program performance on representative inputs. Users examine the suggested annotations for soundness and can instruct AUTOBAHN to automatically produce modified sources. Experiments on 60 programs from the NoFib benchmark suite show that AUTOBAHN can infer annotation sets that improve runtime performance by a geometric mean of 8.5%. Case studies show AUTOBAHN can reduce the live size of a GC simulator by 99% and infer application-specific annotations for Aeson library code. A 10-fold cross-validation study shows the AUTOBAHN -optimized GC simulator generally outperforms a version optimized by an expert.",
      "Affiliations": [
        "Tufts University",
        "",
        "Tufts University"
      ],
      "AffiliationsString": "Tufts University, ",
      "Authors": [
        "yisuremywang",
        "diogenesnunez",
        "kathleenfisher"
      ],
      "Key": "haskellsymp-2016-papers-autobahn-using-genetic-algorithms-to-infer-strictness-annotations",
      "PersonsString": "Yisu Remy Wang, Diogenes Nunez and Kathleen Fisher",
      "Title": "Autobahn: Using Genetic Algorithms to Infer Strictness Annotations",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-autobahn-using-genetic-algorithms-to-infer-strictness-annotations"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "haskellsymp-2016-papers-pc-chair-report-and-state-of-haskell",
      "PersonsString": "",
      "Title": "PC Chair Report and State of Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-pc-chair-report-and-state-of-haskell"
    },
    {
      "Abstract": "Functional Reactive Programming (FRP) has come to mean many things. Yet, scratch the surface of the multitude of realisations, and there is great commonality between them. This paper investigates this commonality, turning it into a mathematically coherent and practical FRP realisation that allows us to express the functionality of many existing FRP systems and beyond by providing a minimal FRP core parameterised on a monad. We give proofs for our theoretical claims and we have verified the practical side by benchmarking a set of existing, non-trivial Yampa applications running on top of our new system with very good results.",
      "Affiliations": [
        "",
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "ivanperez",
        "manuelbarenz",
        "henriknilsson"
      ],
      "Key": "haskellsymp-2016-papers-functional-reactive-programming-refactored",
      "PersonsString": "Ivan Perez, Manuel Barenz and Henrik Nilsson",
      "Title": "Functional Reactive Programming, Refactored",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-functional-reactive-programming-refactored"
    },
    {
      "Abstract": "We present a small extension to Haskell called the Key monad. With the Key monad, unique keys of different types can be created and can be tested for equality. When two keys are equal, we also obtain a concrete proof that their types are equal. This gives us a form of dynamic typing, without the need for Typeable constraints. We show that our extension allows us to safely do things we could not otherwise do: it allows us to implement the ST monad (inefficiently), to implement an embedded form of arrow notation, and to translate parametric HOAS to typed de Bruijn indices, among others. Although strongly related to the ST monad, the Key monad is simpler and might be easier to prove safe. We do not provide such a proof of the safety of the Key monad, but we note that, surprisingly, a full proof of the safety of the ST monad also remains elusive to this day. Hence, another reason for studying the Key monad is that a safety proof for it might be a stepping stone towards a safety proof of the ST monad.",
      "Affiliations": [
        "Chalmers University of Technology",
        "Chalmers University of Technology",
        ""
      ],
      "AffiliationsString": "Chalmers University of Technology, ",
      "Authors": [
        "pablobuiras",
        "koenclaessen",
        "atzevanderploeg"
      ],
      "Key": "haskellsymp-2016-papers-the-key-monad-type-safe-unconstrained-dynamic-typing",
      "PersonsString": "Pablo Buiras, Koen Claessen and Atze van der Ploeg",
      "Title": "The Key Monad: Type-Safe Unconstrained Dynamic Typing",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-the-key-monad-type-safe-unconstrained-dynamic-typing"
    },
    {
      "Abstract": "While the speed of the Internet has been increasing,HTTP/1.1 has been plagued byhead-of-line blocking, low concurrency and redundant headers.To solve these problems, HTTP/2 was standardized.This paper summarizes our experience implementing HTTP/2 in Haskell.We found several techniques to improve the performance ofthe header compressionand identified a suitable data structure for HTTP/2 priority.Also, we showed that Haskell lightweight threadsare useful for HTTP/2 wherethe common tactics of one lightweight thread per connection cannot be used.The HTTP/2 implementation of Warp,the popular HTTP server library in Haskell,ultimately provides better throughput than its HTTP/1.1 counterpart.",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["kazuhikoyamamoto"],
      "Key": "haskellsymp-2016-papers-experience-report-developing-high-performance-http-2-server-in-haskell",
      "PersonsString": "Kazuhiko Yamamoto",
      "Title": "Experience Report: Developing High Performance HTTP/2 Server in Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-experience-report-developing-high-performance-http-2-server-in-haskell"
    },
    {
      "Abstract": "Several popular generalizations of monads have beenimplemented in Haskell. Unfortunately, because the shape of the associated type constructors do not match the standard Haskell monad interface, each such implementation provides its own type class and versions of associated library functions. Furthermore, simultaneous use of different monadic notions can be cumbersome as it in general is necessary to be explicit about which notion is used where. In this paper we introduce \\emph{supermonads}: an encoding of monadic notions that captures several different generalizations along with a version of the standard library of monadic functions that work uniformly with all of them.As standard Haskell type inference does not work for supermonads due to their generality, our supermonad implementation is accompanied with a language extension, in the form of a pluginfor the Glasgow Haskell Compiler (GHC), that allows type inferencefor supermonads, obviating the need for manual annotations.",
      "Affiliations": [
        "",
        ""
      ],
      "AffiliationsString": "",
      "Authors": [
        "janbracker1",
        "henriknilsson"
      ],
      "Key": "haskellsymp-2016-papers-supermonads-one-notion-to-bind-them-all",
      "PersonsString": "Jan Bracker and Henrik Nilsson",
      "Title": "Supermonads: One Notion to Bind Them All",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-supermonads-one-notion-to-bind-them-all"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "haskellsymp-2016-papers-welcome",
      "PersonsString": "",
      "Title": "Welcome",
      "Type": "Day opening",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-welcome"
    },
    {
      "Abstract": "We present a novel embedding of session-typed concurrency in Haskell. We extend an existing HOAS embedding of linear $\\lambda$-calculus with a set of core session-typed primitives, using indexed type families to express the constraints of the session typing discipline. We give two interpretations of our embedding, one in terms of GHC's built-in concurrency and another in terms of purely functional continuations. Our safety guarantees, including deadlock freedom, are assured statically and introduce no additional runtime overhead.",
      "Affiliations": [
        "University of Edinburgh, UK",
        "University of Edinburgh, UK"
      ],
      "AffiliationsString": "University of Edinburgh, UK",
      "Authors": [
        "samlindley",
        "jgarrettmorris"
      ],
      "Key": "haskellsymp-2016-papers-embedding-session-types-in-haskell",
      "PersonsString": "Sam Lindley and J. Garrett Morris",
      "Title": "Embedding Session Types in Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-embedding-session-types-in-haskell"
    },
    {
      "Abstract": "Monads have taken the world by storm, and are supported bydo-notation (at least in Haskell). Programmers are increasinglywaking up to the usefulness and ubiquity of Applicatives, but theyhave so far been hampered by the absence of supporting notation. Inthis paper we show how to re-use the very same do-notation to workfor Applicatives as well, providing efficiency benefits for some typesthat are both Monad and Applicative, and syntactic convenience forthose that are merely Applicative. The result is fully implementedas an optional extension in GHC, and is in use at Facebook to makeit easy to write highly-parallel queries in a distributed system.",
      "Affiliations": [
        "Facebook",
        "Microsoft Research, UK",
        "",
        ""
      ],
      "AffiliationsString": "Facebook, Microsoft Research, UK, ",
      "Authors": [
        "simonmarlow",
        "simonpaytonjones",
        "edwardkmett",
        "andreymokhov"
      ],
      "Key": "haskellsymp-2016-papers-desugaring-haskell-s-do-notation-into-applicative-operations",
      "PersonsString": "Simon Marlow, Simon Peyton Jones, Edward Kmett and Andrey Mokhov",
      "Title": "Desugaring Haskell's do-Notation into Applicative Operations",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-desugaring-haskell-s-do-notation-into-applicative-operations"
    },
    {
      "Abstract": "Causal commutative arrows (CCA) extend arrows with additional constructs and laws that make them suitable for modelling domains such as functional reactive programming, differential equations and synchronous dataflow. \nEarlier work has revealed that a syntactic transformation of CCA computations into normal form can result in significant performance improvements, sometimes increasing the speed of programs by orders of magnitude. \nIn this work we reformulate the normalization as a type class instance and derive optimized observation functions via a specialization to stream transformers to demonstrate that the same dramatic improvements can be achieved without leaving the language.",
      "Affiliations": [
        "University of Cambridge, UK",
        "Intel Labs"
      ],
      "AffiliationsString": "University of Cambridge, UK, Intel Labs",
      "Authors": [
        "jeremyyallop",
        "hailiu"
      ],
      "Key": "haskellsymp-2016-papers-causal-commutative-arrows-revisited",
      "PersonsString": "Jeremy Yallop and Hai Liu",
      "Title": "Causal Commutative Arrows Revisited",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/haskellsymp-2016-papers-causal-commutative-arrows-revisited"
    },
    {
      "Abstract": "We present a linear functional calculus with both the safety guarantees expressible with linear types and the rich language of combinators and composition provided by functional programming. Unlike previous combinations of linear typing and functional programming, we compromise neither the linear side (for example, our linear values are first-class citizens of the language) nor the functional side (for example, we do not require duplicate definitions of compositions for linear and unrestricted functions). To do so, we must generalize abstraction and application to encompass both linear and unrestricted functions. We capture the typing of the generalized constructs with a novel use of qualified types. Our system maintains the metatheoretic properties of the theory of qualified types, including principal types and decidable type inference. Finally, we give a formal basis for our claims of expressiveness, by showing that evaluation respects linearity, and that our language is a conservative extension of existing functional calculi.",
      "Affiliations": ["University of Edinburgh, UK"],
      "AffiliationsString": "University of Edinburgh, UK",
      "Authors": ["jgarrettmorris"],
      "Key": "icfp-2016-papers-the-best-of-both-worlds-linear-functional-programming-without-compromise",
      "PersonsString": "J. Garrett Morris",
      "Title": "The Best of Both Worlds: Linear Functional Programming without Compromise",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-the-best-of-both-worlds-linear-functional-programming-without-compromise"
    },
    {
      "Abstract": "Abstract interpretation provides advanced techniques to infer numerical invariants on programs. There is an abundant literature about numerical abstract domains that operate on scalar variables. This work deals with lifting these techniques to a realistic C memory model. We present an abstract memory functor that takes as argument any standard numerical abstract domain, and builds a memory abstract domain that finely tracks properties about memory contents, taking into account union types, pointer arithmetic and type casts. This functor is implemented and verified inside the Coq proof assistant with respect to the CompCert compiler memory model. Using the Coq extraction mechanism, it is fully executable and used by the Verasco C static analyzer.",
      "Affiliations": [
        "University of Rennes 1, France",
        "IMDEA Software Institute, Spain",
        "ENS Rennes, France"
      ],
      "AffiliationsString": "University of Rennes 1, France, IMDEA Software Institute, Spain, ENS Rennes, France",
      "Authors": [
        "sandrineblazy",
        "vincentlaporte",
        "davidpichardie"
      ],
      "Key": "icfp-2016-papers-an-abstract-memory-functor-for-verified-c-static-analyzers",
      "PersonsString": "Sandrine Blazy, Vincent Laporte and David Pichardie",
      "Title": "An Abstract Memory Functor for Verified C Static Analyzers",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-an-abstract-memory-functor-for-verified-c-static-analyzers"
    },
    {
      "Abstract": "Dinner",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-catering-dinner",
      "PersonsString": "",
      "Title": "Dinner",
      "Type": "Dinner",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-catering-dinner"
    },
    {
      "Abstract": "The development of concurrent separation logic (CSL) has sparked a long line of work on modular verification of sophisticated concurrent programs. Two of the most important features supported by several existing extensions to CSL are higher-order quantification and custom ghost state. However, none of the logics that support both of these features reap the full potential of their combination. In particular, none of them provide general support for a feature we dub &quot;higher-order ghost state&quot;: the ability to store arbitrary higher-order separation-logic predicates in ghost variables. \nIn this paper, we propose higher-order ghost state as a interesting and useful extension to CSL, which we formalize in the framework of Jung et al.'s recently developed Iris logic. To justify its soundness, we develop a novel algebraic structure called CMRAs (&quot;cameras&quot;), which can be thought of as &quot;step-indexed partial commutative monoids&quot;. Finally, we show that Iris proofs utilizing higher-order ghost state can be effectively formalized in Coq, and discuss the challenges we faced in formalizing them.",
      "Affiliations": [
        "MPI-SWS, Germany",
        "Aarhus University, Denmark",
        "Aarhus University, Denmark",
        "MPI-SWS, Germany"
      ],
      "AffiliationsString": "MPI-SWS, Germany, Aarhus University, Denmark",
      "Authors": [
        "ralfjung",
        "robbertkrebbers",
        "larsbirkedal",
        "derekdreyer"
      ],
      "Key": "icfp-2016-papers-higher-order-ghost-state",
      "PersonsString": "Ralf Jung, Robbert Krebbers, Lars Birkedal and Derek Dreyer",
      "Title": "Higher-Order Ghost State",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-higher-order-ghost-state"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-icfp-2016-report-presentation",
      "PersonsString": "",
      "Title": "Program Chair Report (Eijiro Sumii)",
      "Type": "Other",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-icfp-2016-report-presentation"
    },
    {
      "Abstract": "The polyvariance of a static analysis is the degree to which it structurally differentiates approximations of program values. Polyvariant techniques come in a number of different flavors that represent alternative heuristics for managing the trade-off an analysis strikes between precision and complexity. For example, call sensitivity supposes that values will tend to correlate with recent call sites, object sensitivity supposes that values will correlate with the allocation points of related objects, the Cartesian product algorithm supposes correlations between the values of arguments to the same function, and so forth. \nIn this paper, we describe a unified methodology for implementing and understanding polyvariance in a higher-order setting (i.e., for control-flow analyses). We do this by extending the method of abstracting abstract machines (AAM), a systematic approach to producing an abstract interpretation of abstract-machine semantics. AAM eliminates recursion within a language\u2019s semantics by passing around an explicit store, and thus places importance on the strategy an analysis uses for allocating abstract addresses within the abstract heap or store. We build on AAM by showing that the design space of possible abstract allocators exactly and uniquely corresponds to the design space of polyvariant strategies. This allows us to both unify and generalize polyvariance as tunings of a single function. Changes to the behavior of this function easily recapitulate classic styles of analysis and produce novel variations, combinations of techniques, and fundamentally new techniques.",
      "Affiliations": [
        "University of Utah, USA",
        "University of Utah, USA",
        "University of Utah, USA"
      ],
      "AffiliationsString": "University of Utah, USA",
      "Authors": [
        "thomasgilray",
        "michaeldadams",
        "matthewmight"
      ],
      "Key": "icfp-2016-papers-allocation-characterizes-polyvariance",
      "PersonsString": "Thomas Gilray, Michael D. Adams and Matthew Might",
      "Title": "Allocation Characterizes Polyvariance: A Unified Methodology for Polyvariant Control-Flow Analysis",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-allocation-characterizes-polyvariance"
    },
    {
      "Abstract": "Analyzing real-world JavaScript web applications is a challenging task. On top of understanding the semantics of JavaScript, it requires modeling of web documents, platform objects, and interactions between them. Not only the JavaScript language itself but also its usage patterns are extremely dynamic. JavaScript can generate code and run it during evaluation, and most web applications load JavaScript code dynamically. Such dynamic characteristics of JavaScript web applications make pure static analysis approaches inapplicable.\nIn this talk, we present our attempts to analyze JavaScript web applications in the wild mostly statically using various approaches. From pure JavaScript programs to JavaScript web applications using platform-specific libraries and dynamic code loading, we explain technical challenges in analyzing each of them and how we built an open-source analysis framework for JavaScript, SAFE, that addresses the challenges incrementally.\nIn spite of active research accomplishments in analysis of JavaScript web applications, many issues still remain to be resolved such as events, callback functions, and hybrid web applications. We discuss possible future research directions and open challenges.\nSpeaker Bio\nSukyoung Ryu is an associate professor in the School of Computing at Korea Advanced Institute of Science and Technology (KAIST). Her research interests are in programming languages and program analysis. Recently, her group has been focusing on analysis of and bug finding in JavaScript web applications by developing an open-source tool called SAFE, which is being used in both academia and industry. She is a recipient of various awards including the Google Faculty Research Award. She received her Ph.D. in Computer Science from KAIST, worked at Harvard University and Sun Microsystems Laboratories.",
      "Affiliations": ["KAIST"],
      "AffiliationsString": "KAIST",
      "Authors": ["sukyoungryu"],
      "Key": "icfp-2016-keynote-talks-sukyoung-ryu",
      "PersonsString": "Sukyoung Ryu",
      "Title": "Journey to Find Bugs in JavaScript Web Applications in the Wild",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-keynote-talks-sukyoung-ryu"
    },
    {
      "Abstract": "Session types describe structured communication on heterogeneouslytyped channels at a high level.Their tail-recursive structure imposes a protocol that can bedescribed by a regular language.The types of transmitted values are drawn from the underlyingfunctional language, abstracting from thedetails of serializing values of structured data types. \nContext-free session types extend session types by allowing nestedprotocols that are not restricted to tail recursion. Nested protocolscorrespond to deterministic context-free languages. Such protocols areinteresting in their own right, but they are particularly suited todescribe the low-level serialization of tree-structured data in atype-safe way. \nWe establish the metatheory of context-free session types, prove thatthey properly generalize standard (two-party) sessiontypes, and take first steps towards type checking by showingthat type equivalence is decidable.",
      "Affiliations": [
        "University of Freiburg, Germany",
        ""
      ],
      "AffiliationsString": "University of Freiburg, Germany, ",
      "Authors": [
        "peterthiemann",
        "vascothudichumvasconcelos"
      ],
      "Key": "icfp-2016-papers-towards-context-free-session-types",
      "PersonsString": "Peter Thiemann and Vasco Thudichum Vasconcelos",
      "Title": "Context-Free Session Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-towards-context-free-session-types"
    },
    {
      "Abstract": "Static type errors are a common stumbling block for newcomers to typed functional languages. We present a dynamic approach to explaining type errors by generating counterexample witness inputs that illustrate how an ill-typed program goes wrong. First, given an ill-typed function, we symbolically execute the body to synthesize witness values that make the program go wrong. We prove that our procedure synthesizes general witnesses in that if a witness is found, then for all inhabited input types, there exist values that can make the function go wrong. Second, we show how to extend the above procedure to produce a reduction graph that can be used to interactively visualize and debug witness executions. Third, we evaluate the coverage of our approach on two data sets comprising over 4,500 ill-typed student programs. Our technique is able to generate witnesses for 88% of the programs, and our reduction graph yields small counterexamples for 81% of the witnesses. Finally, we evaluate whether our witnesses help students understand and fix type errors, and find that students presented with our witnesses show a greater understanding of type errors than those presented with a standard error message.",
      "Affiliations": [
        "University of California at San Diego, USA",
        "University of California at San Diego, USA",
        "University of Virginia, USA"
      ],
      "AffiliationsString": "University of California at San Diego, USA, University of Virginia, USA",
      "Authors": [
        "ericseidel",
        "ranjitjhala",
        "westleyweimer"
      ],
      "Key": "icfp-2016-papers-dynamic-witnesses-for-static-type-errors",
      "PersonsString": "Eric L. Seidel, Ranjit Jhala and Westley Weimer",
      "Title": "Dynamic Witnesses for Static Type Errors (or, Ill-Typed Programs Usually Go Wrong)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-dynamic-witnesses-for-static-type-errors"
    },
    {
      "Abstract": "",
      "Affiliations": ["Well-Typed LLP"],
      "AffiliationsString": "Well-Typed LLP",
      "Authors": ["andresloh"],
      "Key": "icfp-2016-tutorials-http-cufp-org-2016-t4-andres-loh-generic-programming-html",
      "PersonsString": "Andres Löh",
      "Title": "T4: An Introduction to to Type-Level and Generic Programming in Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-http-cufp-org-2016-t4-andres-loh-generic-programming-html"
    },
    {
      "Abstract": "Galois connections are a foundational tool for structuring abstraction insemantics and their use lies at the heart of the theory of abstractinterpretation. Yet, mechanization of Galois connections remains limited torestricted modes of use, preventing their general application in mechanizedmetatheory and certified programming. \nThis paper presents constructive Galois connections, a variant of Galoisconnections that is effective both on paper and in proof assistants; iscomplete with respect to a large subset of classical Galois connections; andenables more general reasoning principles, including the &quot;calculational&quot; styleadvocated by Cousot. \nTo design constructive Galois connection we identify a restricted mode of useof classical ones which is both general and amenable to mechanization independently-typed functional programming languages. Crucial to our metatheoryis the addition of monadic structure to Galois connections to control a&quot;specification effect&quot;. Effectful calculations may reason classically, whilepure calculations have extractable computational content. Explicitly movingbetween the worlds of specification and implementation is enabled by ourmetatheory. \nTo validate our approach, we provide two case studies in mechanizing existingproofs from the literature: one uses calculational abstract interpretation todesign a static analyzer, the other forms a semantic basis for gradual typing.Both mechanized proofs closely follow their original paper-and-pencilcounterparts, employ reasoning principles not captured by previousmechanization approaches, support the extraction of verified algorithms, andare novel.",
      "Affiliations": [
        "University of Maryland, USA",
        "University of Maryland, USA"
      ],
      "AffiliationsString": "University of Maryland, USA",
      "Authors": [
        "daviddarais",
        "davidvanhorn"
      ],
      "Key": "icfp-2016-papers-constructive-galois-connections-taming-the-galois-connection-framework-for-mechanized-metatheory",
      "PersonsString": "David Darais and David Van Horn",
      "Title": "Constructive Galois Connections: Taming the Galois Connection Framework for Mechanized Metatheory",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-constructive-galois-connections-taming-the-galois-connection-framework-for-mechanized-metatheory"
    },
    {
      "Abstract": "We have developed and mechanically verified a new compiler backend for CakeML. Our new compiler features a sequence of intermediate languages that allows it to incrementally compile away high-level features and enables verification at the right levels of semantic detail. In this way, it resembles mainstream (unverified) compilers for strict functional languages. The compiler supports efficient curried multi-argument functions, configurable data representations, exceptions that unwind the call stack, register allocation, and more. The compiler targets several architectures: x86-64, ARMv6, ARMv8, MIPS-64, and RISC-V. \nIn this paper, we present the overall structure of the compiler, including its 12 intermediate languages, and explain how everything fits together. We focus particularly on the interaction between the verification of the register allocator and the garbage collector, and memory representations. The entire development has been carried out within the HOL4 theorem prover.",
      "Affiliations": [
        "IHPC at A*STAR, Singapore",
        "Chalmers University of Technology, Sweden",
        "Data61 at CSIRO, Australia",
        "University of Cambridge, UK",
        "University of Kent, UK",
        "Data61 at CSIRO, Australia"
      ],
      "AffiliationsString": "IHPC at A*STAR, Singapore, Chalmers University of Technology, Sweden, Data61 at CSIRO, Australia, University of Cambridge, UK, University of Kent, UK",
      "Authors": [
        "yongkiamtan",
        "magnusomyreen",
        "ramanakumar",
        "anthonyfox",
        "scottowens",
        "michaelnorrish"
      ],
      "Key": "icfp-2016-papers-a-new-verified-compiler-backend-for-cakeml",
      "PersonsString": "Yong Kiam Tan, Magnus O. Myreen, Ramana Kumar, Anthony Fox, Scott Owens and Michael Norrish",
      "Title": "A New Verified Compiler Backend for CakeML",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-a-new-verified-compiler-backend-for-cakeml"
    },
    {
      "Abstract": "Dependently typed languages such as Agda, Coq and Idris use a syntactic first-order unification algorithm to check definitions by dependent pattern matching. However, these algorithms don\u2019t adequately consider the types of the terms being unified, leading to various unintended results. As a consequence, they require ad hoc restrictions to preserve soundness, but this makes them very hard to prove correct, modify, or extend. \nThis paper proposes a framework for reasoning formally about unification in a dependently typed setting. In this framework, unification rules compute not just a unifier but also a corresponding correctness proof in the form of an equivalence between two sets of equations. By rephrasing the standard unification rules in a proof-relevant manner, they are guaranteed to preserve soundness of the theory. In addition, it enables us to safely add new rules that can exploit the dependencies between the types of equations. \nUsing our framework, we reimplemented the unification algorithm used by Agda. As a result, we were able to replace previous ad hoc restrictions with formally verified unification rules, fixing a number of bugs in the process. We are convinced this will also enable the addition of new and interesting unification rules in the future, without compromising soundness along the way.",
      "Affiliations": [
        "iMinds, Belgium",
        "iMinds, Belgium",
        "iMinds, Belgium"
      ],
      "AffiliationsString": "iMinds, Belgium",
      "Authors": [
        "jespercockx",
        "dominiquedevriese",
        "frankpiessens"
      ],
      "Key": "icfp-2016-papers-unifiers-as-equivalences-proof-relevant-unification-of-dependently-typed-data",
      "PersonsString": "Jesper Cockx, Dominique Devriese and Frank Piessens",
      "Title": "Unifiers as Equivalences: Proof-Relevant Unification of Dependently Typed Data",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-unifiers-as-equivalences-proof-relevant-unification-of-dependently-typed-data"
    },
    {
      "Abstract": "",
      "Affiliations": ["Active Group GmbH"],
      "AffiliationsString": "Active Group GmbH",
      "Authors": ["michaelsperber"],
      "Key": "icfp-2016-tutorials-t1-teaching-functional-programming",
      "PersonsString": "Michael Sperber",
      "Title": "T1: Teaching Functional Programming",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t1-teaching-functional-programming"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-icfp-2016-report-src-awards-david-van-horn-",
      "PersonsString": "",
      "Title": "SRC Awards (David Van Horn)",
      "Type": "Awards",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-icfp-2016-report-src-awards-david-van-horn-"
    },
    {
      "Abstract": "Lunch",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-catering-lunch",
      "PersonsString": "",
      "Title": "Lunch",
      "Type": "Lunch",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-catering-lunch"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-icfp-2016-report-icfp-program-chair-report-and-contest-presentation",
      "PersonsString": "",
      "Title": "Programming Contest Presentation (Keisuke Nakano)",
      "Type": "Awards",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-icfp-2016-report-icfp-program-chair-report-and-contest-presentation"
    },
    {
      "Abstract": "Increasing availability of multicore systems has led to greater focus on the design and implementation of languages for writing parallel programs. Such languages support various abstractions for parallelism, such as fork-join, async-finish, futures. While they may seem similar, these abstractions lead to different semantics, language design and implementation decisions, and can significantly impact the performance of end-user applications.\nIn this paper, we consider the question of whether it would be possible to unify various paradigms of parallel computing. To this end, we propose a calculus, called dag calculus, that can encode fork-join, async-finish, and futures, and possibly others. We describe dag calculus and its semantics, establish translations from the aforementioned paradigms into dag calculus. These translations establish that dag calculus is sufficiently powerful for encoding programs written in prevailing paradigms of parallelism. We present concurrent algorithms and data structures for realizing dag calculus on multicore hardware and prove that the proposed techniques are consistent with the semantics. Finally, we present an implementation of the calculus and evaluate it empirically by comparing its performance to highly optimized code from prior work. The results show that the calculus is expressive and that it competes well with, and sometimes outperforms, the state of the art.",
      "Affiliations": [
        "Carnegie Mellon University",
        "Inria, France",
        "Inria, France",
        "Inria, France"
      ],
      "AffiliationsString": "Carnegie Mellon University, Inria, France",
      "Authors": [
        "umutacar",
        "arthurchargueraud",
        "mikerainey",
        "filipsieczkowski"
      ],
      "Key": "icfp-2016-papers-dag-calculus-a-calculus-for-parallel-computation",
      "PersonsString": "Umut Acar, Arthur Charguéraud, Mike Rainey and Filip Sieczkowski",
      "Title": "Dag-Calculus: A Calculus for Parallel Computation",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-dag-calculus-a-calculus-for-parallel-computation"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-reception-all-icfp-participants-are-welcome",
      "PersonsString": "",
      "Title": "All ICFP participants are welcome",
      "Type": "Social Event",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-reception-all-icfp-participants-are-welcome"
    },
    {
      "Abstract": "Session types provide static guarantees that concurrent programs respect communication protocols. We give a novel account of recursive session types in the context of GV, a small concurrent extension of the linear λ-calculus. We extend GV with recursive types and catamorphisms, following the initial algebra semantics of recursion, and show that doing so naturally gives rise to recursive session types. We show that this principled approach to recursion resolves long-standing problems in the treatment of duality for recursive session types. \nWe characterize the expressiveness of GV concurrency by giving a CPS translation to (non-concurrent) λ-calculus and proving that reduction in GV is simulated by full reduction in λ-calculus. This shows that GV remains terminating in the presence of positive recursive types, and that such arguments extend to other extensions of GV, such as polymorphism or non-linear types, by appeal to normalization results for sequential λ-calculi. We also show that GV remains deadlock free and deterministic in the presence of recursive types. \nFinally, we extend CP, a session-typed process calculus based on linear logic, with recursive types, and show that doing so preserves the connection between reduction in GV and cut elimination in CP.",
      "Affiliations": [
        "University of Edinburgh, UK",
        "University of Edinburgh, UK"
      ],
      "AffiliationsString": "University of Edinburgh, UK",
      "Authors": [
        "samlindley",
        "jgarrettmorris"
      ],
      "Key": "icfp-2016-papers-talking-bananas-structural-recursion-for-session-types",
      "PersonsString": "Sam Lindley and J. Garrett Morris",
      "Title": "Talking Bananas: Structural Recursion for Session Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-talking-bananas-structural-recursion-for-session-types"
    },
    {
      "Abstract": "An important feature of functional programs is that they are parallel by default. Implementing an efficient parallel functional language, however, is a major challenge, in part because the high rate of allocation and freeing associated with functional programs requires an efficient and scalable memory manager. \nIn this paper, we present a technique for parallel memory management for strict functional languages with nested parallelism. At the highest level of abstraction, the approach consists of a technique to organize memory as a hierarchy of heaps, and an algorithm for performing automatic memory reclamation by taking advantage of a disentanglement property of parallel functional programs. More specifically, the idea is to assign to each parallel task its own heap in memory and organize the heaps in a hierarchy/tree that mirrors the hierarchy of tasks. \nWe present a nested-parallel calculus that specifies hierarchical heaps and prove in this calculus a disentanglement property, which prohibits a task from accessing objects allocated by another task that might execute in parallel. Leveraging the disentanglement property, we present a garbage collection technique that can operate on any subtree in the memory hierarchy concurrently as other tasks (and/or other collections) proceed in parallel. We prove the safety of this collector by formalizing it in the context of our parallel calculus. In addition, we describe how the proposed techniques can be implemented on modern shared-memory machines and present a prototype implementation as an extension to MLton, a high-performance compiler for the Standard ML language. Finally, we evaluate the performance of this implementation on a number of parallel benchmarks.",
      "Affiliations": [
        "Carnegie Mellon University, USA",
        "Carnegie Mellon University, USA",
        "Carnegie Mellon University",
        "Carnegie Mellon University, USA"
      ],
      "AffiliationsString": "Carnegie Mellon University, USA, Carnegie Mellon University",
      "Authors": [
        "ramraghunathan",
        "stefankmuller",
        "umutacar",
        "guyblelloch"
      ],
      "Key": "icfp-2016-papers-hierarchical-memory-management-for-parallel-programs",
      "PersonsString": "Ram Raghunathan, Stefan K. Muller, Umut Acar and Guy Blelloch",
      "Title": "Hierarchical Memory Management for Parallel Programs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-hierarchical-memory-management-for-parallel-programs"
    },
    {
      "Abstract": "",
      "Affiliations": ["University of Cambridge"],
      "AffiliationsString": "University of Cambridge",
      "Authors": ["kcsivaramakrishnan"],
      "Key": "icfp-2016-tutorials-t3-introduction-to-ocaml",
      "PersonsString": "KC Sivaramakrishnan",
      "Title": "T3: Introduction to OCaml",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t3-introduction-to-ocaml"
    },
    {
      "Abstract": "Datalog may be considered either an unusually powerful query language or acarefully limited logic programming language. Datalog is declarative,expressive, and optimizable, and has been applied successfully in a widevariety of problem domains. However, most use-cases require extending Datalogin an application-specific manner. In this paper we define Datafun, ananalogue of Datalog supporting higher-order functional programming. The keyidea is to track monotonicity with types.",
      "Affiliations": [
        "University of Birmingham, UK",
        "University of Birmingham, UK"
      ],
      "AffiliationsString": "University of Birmingham, UK",
      "Authors": [
        "michaelarntzenius",
        "neelakantankrishnaswami"
      ],
      "Key": "icfp-2016-papers-datafun-a-functional-datalog",
      "PersonsString": "Michael Arntzenius and Neelakantan R. Krishnaswami",
      "Title": "Datafun: A Functional Datalog",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-datafun-a-functional-datalog"
    },
    {
      "Abstract": "We show how one can reason about free monads using their universal properties rather than any concrete implementation. We introduce a graphical, two-dimensional calculus tailor-made to accommodate these properties.",
      "Affiliations": [
        "KU Leuven, Belgium",
        "University of Bristol, UK"
      ],
      "AffiliationsString": "KU Leuven, Belgium, University of Bristol, UK",
      "Authors": [
        "maciejpirog",
        "nicolaswu"
      ],
      "Key": "icfp-2016-papers-string-diagrams-for-free-monads-functional-pearl-",
      "PersonsString": "Maciej Piróg and Nicolas Wu",
      "Title": "String Diagrams for Free Monads (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-string-diagrams-for-free-monads-functional-pearl-"
    },
    {
      "Abstract": "",
      "Affiliations": ["UC San Diego"],
      "AffiliationsString": "UC San Diego",
      "Authors": ["nikivazou"],
      "Key": "icfp-2016-tutorials-t6-liquidhaskell-verification-of-haskell-programs-with-smts",
      "PersonsString": "Niki Vazou",
      "Title": "T6: LiquidHaskell: Verification of Haskell Programs with SMTs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t6-liquidhaskell-verification-of-haskell-programs-with-smts"
    },
    {
      "Abstract": "Given an expression that denotes a probability distribution, often we want a corresponding density function, to use in probabilistic inference. Fortunately, the task of finding a density has been automated. It turns out that we can derive a compositional procedure for finding a density, by equational reasoning about integrals, starting with the mathematical specification of what a density is. Moreover, the density found can be run as an estimation algorithm, as well as simplified as an exact formula to improve the estimate.",
      "Affiliations": [
        "Indiana University, USA",
        "Indiana University, USA"
      ],
      "AffiliationsString": "Indiana University, USA",
      "Authors": [
        "wazimmohammedismail",
        "chungchiehshan"
      ],
      "Key": "icfp-2016-papers-deriving-a-probability-density-calculator-functional-pearl-",
      "PersonsString": "Wazim Mohammed Ismail and Chung-chieh Shan",
      "Title": "Deriving a Probability Density Calculator (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-deriving-a-probability-density-calculator-functional-pearl-"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-reception-reception",
      "PersonsString": "",
      "Title": "Reception",
      "Type": "Social Event",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-reception-reception"
    },
    {
      "Abstract": "",
      "Affiliations": [""],
      "AffiliationsString": "",
      "Authors": ["alfonsogarciacaro"],
      "Key": "icfp-2016-tutorials-t5-fable-an-f-to-javascript-compiler",
      "PersonsString": "Alfonso Garcia-Caro",
      "Title": "T5: Fable, an F# to JavaScript compiler",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t5-fable-an-f-to-javascript-compiler"
    },
    {
      "Abstract": "Dunfield showed that a simply typed core calculus with intersectiontypes and a merge operator is able to capture various programminglanguage features. While his calculus is type-safe, it is notcoherent: different derivations for the same expression canelaborate to expressions that evaluate to different values.The lack of coherence is an importantdisadvantage for adoption of his core calculus in implementations ofprogramming languages, as the semantics of the programming languagebecomes implementation-dependent. \nThis paper presents λi: a coherent and type-safe calculus with aform of *intersection types and a merge operator.Coherence is achieved by ensuring that intersection typesare disjoint and programs are sufficientlyannotated to avoid type ambiguity. We propose a definition of disjointness where twotypes A and B are disjoint only if certain set of types are commonsupertypes of A and B. We investigate three different variants of λi, with three variants of disjointness. In the simplestvariant, which does not allow top types, two types are disjoint ifthey do not share any common supertypes at all. The other two variantsintroduce top types and refine the notion of disjointness to allowtwo types to be disjoint when the only the set of common supertypes aretop-like. The difference between the two variants with toptypes is on the definition of top-like types, which has an impact onwhich types are allowed on intersections. We present a type systemthat prevents intersection types that are not disjoint, as well as analgorithmic specifications to determine whether two types are disjointfor all three variants.",
      "Affiliations": [
        "University of Hong Kong, China",
        "University of Hong Kong, China",
        "University of Hong Kong, China"
      ],
      "AffiliationsString": "University of Hong Kong, China",
      "Authors": [
        "brunooliveira",
        "zhiyuanshi",
        "joaoalpuim"
      ],
      "Key": "icfp-2016-papers-disjoint-intersection-types",
      "PersonsString": "Bruno C. d. S. Oliveira, Zhiyuan Shi and João Alpuim",
      "Title": "Disjoint Intersection Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-disjoint-intersection-types"
    },
    {
      "Abstract": "",
      "Affiliations": ["Tsuru Capital"],
      "AffiliationsString": "Tsuru Capital",
      "Authors": ["fumiakikinoshita"],
      "Key": "icfp-2016-tutorials-t8-transforming-data-into-gui-a-new-style-graphical-user-interface-library-for-haskell",
      "PersonsString": "Fumiaki Kinoshita",
      "Title": "T8: Transforming data into GUI: a new style graphical user interface library for Haskell",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t8-transforming-data-into-gui-a-new-style-graphical-user-interface-library-for-haskell"
    },
    {
      "Abstract": "The queueing-glueing algorithm is the nickname we give to an algorithmic patternthat provides amortised linear time solutions to a number of optimal listpartition problems that have a peculiar property: at various moments we know thattwo of three candidate solutions could be optimal. The algorithm works bykeeping a queue of lists, glueing them from one end, while chopping from theother end, hence the name. We give a formal derivation of the algorithm, anddemonstrate it with several non-trivial examples.",
      "Affiliations": [
        "Academia Sinica, Taiwan",
        "National Taiwan University, Taiwan",
        "Dartmouth College, USA"
      ],
      "AffiliationsString": "Academia Sinica, Taiwan, National Taiwan University, Taiwan, Dartmouth College, USA",
      "Authors": [
        "shinchengmu",
        "yuhsichiang",
        "yuhanlyu"
      ],
      "Key": "icfp-2016-papers-queueing-and-glueing-for-optimal-partitioning-functional-pearl-",
      "PersonsString": "Shin-Cheng Mu, Yu-Hsi Chiang and Yu-Han Lyu",
      "Title": "Queueing and Glueing for Optimal Partitioning (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-queueing-and-glueing-for-optimal-partitioning-functional-pearl-"
    },
    {
      "Abstract": "Effects and coeffects are two general, complementary aspects of program behaviour. They roughly correspond to computations which change the execution context (effects) versus computations which make demands on the context (coeffects). Effectful features include partiality, non-determinism, input-output, state, and exceptions. Coeffectful features include resource demands, variable access, notions of linearity, and data input requirements.The effectful or coeffectful behaviour of a program can be captured and described via type-based analyses, with fine grained information provided by monoidal effect annotations and semiring coeffects. Various recent work has proposed models for such typed calculi in terms of graded (strong) monads for effects and graded (monoidal) comonads for coeffects.Effects and coeffects have been studied separately so far, but in practice many computations are both effectful and coeffectful, e.g., possibly throwing exceptions but with resource requirements. To remedy this, we introduce a new general calculus with a combined effect-coeffect system. This can describe both the changes and requirements that a program has on its context, as well as interactions between these effectful and coeffectful features of computation. The effect-coeffect system has a denotational model in terms of effect-graded monads and coeffect-graded comonads where interaction is expressed via the novel concept of graded distributive laws. This graded semantics unifies the syntactic type theory with the denotational model. We show that our calculus can be instantiated to describe in a natural way various different kinds of interaction between a program and its evaluation context.",
      "Affiliations": [
        "SUNY Buffalo, USA",
        "Kyoto University, Japan",
        "University of Cambridge, UK",
        "Inria, France",
        "Tallinn University of Technology, Estonia"
      ],
      "AffiliationsString": "SUNY Buffalo, USA, Kyoto University, Japan, University of Cambridge, UK, Inria, France, Tallinn University of Technology, Estonia",
      "Authors": [
        "marcogaboardi",
        "shinyakatsumata",
        "dominicorchard",
        "flavienbreuvart",
        "tarmouustalu"
      ],
      "Key": "icfp-2016-papers-combining-effects-and-coeffects-via-grading",
      "PersonsString": "Marco Gaboardi, Shin-ya Katsumata, Dominic Orchard, Flavien Breuvart and Tarmo Uustalu",
      "Title": "Combining Effects and Coeffects via Grading",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-combining-effects-and-coeffects-via-grading"
    },
    {
      "Abstract": "Dependent type theories are functional programming languages with types rich enough to do computer-checked mathematics and software verification. Homotopy type theory is a recent area of work that connects dependent type theory to the mathematical disciplines of homotopy theory and higher-dimensional category theory. From a programming point of view, these connections have revealed that all types in dependent type theory support a certain generic program that had not previously been exploited. Specifically, each type can be equipped with computationally relevant witnesses of equality of elements of that type, and all types support a generic program that transports elements along these equalities. One mechanism for equipping types with non-trivial witnesses of equality is Voevodsky\u2019s univalence axiom, which implies that equality of types themselves is witnessed by type isomorphism. Another is higher inductive types, an extended datatype schema that allows identifications between different datatype constructors. While these new mechanisms were originally formulated as axiomatic extensions of type theory, recent work has investigated their computational meaning, leading to the development of new programming languages that better support them. In this talk, I will illustrate what univalence and higher inductive types mean in programming terms. I will also discuss how studying some related semantic settings can reveal additional structure on types; for example, moving from groupoids (categories where all maps are invertible) to general categories yields an account of coercions instead of equalities. Overall, I hope to convey some of the beauty and richness of these connections between disciplines, which we are just beginning to understand.\nSpeaker Bio\nDan Licata is an assistant professor of computer science at Wesleyan University. He received his PhD from Carnegie Mellon University in 2011, and was a postdoc at the Institute for Advanced Study in 2012-2013. His PhD thesis, on programming domain-specific specification logics in type theory, won the 2012 FoLLI E.W. Beth Dissertation Award. Two of his current projects investigate extensions and applications of homotopy type theory, and cost analysis of functional programs. He designed and regularly teaches an introductory functional programming course that integrates parallel thinking throughout the semester.",
      "Affiliations": ["Wesleyan University"],
      "AffiliationsString": "Wesleyan University",
      "Authors": ["danlicata"],
      "Key": "icfp-2016-keynote-talks-dan-licata",
      "PersonsString": "Dan Licata",
      "Title": "A Functional Programmer's Guide to Homotopy Type Theory",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-keynote-talks-dan-licata"
    },
    {
      "Abstract": "Many programming languages and proof assistants are defined by elaboration from a high-level language with a great deal of implicit information to a highly explicit core language. In many advanced languages, these elaboration facilities contain powerful tools for program construction, but these tools are rarely designed to be repurposed by users. We describe elaborator reflection, a paradigm for metaprogramming in which the elaboration machinery is made directly available to metaprograms, as well as a concrete realization of elaborator reflection in Idris, a functional language with full dependent types. We demonstrate the applicability of Idris's reflected elaboration framework to a number of realistic problems, we discuss the motivation for the specific features of its design, and we explore the broader meaning of elaborator reflection as it can relate to other languages.",
      "Affiliations": [
        "Indiana University, USA",
        "University of St. Andrews, UK"
      ],
      "AffiliationsString": "Indiana University, USA, University of St. Andrews, UK",
      "Authors": [
        "davidchristiansen",
        "edwinbrady"
      ],
      "Key": "icfp-2016-papers-elaborator-reflection-extending-idris-in-idris",
      "PersonsString": "David Christiansen and Edwin Brady",
      "Title": "Elaborator Reflection: Extending Idris in Idris",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-elaborator-reflection-extending-idris-in-idris"
    },
    {
      "Abstract": "We consider the problem of how to compactly encode simply-typed λ-terms into bit strings. The work has been motivated byKobayashi et al.'s recent work on higher-order data compression, where data are encoded as functional programs (or, λ-terms) that generate them. To exploit its good compression power,the compression scheme has to come with a method for compactly encodingthe λ-terms into bit strings. To this end, we propose two type-based bit-encoding schemes; the first one encodes a λ-term into a sequence of symbols by using type information, and then applies arithmetic coding to convert the sequence to a bit string. The second one is more sophisticated; we prepare a context-free grammar (CFG) that describes only well-typed terms, and then use a variation of arithmetic coding specialized for the CFG.We have implemented both schemes and confirmed that they oftenoutput more compact codes than previous bit encoding schemes for λ-terms.",
      "Affiliations": [
        "University of Tokyo, Japan",
        "University of Tokyo, Japan",
        "Tohoku University, Japan",
        "Tohoku University, Japan"
      ],
      "AffiliationsString": "University of Tokyo, Japan, Tohoku University, Japan",
      "Authors": [
        "kotarotakeda",
        "naokikobayashi",
        "kazuyayaguchi",
        "ayumishinohara"
      ],
      "Key": "icfp-2016-papers-compact-bit-encoding-schemes-for-simply-typed-lambda-terms",
      "PersonsString": "Kotaro Takeda, Naoki Kobayashi, Kazuya Yaguchi and Ayumi Shinohara",
      "Title": "Compact Bit Encoding Schemes for Simply-Typed Lambda-Terms",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-compact-bit-encoding-schemes-for-simply-typed-lambda-terms"
    },
    {
      "Abstract": "We propose an automated method for disproving fair termination of higher-order functional programs, which is complementary to Murase et al.'s recent method for proving fair termination. A program is said to be fair terminating if it has no infinite execution trace that satisfies a given fairness constraint. Fair termination is an important property because program verification problems for arbitrary ω-regular temporal properties can be transformed to those of fair termination. Our method reduces the problem of disproving fair termination to higher-order model checking by using predicate abstraction and CEGAR. Given a program, we convert it to an abstract program that generates an approximation of the (possibly infinite) execution traces of the original program, so that the original program has a fair infinite execution trace if the tree generated by the abstract program satisfies a certain property. The method is a non-trivial extension of Kuwahara et al.'s method for disproving plain termination.",
      "Affiliations": [
        "University of Tokyo, Japan",
        "University of Tokyo, Japan",
        "University of Tokyo, Japan",
        "University of Tokyo, Japan"
      ],
      "AffiliationsString": "University of Tokyo, Japan",
      "Authors": [
        "keiichiwatanabe",
        "ryosukesato",
        "takeshitsukada",
        "naokikobayashi"
      ],
      "Key": "icfp-2016-papers-automatically-disproving-fair-termination-of-higher-order-functional-programs",
      "PersonsString": "Keiichi Watanabe, Ryosuke Sato, Takeshi Tsukada and Naoki Kobayashi",
      "Title": "Automatically Disproving Fair Termination of Higher-Order Functional Programs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-automatically-disproving-fair-termination-of-higher-order-functional-programs"
    },
    {
      "Abstract": "Hop.js is a multitier programming environment for JavaScript. Itallows a single JavaScript program to describe the client-side and theserver-side components of a web application. Its runtime environmentensures consistent executions of the application on the server and onthe client. \nThis paper overviews the Hop.js design. It shows the JavaScriptextensions that makes it possible to conceive web applicationsglobally. It presents how Hop.js interacts with the outside world. Italso briefly presents the Hop.js implementation. It presents theHop.js web server implementation, the handling of server-sideparallelism, and the JavaScript and HTML compilers.",
      "Affiliations": [
        "Inria, France",
        "Inria, France"
      ],
      "AffiliationsString": "Inria, France",
      "Authors": [
        "manuelserrano",
        "vincentprunet"
      ],
      "Key": "icfp-2016-papers-a-glimpse-of-hopjs",
      "PersonsString": "Manuel Serrano and Vincent Prunet",
      "Title": "A Glimpse of Hopjs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-a-glimpse-of-hopjs"
    },
    {
      "Abstract": "",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-icfp-2016-report-icfp-2017-closing-icfp-2017-presentation",
      "PersonsString": "",
      "Title": "ICFP 2016 Closing / ICFP 2017 Presentation",
      "Type": "Day closing",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-icfp-2016-report-icfp-2017-closing-icfp-2017-presentation"
    },
    {
      "Abstract": "Polymorphic variants are a useful feature of the OCaml language whosecurrent definition and implementation rely on kinding constraints tosimulate a subtyping relation via unification. This yields an awkwardformalization and results in a type system whose behaviour is in somecases unintuitive and/or unduly restrictive. \nIn this work, we present an alternative formalization of polymorphicvariants, based on set-theoretic types and subtyping, that yieldsa cleaner and more streamlined system. Our formalization is moreexpressive than the current one (it types more programs while preservingtype safety), it can internalize some meta-theoretic properties, and itremoves some pathological cases of the current implementation resultingin a more intuitive and, thus, predictable type system.More generally, this work shows how to add full-fledged union types tofunctional languages of the ML family that usually rely on theHindley-Milner type system. As an aside, our system also improvesthe theory of semantic subtyping, notably by proving completeness forthe type reconstruction algorithm.",
      "Affiliations": [
        "University of Paris Diderot, France",
        "University of Genoa, France",
        "University of Paris-Sud, France"
      ],
      "AffiliationsString": "University of Paris Diderot, France, University of Genoa, France, University of Paris-Sud, France",
      "Authors": [
        "giuseppecastagna",
        "tommasopetrucciani",
        "kimnguyen"
      ],
      "Key": "icfp-2016-papers-set-theoretic-types-for-polymorphic-variants",
      "PersonsString": "Giuseppe Castagna, Tommaso Petrucciani and Kim Nguyễn",
      "Title": "Set-Theoretic Types for Polymorphic Variants",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-set-theoretic-types-for-polymorphic-variants"
    },
    {
      "Abstract": "Full-spectrum dependent types promise to enable the development of correct-by-construction software. However, even certified software needs to interact with simply-typed or untyped programs, be it to perform system calls, or to use legacy libraries. Trading static guarantees for runtime checks, the dependent interoperability framework providesa mechanism by which simply-typed values can safely be coerced to dependent types and, conversely, dependently-typed programs can defensively be exported to a simply-typed application. In this paper, we give a semantic account of dependent interoperability. Our presentation relies on and is guided by a pervading notion of type equivalence, whose importance has been emphasized in recent work on homotopy type theory. Specifically, we develop the notion of partial type equivalences as a key foundation for dependent interoperability. Our framework is developed in Coq; it is thus constructive and verified in the strictest sense of the terms. Using our library, users can specify domain-specific partial equivalences between data structures. Our library then takes care of the (sometimes, heavy) lifting that leads to interoperable programs. It thus becomes possible, as we shall illustrate, to internalize and hand-tune the extraction of dependently-typed programs to interoperable OCaml programs within Coq itself.",
      "Affiliations": [
        "UPMC, France",
        "Inria, France",
        "University of Chile, Chile"
      ],
      "AffiliationsString": "UPMC, France, Inria, France, University of Chile, Chile",
      "Authors": [
        "pierreevaristedagand",
        "nicolastabareau",
        "etanter"
      ],
      "Key": "icfp-2016-papers-partial-type-equivalences-for-verified-dependent-interoperability",
      "PersonsString": "Pierre-Evariste Dagand, Nicolas Tabareau and Éric Tanter",
      "Title": "Partial Type Equivalences for Verified Dependent Interoperability",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-partial-type-equivalences-for-verified-dependent-interoperability"
    },
    {
      "Abstract": "Break",
      "Affiliations": [],
      "AffiliationsString": "",
      "Authors": [],
      "Key": "icfp-2016-catering-break",
      "PersonsString": "",
      "Title": "Break",
      "Type": "Coffee break",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-catering-break"
    },
    {
      "Abstract": "We present a framework aimed at significantly reducing the cost of verifying certain classes of systems software, such as file systems. Our framework allows for equational reasoning about systems code written in our new language, Cogent. Cogent is a restricted, polymorphic, higher-order, and purely functional language with linear types and without the need for a trusted runtime or garbage collector. Linear types allow us to assign two semantics to the language: one imperative, suitable for efficient C code generation; and one functional, suitable for equational reasoning and verification. As Cogent is a restricted language, it is designed to easily interoperate with existing C functions and to connect to existing C verification frameworks. Our framework is based on certifying compilation: For a well-typed Cogent program, our compiler produces C code, a high-level shallow embedding of its semantics in Isabelle/HOL, and a proof that the C code correctly refines this embedding. Thus one can reason about the full semantics of real-world systems code productively and equationally, while retaining the interoperability and leanness of C. The compiler certificate is a series of language-level proofs and per-program translation validation phases, combined into one coherent top-level theorem in Isabelle/HOL.",
      "Affiliations": [
        "UNSW, Australia",
        "UNSW, Australia",
        "University of Pennsylvania, USA",
        "UNSW, Australia",
        "Data61, Australia",
        "University of Melbourne, Australia",
        "Data61, Australia",
        "UNSW, Australia",
        "UNSW, Australia"
      ],
      "AffiliationsString": "UNSW, Australia, University of Pennsylvania, USA, Data61, Australia, University of Melbourne, Australia",
      "Authors": [
        "liamoconnor",
        "zilinchen",
        "christinerizkallah",
        "sidneyamani",
        "japhethlim",
        "tobymurray",
        "yutakanagashima",
        "thomassewell",
        "gerwinklein"
      ],
      "Key": "icfp-2016-papers-refinement-through-restraint-bringing-down-the-cost-of-verification",
      "PersonsString": "Liam O'Connor, Zilin Chen, Christine Rizkallah, Sidney Amani, Japheth Lim, Toby Murray, Yutaka Nagashima, Thomas Sewell and Gerwin Klein",
      "Title": "Refinement through Restraint: Bringing Down the Cost of Verification",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-refinement-through-restraint-bringing-down-the-cost-of-verification"
    },
    {
      "Abstract": "",
      "Affiliations": ["Atlassian"],
      "AffiliationsString": "Atlassian",
      "Authors": ["brianmckenna"],
      "Key": "icfp-2016-tutorials-t7-purescript-front-end-developement",
      "PersonsString": "Brian McKenna",
      "Title": "T7: PureScript Front-end Developement",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t7-purescript-front-end-developement"
    },
    {
      "Abstract": "This paper documents our experience of adapting and using the QuickCheck-style approach for extensive randomised property-based testing of computational geometry algorithms. \nThe need in rigorous evaluation of computational geometry procedures has naturally arisen in our quest of organising a medium-size programming contest for second year university students\u2014an experiment we conducted as an attempt to introduce them to computational geometry. The main effort in organising the event was implementation of a solid infrastructure for testing and ranking solutions. For this, we employed functional programming techniques. The choice of the language and the paradigm made it possible for us to engineer, from scratch and in a very short period of time, a series of robust geometric primitives and algorithms, as well as implement a scalable framework for their randomised testing. \nWe describe the main insights, enabling efficient random testing of geometric procedures, and report on our experience of using the testing framework, which helped us to detect and fix a number of issues not just in our programming artefacts, but also in the published algorithms we had implemented.",
      "Affiliations": ["University College London, UK"],
      "AffiliationsString": "University College London, UK",
      "Authors": ["ilyasergey"],
      "Key": "icfp-2016-papers-experience-report-growing-and-shrinking-polygons-for-random-testing-of-computational-geometry-algorithms",
      "PersonsString": "Ilya Sergey",
      "Title": "Experience Report: Growing and Shrinking Polygons for Random Testing of Computational Geometry Algorithms",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-experience-report-growing-and-shrinking-polygons-for-random-testing-of-computational-geometry-algorithms"
    },
    {
      "Abstract": "Contracts feel misunderstood, especially those with a higher-order soul. While software engineers appreciate contracts as tools for articulating the interface between components, functional programmers desperately search for their types and meaning, completely forgetting about their pragmatics. \nThis gem presents a novel analysis of contract systems. Applied to the higher-order kind, this analysis reveals their large and clearly unappreciated software engineering potential. Three sample applications illustrate where this kind of exploration may lead.",
      "Affiliations": [
        "Harvard University",
        "Northeastern University",
        "Northwestern University",
        "Northeastern University"
      ],
      "AffiliationsString": "Harvard University, Northeastern University, Northwestern University",
      "Authors": [
        "christosdimoulas",
        "maxnew",
        "robbyfindler",
        "matthiasfelleisen"
      ],
      "Key": "icfp-2016-papers-oh-lord-please-don-t-let-contracts-be-misunderstood-a-variation-on-old-gems-functional-pearl-",
      "PersonsString": "Christos Dimoulas, Max New, Robby Findler and Matthias Felleisen",
      "Title": "Oh Lord, Please Don't Let Contracts Be Misunderstood (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-oh-lord-please-don-t-let-contracts-be-misunderstood-a-variation-on-old-gems-functional-pearl-"
    },
    {
      "Abstract": "The increasing importance of parallelism has motivated the creation of better abstractions for writing parallel software, including structured parallelism using nested algorithmic skeletons. Such approaches provide high-level abstractions that avoid common problems, such as race conditions, and often allow strong cost models to be defined. However, choosing a combination of algorithmic skeletons that yields good parallel speedups for a program on some specific parallel architecture remains a difficult task. In order to achieve this, it is necessary to simultaneously reason both about the costs of different parallel structures and about the semantic equivalences between them. This paper presents a new type-based mechanism that enables strong static reasoning about these properties. We exploit well-known properties of a very general recursion pattern, hylomorphisms, and give a denotational semantics for structured parallel processes in terms of these hylomorphisms. Using our approach, it is possible to determine formally whether it is possible to introduce a desired parallel structure into a program without altering its functional behaviour, and also to choose a version of that parallel structure that minimises some given cost model.",
      "Affiliations": [
        "University of St. Andrews, UK",
        "University of St. Andrews, UK",
        "University of St. Andrews, UK"
      ],
      "AffiliationsString": "University of St. Andrews, UK",
      "Authors": [
        "davidcastro",
        "kevinhammond",
        "susmitsarkar"
      ],
      "Key": "icfp-2016-papers-farms-pipes-streams-and-reforestation-reasoning-about-structured-parallel-processes-using-types-and-hylomorphisms",
      "PersonsString": "David Castro, Kevin Hammond and Susmit Sarkar",
      "Title": "Farms, Pipes, Streams and Reforestation: Reasoning about Structured Parallel Processes using Types and Hylomorphisms",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-farms-pipes-streams-and-reforestation-reasoning-about-structured-parallel-processes-using-types-and-hylomorphisms"
    },
    {
      "Abstract": "The λ-calculus is popular as an intermediate language for practical compilers. But in the world of logic it has a lesser-known twin, born at the same time, called the sequent calculus. Perhaps that would make for a good intermediate language, too? To explore this question we designed Sequent Core, a practically-oriented core calculus based on the sequent calculus, and used it to re-implement a substantial chunk of the Glasgow Haskell Compiler.",
      "Affiliations": [
        "University of Oregon, USA",
        "University of Oregon, USA",
        "University of Oregon, USA",
        "Microsoft Research, UK"
      ],
      "AffiliationsString": "University of Oregon, USA, Microsoft Research, UK",
      "Authors": [
        "pauldownen",
        "lukemaurer",
        "zenaariola",
        "simonpaytonjones"
      ],
      "Key": "icfp-2016-papers-sequent-calculus-as-a-compiler-intermediate-language",
      "PersonsString": "Paul Downen, Luke Maurer, Zena M. Ariola and Simon Peyton Jones",
      "Title": "Sequent Calculus as a Compiler Intermediate Language",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-sequent-calculus-as-a-compiler-intermediate-language"
    },
    {
      "Abstract": "A fully abstract compiler guarantees that two source components are observationally equivalent in the source language if and only if their translations are observationally equivalent in the target. Full abstraction implies the translation is secure: target-language attackers can make no more observations of a compiled component than a source-language attacker interacting with the original source component. Proving full abstraction for realistic compilers is challenging because realistic target languages contain features (such as control effects) unavailable in the source, while proofs of full abstraction require showing that every target context to which a compiled component may be linked can be back-translated to a behaviorally equivalent source context.\nWe prove the first full abstraction result for a translation whose target language contains exceptions, but the source does not. Our translation\u2014specifically, closure conversion of simply typed λ-calculus with recursive types\u2014uses types at the target level to ensure that a compiled component is never linked with attackers that have more distinguishing power than source-level attackers. We present a new back-translation technique based on a shallow embedding of the target language into the source language at a dynamic type. Then boundaries are inserted that mediate terms between the untyped embedding and the strongly-typed source. This technique allows back-translating non-terminating programs, target features that are untypeable in the source, and well-bracketed effects.",
      "Affiliations": [
        "Northeastern University",
        "Northeastern University",
        "Northeastern University"
      ],
      "AffiliationsString": "Northeastern University",
      "Authors": [
        "maxnew",
        "williamjbowman",
        "amalahmed"
      ],
      "Key": "icfp-2016-papers-fully-abstract-compilation-via-universal-embedding",
      "PersonsString": "Max New, William J. Bowman and Amal Ahmed",
      "Title": "Fully Abstract Compilation via Universal Embedding",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-fully-abstract-compilation-via-universal-embedding"
    },
    {
      "Abstract": "This paper presents a concurrent garbage collection methodfor functional programs running on a multicore processor.It is a concurrent extension of our bitmap-marking non-movingcollector with Yuasa's snapshot-at-the-beginning strategy.Our collector is unobtrusive in the sense ofthe Doligez-Leroy-Gonthier collector;the collector does not stop any mutator thread nor does itforce them to synchronize globally.The only critical sections between a mutator and the collector arethe code to enqueue/dequeue a 32 kB allocation segment to/from a globalsegment list and the write barrier code to push an object pointer ontothe collector's stack.Most of these data structures can be implemented in standardlock-free data structures.This achieves both efficient allocation and unobtrusive collectionin a multicore system.The proposed method has been implemented in SML#, afull-scale Standard ML compiler supporting multiple native threads onmulticore CPUs.Our benchmark tests show a drastically short pause timewith reasonably low overhead compared to the sequential bitmap-markingcollector.",
      "Affiliations": [
        "Tohoku University, Japan",
        "Tohoku University, Japan"
      ],
      "AffiliationsString": "Tohoku University, Japan",
      "Authors": [
        "katsuhiroueno",
        "atsushiohori"
      ],
      "Key": "icfp-2016-papers-a-fully-concurrent-garbage-collector-for-functional-programs-on-multicore-processors",
      "PersonsString": "Katsuhiro Ueno and Atsushi Ohori",
      "Title": "A Fully Concurrent Garbage Collector for Functional Programs on Multicore Processors",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-a-fully-concurrent-garbage-collector-for-functional-programs-on-multicore-processors"
    },
    {
      "Abstract": "The combination of non-determinism and sorting is mostly associated with permutation sort, a sorting algorithm that is not very useful for sorting and has an awful running time.In this paper we look at the combination of non-determinism and sorting in a different light: given a sorting function, we apply it to a non-deterministic predicate to gain a function that enumerates permutations of the input list. We get to the bottom of necessary properties of the sorting algorithms and predicates in play as well as discuss variations of the modelled non-determinism.On top of that, we formulate and prove a theorem stating that no matter which sorting function we use, the corresponding permutationfunction enumerates all permutations of the input list. We use free theorems, which are derived from the type of a functionalone, to prove the statement.",
      "Affiliations": [
        "Flensburg University of Applied Sciences, Germany",
        "University of Kiel, Germany",
        "University of Kiel, Germany"
      ],
      "AffiliationsString": "Flensburg University of Applied Sciences, Germany, University of Kiel, Germany",
      "Authors": [
        "janchristiansen",
        "nikitadanilenko",
        "sandradylus"
      ],
      "Key": "icfp-2016-papers-all-sorts-of-permutations-functional-pearl-",
      "PersonsString": "Jan Christiansen, Nikita Danilenko and Sandra Dylus",
      "Title": "All Sorts of Permutations (Functional Pearl)",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-all-sorts-of-permutations-functional-pearl-"
    },
    {
      "Abstract": "Incremental computation aims to speed up re-runs of a program afterits inputs have been modified slightly. It works by recording a traceof the program's first run and propagating changes through the tracein incremental runs, trying to re-use as much of the original trace aspossible. The recent work CostIt is a type and effect system toestablish the time complexity of incremental runs of a program, as afunction of input changes. However, CostIt is limited in twoways. First, it prohibits input changes that influence controlflow. This makes it impossible to type programs that, for instance,branch on inputs that may change. Second, the soundness of CostItis proved relative to an abstract cost semantics, but it is unclearhow the semantics can be realized. \nIn this paper, we address both these limitations. We present DuCostIt,a re-design of CostIt, that combines reasoning about costs ofchange propagation and costs of from-scratch evaluation. The latterlifts the restriction on control flow changes. To obtain the typesystem, we refine Flow Caml, a type system for information flowanalysis, with cost effects. Additionally, we inherit from CostItindex refinements to track data structure sizes and a co-monadictype. Using a combination of binary and unary step-indexed logicalrelations, we prove DuCostIt's cost analysis sound relative to notonly an abstract cost semantics, but also a concrete semantics, whichis obtained by translation to an ML-like language.",
      "Affiliations": [
        "MPI-SWS, Germany",
        "Princeton University, USA",
        "MPI-SWS, Germany"
      ],
      "AffiliationsString": "MPI-SWS, Germany, Princeton University, USA",
      "Authors": [
        "ezgicicek",
        "zoeparaskevopoulou",
        "deepakgarg"
      ],
      "Key": "icfp-2016-papers-a-type-theory-for-incremental-computational-complexity-with-control-flow-changes",
      "PersonsString": "Ezgi Çiçek, Zoe Paraskevopoulou and Deepak Garg",
      "Title": "A Type Theory for Incremental Computational Complexity with Control Flow Changes",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-a-type-theory-for-incremental-computational-complexity-with-control-flow-changes"
    },
    {
      "Abstract": "TensorFlow is a machine learning system that operates at large scale and in heterogeneous environments. Its computational model is based on dataflow graphs with mutable state. Graph nodes may be mapped to different machines in a cluster, and within each machine to CPUs, GPUs, and other devices. TensorFlow supports a variety of applications, but it particularly targets training and inference with deep neural networks. It serves as a platform for research and for deploying machine learning systems across many areas, such as speech recognition, computer vision, robotics, information retrieval, and natural language processing.\nIn this talk, we describe TensorFlow and outline some of its applications. We also discuss the question of what TensorFlow and deep learning may have to do with functional programming. Although TensorFlow is not purely functional, many of its uses are concerned with optimizing functions (during training), then with applying those functions (during inference). These functions are defined as compositions of simple primitives (as is common in functional programming), with internal data representations that are learned rather than manually designed.\nTensorFlow is joint work with many other people in the Google Brain team and elsewhere. More information is available at tensorflow.org.\nSpeaker Bio\nMart&iacute;n Abadi is a Principal Scientist at Google. He is also a Professor Emeritus at the University of California at Santa Cruz, where was a Professor in the Computer Science Department till 2013. He has held an annual Chair at the Coll&egrave;ge de France, has taught at Stanford University and the University of California at Berkeley, and has worked at Digital\u2019s System Research Center, Microsoft Research Silicon Valley, and other industrial research labs. He received his Ph.D. at Stanford University in 1987. His research is mainly on computer and network security, programming languages, and specification and verification methods. It has been recognized with the Outstanding Innovation Award of the ACM Special Interest Group on Security, Audit and Control and with the Hall of Fame Award of the ACM Special Interest Group on Operating Systems, among other awards. He is a Fellow of the Association for Computing Machinery and of the American Association for the Advancement of Science (AAAS). He holds a doctorate honoris causa from &Eacute;cole normale sup&eacute;rieure de Cachan.",
      "Affiliations": ["Google"],
      "AffiliationsString": "Google",
      "Authors": ["martinabadi"],
      "Key": "icfp-2016-keynote-talks-martin-abadi",
      "PersonsString": "Martin Abadi",
      "Title": "TensorFlow: Learning Functions at Scale",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-keynote-talks-martin-abadi"
    },
    {
      "Abstract": "",
      "Affiliations": ["Tohoku University"],
      "AffiliationsString": "Tohoku University",
      "Authors": ["olegkiselyov"],
      "Key": "icfp-2016-tutorials-t2-extensible-effects-understanding-them-implementing-them-using-them",
      "PersonsString": "Oleg Kiselyov",
      "Title": "T2: Extensible Effects: understanding them, implementing them, using them",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-tutorials-t2-extensible-effects-understanding-them-implementing-them-using-them"
    },
    {
      "Abstract": "We develop the operational semantics of an untyped probabilistic $\\lambda$-calculus with continuous distributions, and both hard and soft constraints,as a foundation for universal probabilistic programming languages such as Church, Anglican, and Venture. Our first contribution is to adapt the classic operational semantics oλ-calculus to a continuous setting via creating a measure space on terms and defining step-indexed approximations. We prove equivalence of big-step and small-step formulations of this distribution-based semantics. To move closer to inference techniques, we also define the sampling-based semantics of a term as a function from a trace of random samples to a value. We show that the distribution induced by integration over the space of traces equals the distribution-based semantics. Our second contribution is to formalize the implementation technique of trace Markov chain Monte Carlo (MCMC) for our calculus and to show its correctness. A key step is defining sufficient conditions for the distribution induced by trace MCMC to converge to the distribution-based semantics. To the best of our knowledge, this is the first rigorous correctness proof for trace MCMC for a higher-order functional language, or for a language with soft constraints.",
      "Affiliations": [
        "Uppsala University, Sweden",
        "University of Bologna, France",
        "Microsoft Research, UK",
        "University of Edinburgh, UK"
      ],
      "AffiliationsString": "Uppsala University, Sweden, University of Bologna, France, Microsoft Research, UK, University of Edinburgh, UK",
      "Authors": [
        "johannesborgstrom",
        "ugodallago",
        "andrewdgordon",
        "marcinszymczak"
      ],
      "Key": "icfp-2016-papers-a-lambda-calculus-foundation-for-universal-probabilistic-programming",
      "PersonsString": "Johannes Borgström, Ugo Dal Lago, Andrew D. Gordon and Marcin Szymczak",
      "Title": "A Lambda-Calculus Foundation for Universal Probabilistic Programming",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-a-lambda-calculus-foundation-for-universal-probabilistic-programming"
    },
    {
      "Abstract": "Indexed data types allow us to specify and verify many interesting invariants about finite data in a general purpose programming language. In this paper we investigate the dual idea: indexed codata types, which allow us to describe data-dependencies about infinite data structures. Unlike finite data which is defined by constructors, we define infinite data by observations. Dual to pattern matching on indexed data which may refine the type indices, we define copattern matching on indexed codata where type indices guard observations we can make. \nOur key technical contributions are three-fold: first, we extend Levy's call-by-push value language with support for indexed (co)data and deep (co)pattern matching; second, we provide a clean foundation for dependent (co)pattern matching using equality constraints; third, we describe a small-step semantics using a continuation-based abstract machine, define coverage for indexed (co)patterns, and prove type safety. This is an important step towards building a foundation where (co)data type definitions and dependent types can coexist.",
      "Affiliations": [
        "McGill University, Canada",
        "McGill University, Canada",
        "McGill University, Canada"
      ],
      "AffiliationsString": "McGill University, Canada",
      "Authors": [
        "davidthibodeau",
        "andrewcave",
        "brigittepientka"
      ],
      "Key": "icfp-2016-papers-indexed-codata-types",
      "PersonsString": "David Thibodeau, Andrew Cave and Brigitte Pientka",
      "Title": "Indexed Codata Types",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-indexed-codata-types"
    },
    {
      "Abstract": "Generalized Algebraic Dataypes, or simply GADTs, can encode non-trivial properties in the types of the constructors. Once such properties are encoded in a datatype, however, all code manipulating that datatype must provide proof that it maintains these properties in order to typecheck. In this paper, we take a step towards gradualizing these obligations. We introduce a tool, Ghostbuster, that produces simplified versions of GADTs which elide selected type parameters, thereby weakening the guarantees of the simplified datatype in exchange for reducing the obligations necessary to manipulate it. Like ornaments, these simplified datatypes preserve the recursive structure of the original, but unlike ornaments we focus on information-preserving bidirectional transformations. Ghostbuster generates type-safe conversion functions between the original and simplified datatypes, which we prove are the identity function when composed. We evaluate a prototype tool for Haskell against thousands of GADTs found on the Hackage package database, generating simpler Haskell'98 datatypes and round-trip conversion functions between the two.",
      "Affiliations": [
        "Indiana University, USA",
        "Oxford University, UK",
        "Indiana University, USA",
        "Indiana University, USA"
      ],
      "AffiliationsString": "Indiana University, USA, Oxford University, UK",
      "Authors": [
        "trevormcdonell",
        "timothyzakian",
        "matteocimini",
        "ryanrnewton"
      ],
      "Key": "icfp-2016-papers-ghostbuster-a-tool-for-simplifying-and-converting-gadts",
      "PersonsString": "Trevor L. McDonell, Timothy A. K. Zakian, Matteo Cimini and Ryan R. Newton",
      "Title": "Ghostbuster: A Tool for Simplifying and Converting GADTs",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-ghostbuster-a-tool-for-simplifying-and-converting-gadts"
    },
    {
      "Abstract": "The vertex-centric programming model, known as \u201cthink like avertex\u201d, is being used more and more to support various big graphprocessing methods through iterative supersteps that execute inparallel a user-defined vertex program over each vertex of a graph.However, the imperative and message-passing style of existing systemsmakes defining a vertex program unintuitive. In this paper, we showthat one can benefit more from \u201cThinking like a vertex\u201d by\u201cBehaving like a function\u201d rather than \u201cActing like a procedure\u201dwith full use of side effects and explicit control of message passing,state, and termination. We propose a functional approach tovertex-centric graph processing in which the computation at everyvertex is abstracted as a higher-order function and present Fregel, anew domain-specific language. Fregel has clear functional semantics,supports declarative description of vertex computation, and can beautomatically translated into Pregel, an emerging imperative-styledistributed graph processing framework, and thereby achieve promisingperformance. Experimental results for several typical examples showthe promise of this functional approach.",
      "Affiliations": [
        "Kyushu Institute of Technology, Japan",
        "Kochi University of Technology, Japan",
        "National Institute of Informatics, Japan",
        "University of Tokyo, Japan",
        "University of Electro-Communications, Japan"
      ],
      "AffiliationsString": "Kyushu Institute of Technology, Japan, Kochi University of Technology, Japan, National Institute of Informatics, Japan, University of Tokyo, Japan, University of Electro-Communications, Japan",
      "Authors": [
        "kentoemoto",
        "kiminorimatsuzaki",
        "zhenjianghu",
        "akimasamorihata",
        "hideyaiwasaki"
      ],
      "Key": "icfp-2016-papers-think-like-a-vertex-behave-like-a-function-a-functional-dsl-for-vertex-centric-big-graph-processing",
      "PersonsString": "Kento Emoto, Kiminori Matsuzaki, Zhenjiang Hu, Akimasa Morihata and Hideya Iwasaki",
      "Title": "Think Like a Vertex, Behave Like a Function! A Functional DSL for Vertex-Centric Big Graph Processing",
      "Type": "Talk",
      "URL": "http://conf.researchr.org/event/icfp-2016/icfp-2016-papers-think-like-a-vertex-behave-like-a-function-a-functional-dsl-for-vertex-centric-big-graph-processing"
    }
  ],
  "Name": "ICFP 2016",
  "People": [
    {
      "Affiliation": "National Institute of Advanced Industrial Science and Technology, Japan",
      "Key": "juninoue",
      "Name": "Jun Inoue"
    },
    {
      "Affiliation": "",
      "Key": "gregoirehenry",
      "Name": "Grégoire Henry"
    },
    {
      "Affiliation": "",
      "Key": "spiridoneliopoulos",
      "Name": "Spiridon Eliopoulos"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "frederikmmadsen",
      "Name": "Frederik M. Madsen"
    },
    {
      "Affiliation": "University of Cambridge",
      "Bio": "Anil Madhavapeddy is a University Lecturer at the University of Cambridge, based in the Systems Research Group. He was on the original team that developed the Xen hypervisor, and helped develop an industry-leading cloud management toolstack written entirely in OCaml. Prior to obtaining his PhD, Anil had a diverse background in industry at Network Appliance, NASA and Internet Vision. He founded and directs the OCaml Labs group (ocaml.io) at Cambridge, and leads the MirageOS unikernel Linux Foundation incubator project.",
      "Key": "anilmadhavapeddy",
      "Name": "Anil Madhavapeddy",
      "URL": "http://anil.recoil.org",
      "URLphoto": "http://conf.researchr.org/getProfileImage/anilmadhavapeddy/505529bf-b2b7-41a5-be88-f5cd55b433ae/small.jpg"
    },
    {
      "Affiliation": "Pohang University of Science and Technology",
      "Key": "sungwoopark",
      "Name": "Sungwoo Park",
      "URL": "http://pl.postech.ac.kr/~gla/"
    },
    {
      "Affiliation": "Chalmers University of Technology, Sweden",
      "Key": "bojoelsvensson",
      "Name": "Bo Joel Svensson",
      "URL": "http://www.cse.chalmers.se/~joels/"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "kazutakamatsuda",
      "Name": "Kazutaka Matsuda",
      "URL": "http://www2.sf.ecei.tohoku.ac.jp/~kztk/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kazutakamatsuda/025cdfbf-d8a8-4626-9823-f8820f17a6bc/small.jpg"
    },
    {
      "Affiliation": "Lightbend",
      "Key": "jamieallen",
      "Name": "Jamie Allen",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jamieallen/02c0ad5f-2f48-438e-b5b2-39327d6be16c/small.jpg"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "matteocimini",
      "Name": "Matteo Cimini"
    },
    {
      "Affiliation": "Tufts University",
      "Key": "yisuremywang",
      "Name": "Yisu Remy Wang"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "maxnew",
      "Name": "Max New",
      "URL": "http://maxsnew.github.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/maxnew/1032d55a-9db1-4f7d-bf53-3dd3e80cea6d/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "basharigrieddebalkhawaldeh",
      "Name": "Bashar Igried Deb Alkhawaldeh"
    },
    {
      "Affiliation": "UNSW, Australia",
      "Key": "gerwinklein",
      "Name": "Gerwin Klein"
    },
    {
      "Affiliation": "University of Birmingham",
      "Key": "danghica",
      "Name": "Dan Ghica",
      "URL": "http://www.cs.bham.ac.uk/~drg/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danghica/052b7558-7804-4818-ab5c-22f3567fc6a1/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "diogenesnunez",
      "Name": "Diogenes Nunez"
    },
    {
      "Affiliation": "University of Kansas",
      "Bio": "Andrew (Andy) Gill was born and educated in Scotland, and has spent his professional career in the United States. Andy received his Ph.D. from the University of Glasgow in 1996, then spent three years in industry as a compiler developer, and a year in academia as a principal project scientist. He co-founded Galois in 2000, a technology transfer company that used language technologies to create trustworthiness in critical systems. In 2008 he returned to academia and research, joining the University of Kansas and the Information and Telecommunication Technology Center.\nAndy believes that functional languages like Haskell are a great medium for expressing algorithms and solving problems. Since returning to academia, he has targeted the application areas of telemetry and signal processing, specializing in generating high performance circuits from specifications. His research interests include optimization, language design, debugging, and dependability. The long-term goal of his research is to offer engineers and practitioners the opportunity to write clear and high-level executable specifications that can realistically be compiled into efficient implementations.",
      "Key": "andygill",
      "Name": "Andy Gill",
      "URL": "http://ku-fpg.github.io/people/andygill/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andygill/065ae28e-8271-4235-965f-21de4d1ebefc/small.jpg"
    },
    {
      "Affiliation": "Kanagawa University",
      "Key": "makototakeyama",
      "Name": "Makoto Takeyama"
    },
    {
      "Affiliation": "Microsoft Research",
      "Bio": "I\u2019m a Researcher in the RiSE group at MSR Redmond. My work covers various topics including type systems, program logics, functional programming, program verification and interactive theorem proving. I often think about how to use these techniques to build provably secure programs, including web applications, web browsers, crypto protocol implementations, and low-level systems code.",
      "Key": "nikhilswamy",
      "Name": "Nikhil Swamy",
      "URL": "http://research.microsoft.com/en-us/people/nswamy/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nikhilswamy/077cd684-6d6a-44a9-ad24-e69061c7128e/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research",
      "Bio": "I am a member of the Research In Software Engineering (RISE) group and chair of the Programming Languages working group (PLX). Currently, I am interested in the design and application of strong type systems and declarative programming languages, like Haskell. In particular, I am interested in programming with Effect inference in the Koka project. Furthermore, I work on domain specific embedded languages, language design, and compiler technology.",
      "Key": "daanleijen",
      "Name": "Daan Leijen",
      "URL": "https://www.microsoft.com/en-us/research/people/daan/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/daanleijen/08223fe8-ae25-4bd2-8c16-27b5ab0cbd8c/small.jpg"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "hjalteabelskov",
      "Name": "Hjalte Abelskov"
    },
    {
      "Affiliation": "OCamlPRO",
      "Key": "pierrechambart",
      "Name": "Pierre Chambart"
    },
    {
      "Affiliation": "Carnegie Mellon University, USA",
      "Key": "stefankmuller",
      "Name": "Stefan K. Muller"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "naokikobayashi",
      "Name": "Naoki Kobayashi"
    },
    {
      "Affiliation": "McGill University, Canada",
      "Key": "andrewcave",
      "Name": "Andrew Cave"
    },
    {
      "Affiliation": "INRIA",
      "Key": "didierremy",
      "Name": "Didier Rémy",
      "URL": "http://gallium.inria.fr/~remy/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/didierremy/0d41b6f5-55f4-41ed-af26-fab2fe7d8605/small.jpg"
    },
    {
      "Affiliation": "Carnegie Mellon University, USA",
      "Key": "ramraghunathan",
      "Name": "Ram Raghunathan"
    },
    {
      "Affiliation": "",
      "Key": "romaincalascibetta",
      "Name": "Romain Calascibetta",
      "URL": "http://din.osau.re",
      "URLphoto": "http://conf.researchr.org/getProfileImage/romaincalascibetta/c9af0d98-be55-46cd-bacd-9d4f55d0954f/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "danpiponi",
      "Name": "Dan Piponi",
      "URL": "https://plus.google.com/+DanPiponi/posts",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danpiponi/0f3b967e-4dd1-44e7-a32c-83cf9a48ef98/small.jpg"
    },
    {
      "Affiliation": "UMR STMS: IRCAM-CNRS-UPMC",
      "Key": "jeanbresson",
      "Name": "Jean Bresson",
      "URL": "http://repmus.ircam.fr/bresson",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jeanbresson/b1ba6718-1b7b-438d-95cc-69111f99dcb9/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "michaellaporte",
      "Name": "Michael Laporte"
    },
    {
      "Affiliation": "Rochester Institute of Technology",
      "Bio": "I was a Research Assistant Professor with the Toyota Technological Institute at Chicago from September 2006 to June 2009.\nI graduated with a Ph.D. in computer science from Cornell University in January 2007. My advisor was Greg Morrisett.\nI graduated with a B.S. in mathematics from Harvey Mudd College in 1999. My advisor was Arthur Benjamin.",
      "Key": "matthewfluet",
      "Name": "Matthew Fluet",
      "URL": "http://www.cs.rit.edu/~mtf",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthewfluet/10905b92-706f-468a-82c6-cb8130537f56/small.jpg"
    },
    {
      "Affiliation": "Department of Computer Science, University of Copenhagen",
      "Key": "martinelsman",
      "Name": "Martin Elsman",
      "URL": "http://www.elsman.com",
      "URLphoto": "http://conf.researchr.org/getProfileImage/martinelsman/1158f40b-68de-48a0-939e-89f98f6b4f18/small.jpg"
    },
    {
      "Affiliation": "NICTA and UNSW",
      "Key": "gernotheiser",
      "Name": "Gernot Heiser",
      "URL": "http://www.cse.unsw.edu.au/~gernot/"
    },
    {
      "Affiliation": "Grinnell College",
      "Key": "petermichaelosera",
      "Name": "Peter-Michael Osera",
      "URL": "http://www.cs.grinnell.edu/~osera",
      "URLphoto": "http://conf.researchr.org/getProfileImage/petermichaelosera/e150f329-fb7d-4641-80e6-a3e97bbe9e11/small.jpg"
    },
    {
      "Affiliation": "University of Electro-Communications, Japan",
      "Key": "hideyaiwasaki",
      "Name": "Hideya Iwasaki"
    },
    {
      "Affiliation": "University of New South Wales",
      "Key": "manuelchakravarty",
      "Name": "Manuel Chakravarty",
      "URL": "http://www.cse.unsw.edu.au/~chak/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/manuelchakravarty/12c6a408-4abc-4eb8-9d4b-c4627f17a326/small.jpg"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "seiyanishizawa",
      "Name": "Seiya Nishizawa"
    },
    {
      "Affiliation": "CNMAT - UC Berkeley",
      "Key": "adrianfreed",
      "Name": "Adrian Freed",
      "URL": "http://tinkering.exploratorium.edu/adrian-freed"
    },
    {
      "Affiliation": "",
      "Key": "edwardkmett",
      "Name": "Edward Kmett"
    },
    {
      "Affiliation": "",
      "Key": "annabelsatin",
      "Name": "Annabel Satin",
      "URLphoto": "http://conf.researchr.org/getProfileImage/annabelsatin/16cb0306-1f8b-47ec-8ea6-33ccc45ec52c/small.jpg"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "hirofumitomita",
      "Name": "Hirofumi Tomita"
    },
    {
      "Affiliation": "University of California at San Diego, USA",
      "Key": "ericseidel",
      "Name": "Eric L. Seidel",
      "URL": "http://eric.seidel.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ericseidel/4929cfc4-b061-49e9-9746-7c85b3b680b4/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Bio": "Katie Ots is a Software Engineer at Facebook London, where she works on Haskell tools for spam fighters. Katie co-founded the Lambda Ladies group for women in functional programming.",
      "Key": "katieots",
      "Name": "Katie Ots",
      "URL": "http://www.codemiller.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/katieots/1781445a-910f-478d-835d-9355eea720cf/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "olinshivers",
      "Name": "Olin Shivers",
      "URL": "http://www.ccs.neu.edu/home/shivers/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/olinshivers/178b2579-51fd-4848-852e-29aa9bf0b049/small.jpg"
    },
    {
      "Affiliation": "University of St. Andrews, UK",
      "Key": "davidcastro",
      "Name": "David Castro"
    },
    {
      "Affiliation": "",
      "Key": "jamesclarke",
      "Name": "James Clarke"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "takeshitsukada",
      "Name": "Takeshi Tsukada"
    },
    {
      "Affiliation": "Universidad Nacional de Córdoba",
      "Key": "betaziliani",
      "Name": "Beta Ziliani",
      "URL": "https://www.mpi-sws.org/~beta/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/betaziliani/293e6140-bcd4-4e3f-85ae-b8ec673bbfba/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "yudavidliu",
      "Name": "Yu David Liu"
    },
    {
      "Affiliation": "",
      "Key": "fredericbour",
      "Name": "Frédéric Bour"
    },
    {
      "Affiliation": "University of Chile, Chile",
      "Key": "hideyukihotta",
      "Name": "Hideyuki Hotta"
    },
    {
      "Affiliation": "Nagoya University",
      "Key": "jacquesgarrigue1",
      "Name": "Jacques Garrigue",
      "URL": "http://www.math.nagoya-u.ac.jp/~garrigue/home.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jacquesgarrigue1/1c6cff5e-3103-4182-96a0-04ceeb96bf14/small.jpg"
    },
    {
      "Affiliation": "University of Edinburgh, UK",
      "Key": "jgarrettmorris",
      "Name": "J. Garrett Morris",
      "URL": "http://jgbm.github.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jgarrettmorris/bfd0d5b6-e65e-403e-882f-089258565ed5/small.jpg"
    },
    {
      "Affiliation": "OCamlPro",
      "Key": "louisgesbert",
      "Name": "Louis Gesbert"
    },
    {
      "Affiliation": "National Institute of Informatics, Japan",
      "Key": "zhenjianghu",
      "Name": "Zhenjiang Hu",
      "URL": "http://research.nii.ac.jp/~hu/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/zhenjianghu/1d3515c4-02fb-406d-9f35-42b5e4d949bf/small.jpg"
    },
    {
      "Affiliation": "University of Utrecht",
      "Bio": "After studying Mathematics and Computer Science at the University of Utrecht, I did my PhD under supervision of Thorsten Altenkirch at the University of Nottingham\u2019s Functional Programming Lab. I worked as a post-doc at Chalmers University of Technology, before moving back to the Netherlands to work at Vector Fabrics, a high-tech startup that uses functional programming to facilitate the design of embedded systems. After this brief stint in industry, I returned to academia as a postdoc in the Foundations Group at the Radboud University Nijmegen.",
      "Key": "wouterswierstra",
      "Name": "Wouter Swierstra",
      "URL": "http://www.staff.science.uu.nl/~swier004/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/wouterswierstra/1db000a0-20ed-4c0d-b00c-d467bf461548/small.jpg"
    },
    {
      "Affiliation": "EPFL",
      "Bio": "Sandro is a PhD student at the Programming Methods Laboratory (LAMP) at EPFL, supervised by Martin Odersky. His research interests include type systems and type theory, the design and semantics of domain-specific languages and formal methods for modeling systems biology. He is participating in the ongoing effort to formalize Scala\u2019s type system and likes to hack on type soundness proofs and other theories in Agda.",
      "Key": "sandrostucki",
      "Name": "Sandro Stucki",
      "URL": "http://lamp.epfl.ch/~sstucki/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/sandrostucki/4e64a916-bd68-410c-a42c-3f34ec621ed7/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "seangrove",
      "Name": "Sean Grove",
      "URL": "https://www.riseos.com"
    },
    {
      "Affiliation": "Fugue",
      "Key": "jaspervanderjeugt",
      "Name": "Jasper Van der Jeugt"
    },
    {
      "Affiliation": "Vector Fabrics",
      "Key": "stefanholdermans",
      "Name": "Stefan Holdermans",
      "URL": "http://www.holdermans.nl/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/stefanholdermans/1fca09ab-4259-4316-9ab3-b31e0b4f9508/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "adambarwell",
      "Name": "Adam Barwell"
    },
    {
      "Affiliation": "Utrecht University",
      "Bio": "Professor of Software Technology for Learning and Teaching at the Institute of Information and Computing Sciences of Utrecht University (95%), and professor of Software Technology at the School of Computer Science of the Open University (OUNL).\nI develop software technology to support learning and teaching, and advanced methods for constructing software.",
      "Key": "johanjeuring",
      "Name": "Johan Jeuring",
      "URL": "http://www.staff.science.uu.nl/~jeuri101/homepage/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/johanjeuring/20c79659-6683-4aeb-bd29-3e172bfa3f36/small.jpg"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Bio": "Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master\u2019s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.\nHis research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.",
      "Key": "eelcovisser",
      "Name": "Eelco Visser",
      "URL": "http://eelcovisser.org",
      "URLphoto": "http://conf.researchr.org/getProfileImage/eelcovisser/22310187-399f-4130-97bc-743fd84e7b94/small.jpg"
    },
    {
      "Affiliation": "MPI-SWS & Saarland University",
      "Key": "georgneis",
      "Name": "Georg Neis",
      "URL": "https://www.mpi-sws.org/~neis/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/georgneis/234cda25-cfeb-4159-9c50-4bde04a7028f/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "samguyer",
      "Name": "Sam Guyer"
    },
    {
      "Affiliation": "Ozyegin University",
      "Key": "barisaktemur",
      "Name": "Baris Aktemur",
      "URL": "https://aktemur.github.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/barisaktemur/23959536-7e80-4a23-afd6-fa53ea5269d2/small.jpg"
    },
    {
      "Affiliation": "INRIA",
      "Bio": "Catalin is a tenured Research Scientist at Inria Paris where he develops rigorous formal techniques for solving security problems. He is particularly interested in formal methods for security (memory safety, compartmentalization, dynamic monitoring, integrity, security protocols, information flow), programming languages (type systems, verification, proof assistants, property-based testing, semantics, formal metatheory, certified tools), and the design and verification of security-critical systems (reference monitors, secure compilers, microkernels, secure hardware). He is a developer of the new F* verification system and of several other open source tools based on his research. Catalin was a PhD student at Saarland University and a Research Associate at University of Pennsylvania before joining Inria Paris in September 2013.",
      "Key": "catalinhritcu",
      "Name": "Cătălin Hriţcu",
      "URL": "http://prosecco.gforge.inria.fr/personal/hritcu/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/catalinhritcu/23ee6164-9e33-4d5e-8efd-5859497238bb/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "francisshuman",
      "Name": "Francis Shuman"
    },
    {
      "Affiliation": "",
      "Key": "josephtuong",
      "Name": "Joseph Tuong"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "csongorkiss",
      "Name": "Csongor Kiss",
      "URL": "http://kcsongor.github.io/"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "danielgavin",
      "Name": "Daniel Gavin"
    },
    {
      "Affiliation": "Tohoku University, Japan",
      "Key": "katsuhiroueno",
      "Name": "Katsuhiro Ueno",
      "URLphoto": "http://conf.researchr.org/getProfileImage/katsuhiroueno/26e33bd1-fd8a-4eab-9ad6-ff2ad45cbe8e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "jdanielfernandez",
      "Name": "J. Daniel Fernandez"
    },
    {
      "Affiliation": "University of British Columbia, Canada",
      "Key": "joshuadunfield",
      "Name": "Joshua Dunfield",
      "URLphoto": "http://conf.researchr.org/getProfileImage/joshuadunfield/274e8b77-6511-418b-8ca8-ff079744cd2c/small.jpg"
    },
    {
      "Affiliation": "University of Pennsylvania",
      "Key": "stephanieweirich",
      "Name": "Stephanie Weirich",
      "URL": "https://www.cis.upenn.edu/~sweirich/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/stephanieweirich/27771bf0-348a-412a-97f3-256b0e789f81/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "bryanparno",
      "Name": "Bryan Parno"
    },
    {
      "Affiliation": "",
      "Key": "kennethchiu",
      "Name": "Kenneth Chiu"
    },
    {
      "Affiliation": "Northwestern University",
      "Bio": "robby@eecs.northwestern.edu",
      "Key": "robbyfindler",
      "Name": "Robby Findler",
      "URL": "http://www.eecs.northwestern.edu/~robby/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/robbyfindler/28e677e8-d52c-40d1-841d-4b2774afecd1/small.jpg"
    },
    {
      "Affiliation": "The University of Electro-Communications",
      "Key": "keisukenakano",
      "Name": "Keisuke Nakano",
      "URL": "http://millsmess.cs.uec.ac.jp/~ksk/en/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/keisukenakano/298c7a7e-c06b-489e-9715-cb0a8bba9501/small.jpg"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "susumunishimura",
      "Name": "Susumu Nishimura",
      "URL": "https://www.math.kyoto-u.ac.jp/~susumu/"
    },
    {
      "Affiliation": "Università della Svizzera italiana",
      "Key": "andrearosa",
      "Name": "Andrea Rosà",
      "URL": "http://www.inf.usi.ch/phd/rosaa",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andrearosa/56bfbe88-343d-473c-b65b-a085469b0cae/small.jpg"
    },
    {
      "Affiliation": "Stanford",
      "Key": "davidterei",
      "Name": "David Terei",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidterei/ec8f7860-b051-4a5d-a647-511090252ec9/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "anilmadhavapeddy1",
      "Name": "Anil Madhavapeddy",
      "URL": "http://anil.recoil.org"
    },
    {
      "Affiliation": "",
      "Key": "marcovassena",
      "Name": "Marco Vassena"
    },
    {
      "Affiliation": "CNRS LaBRI, Inria Bordeaux,",
      "Key": "simonarchipoff",
      "Name": "Simon Archipoff",
      "URL": "http://scrime.labri.fr/blog/portfolio-item/simon-archipoff/"
    },
    {
      "Affiliation": "Bryn Mawr College",
      "Bio": "Assistant Professor at Bryn Mawr College. I completed my PhD in 2016 at University of Pennsylvania working under Stephanie Weirich; my dissertation topic was the integration of dependent types into the Haskell programming language. I am a regular contributor to the Glasgow Haskell Compiler (GHC).",
      "Key": "richardeisenberg",
      "Name": "Richard Eisenberg",
      "URL": "http://cs.brynmawr.edu/~rae",
      "URLphoto": "http://conf.researchr.org/getProfileImage/richardeisenberg/2d03068d-412f-453b-ac98-b41b80ec03ca/small.jpg"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "prabhakarragde",
      "Name": "Prabhakar Ragde",
      "URL": "https://cs.uwaterloo.ca/~plragde/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/prabhakarragde/2e2527e7-5000-4645-b68e-c3d462574c1b/small.jpg"
    },
    {
      "Affiliation": "Freelance",
      "Key": "sebastianfischer",
      "Name": "Sebastian Fischer",
      "URL": "http://sebfisch.github.io/research/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/sebastianfischer/2e2bdb0d-e079-4a02-a55d-7846780e07d6/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "Professor Clinger focuses on the design, specification, and implementation of functional and higher-order programming languages. His research interests stem from programming languages\u2019 ability to connect mathematically sophisticated theories of syntax and semantics to economically important details of computer hardware and software.\nIn the course of his career, Professor Clinger has proven the correctness of a commercial compiler\u2019s algorithm for generating code, invented efficient algorithms for hygienic macro expansion and converting decimal scientific notation into the nearest binary floating-point approximation, and contributed to development of the IEEE/ANSI standard for Scheme.\nIn recent years, Professor Clinger and his PhD students have designed promising new algorithms for automatic garbage collection. Several of these algorithms have been tested in Larceny, which Clinger and his students originally developed as a vehicle for experimental research on compiler optimization and garbage collection. Larceny has become one of the leading multiplatform implementations of the Scheme programming language.",
      "Key": "willclinger",
      "Name": "Will Clinger",
      "URL": "http://www.cesura17.net/~will/Professional/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/willclinger/2efc479f-892f-406b-a395-628412b87929/small.jpg"
    },
    {
      "Affiliation": "Indeed.com",
      "Key": "alexshinn",
      "Name": "Alex Shinn",
      "URL": "http://synthcode.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/alexshinn/b1095018-2d9a-4e9e-bfde-d8f2b3d1488a/small.jpg"
    },
    {
      "Affiliation": "University of Cambridge, UK",
      "Bio": "Dr Dominic Orchard is a Research Associate at the University of Cambridge and SSI Fellow. His research interests are programming language design and semantics, mathematically structured programming, effect and coeffect systems, embedded domain-specific languages (esp. for parallelisation), applying programming language research to computational science.",
      "Key": "dominicorchard",
      "Name": "Dominic Orchard",
      "URL": "http://dorchard.co.uk",
      "URLphoto": "http://conf.researchr.org/getProfileImage/dominicorchard/f448aa26-a342-457c-91a6-3f9525a759a3/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "mariadelmarrubiogonzalez",
      "Name": "María del Mar Rubio González",
      "URLphoto": "http://conf.researchr.org/getProfileImage/mariadelmarrubiogonzalez/1016c0bd-9d8c-4bb3-9f0d-26fbb2b4946b/small.jpg"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "nicolastabareau",
      "Name": "Nicolas Tabareau"
    },
    {
      "Affiliation": "University of  A Coruña",
      "Bio": "I was born in Madrid, Spain in 1980 and moved to Galicia, located in the north west coast of the country, when I was in my teens. I went to high school in Santiago de Compostela and attended college in A Coru&ntilde;a, where I now live and work. I have also lived for short periods of time in the US (Houston, Texas) and Sweden (G&ouml;teborg).\nI am a postdoc researcher and assistant lecturer at the University of A Coru&ntilde;a, where I have been teaching since 2005. At the moment, I am in charge of teaching Software Architecture and Software Validation to 3rd and 4th year undegrads.\nI also perform research in the areas of software testing (automated, model and property-based testing), applied to software in general, and distributed, concurrent, functional systems in particular. I am a member of the MADS (Models and Applications of Distributed Systems) research group.",
      "Key": "lauramcastro",
      "Name": "Laura M. Castro",
      "URL": "http://www.madsgroup.org/staff/laura",
      "URLphoto": "http://conf.researchr.org/getProfileImage/lauramcastro/30de4e05-c6c4-41d1-824b-84aeaffec0f2/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "stephendolan",
      "Name": "Stephen Dolan"
    },
    {
      "Affiliation": "SUNY Buffalo, USA",
      "Bio": "Marco Gaboardi is an assistant professor in the Department of Computer Science and Engineering at the University at Buffalo, SUNY. Previously, he was a faculty at the University of Dundee, Scotland. He received his PhD from the University of Torino, Italy, and the Institute National Polytechnique de Lorraine, France. He was a visitor scholar at the University of Pennsylvania and at Harvard\u2019s CRCS center. He has been the recipient of a EU Marie Curie Fellowship. His research is in programming languages, differential privacy, and logic.",
      "Key": "marcogaboardi",
      "Name": "Marco Gaboardi",
      "URL": "http://www.buffalo.edu/~gaboardi",
      "URLphoto": "http://conf.researchr.org/getProfileImage/marcogaboardi/76ff8963-9672-4f16-87bc-3f0d75ce589b/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "tommurphy",
      "Name": "Tom Murphy"
    },
    {
      "Affiliation": "",
      "Key": "vascothudichumvasconcelos",
      "Name": "Vasco Thudichum Vasconcelos"
    },
    {
      "Affiliation": "Oxford University, UK",
      "Key": "timothyzakian",
      "Name": "Timothy A. K. Zakian",
      "URLphoto": "http://conf.researchr.org/getProfileImage/timothyzakian/aa4563c3-463e-48cf-a916-44417bb8625c/small.jpg"
    },
    {
      "Affiliation": "FP Complete",
      "Key": "michaelsnoyman",
      "Name": "Michael Snoyman",
      "URL": "http://www.snoyman.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/michaelsnoyman/323ff2bc-2126-4c1e-bf3a-cc72795a51c2/small.jpg"
    },
    {
      "Affiliation": "Pinterest",
      "Key": "brandonkase",
      "Name": "Brandon Kase"
    },
    {
      "Affiliation": "University of Edinburgh, UK",
      "Key": "samlindley",
      "Name": "Sam Lindley",
      "URL": "http://homepages.inf.ed.ac.uk/slindley/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/samlindley/32dd34f2-c14b-412f-811e-449bbff76c7f/small.jpg"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "ryosukesato",
      "Name": "Ryosuke Sato"
    },
    {
      "Affiliation": "IMDEA Software Institute",
      "Key": "germanandresdelbianco",
      "Name": "Germán Andrés Delbianco",
      "URL": "http://delbian.co"
    },
    {
      "Affiliation": "Nagoya University",
      "Key": "miraiikebuchi",
      "Name": "Mirai Ikebuchi"
    },
    {
      "Affiliation": "EPFL",
      "Bio": "I\u2019m a PhD student at EPFL. My interested areas are type systems, effect systems, programming languages, and various logics.",
      "Key": "fengyunliu",
      "Name": "Fengyun Liu",
      "URLphoto": "http://conf.researchr.org/getProfileImage/fengyunliu/7967ca32-789c-44f7-a256-c5eae78909c1/small.jpg"
    },
    {
      "Affiliation": "Standard Chartered Bank",
      "Key": "romanleshchinskiy",
      "Name": "Roman Leshchinskiy"
    },
    {
      "Affiliation": "",
      "Key": "florentbalestrieri",
      "Name": "Florent Balestrieri"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "keigonitadori",
      "Name": "Keigo Nitadori"
    },
    {
      "Affiliation": "University of Kent",
      "Key": "simonthompson",
      "Name": "Simon Thompson",
      "URL": "http://www.cs.kent.ac.uk/people/staff/sjt/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/simonthompson/365eed34-647b-43b4-b16f-42601861dc97/small.jpg"
    },
    {
      "Affiliation": "Eötvös Loránd University",
      "Key": "matekaracsony",
      "Name": "Mate Karacsony",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matekaracsony/ab71646f-ddbb-479e-8722-bc0633047d35/small.jpg"
    },
    {
      "Affiliation": "University of Leeds",
      "Key": "davidduke",
      "Name": "David Duke",
      "URL": "http://www.comp.leeds.ac.uk/djd/index.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidduke/37191a7a-5368-4167-8e05-567a7fb696ca/small.jpg"
    },
    {
      "Affiliation": "University of Kent, UK",
      "Key": "mengwang",
      "Name": "Meng Wang",
      "URL": "https://www.cs.kent.ac.uk/people/staff/mw516/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/mengwang/37ccf08b-556c-46a0-a504-36c976910e9d/small.jpg"
    },
    {
      "Affiliation": "University of Maryland, College Park",
      "Bio": "Michael Hicks is a Professor in the Computer Science department and UMIACS at the University of Maryland, where he co-directs the laboratory for Programming Languages research (PLUM); he is the former Director of the Maryland Cybersecurity Center (MC2). \nHis research focuses on using programming languages and analyses to improve the security, reliability, and availability of software. He is perhaps best known for his work exploring dynamic software updating, which is a technique by which software can be updated without shutting it down. He has explored the design of new programming languages and analysis tools for helping programmers find bugs and software vulnerabilities, and for identifying suspicious or incorrect program executions. \nHis recent work has combined ideas from PL and cryptography, e.g., to ensure privacy preserving computations. He also leads the development of a new security-oriented programming contest, \u201cbuild-it, break-it, fix-it,\u201d which has been offered to the public and to students in his Coursera class on software security. He is the co-editor of the Programming Languages Enthusiast blog and Tweets at @michael_w_hicks.",
      "Key": "michaelhicks",
      "Name": "Michael Hicks",
      "URL": "http://www.cs.umd.edu/~mwh/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/michaelhicks/3864a29f-1e96-47cc-9798-bcafe0dd0b04/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Bio": "I am an Assistant Professor in the Department of Computer Science at Indiana University.\nResearch Interests: my research focuses on the design and analysis of software and programming languages. I am particularly interested in how programs grow from prototype scripts to robust software, and how programming language design can support this process. My research concerns type systems, software contracts, modularity, and extensibility. I\u2019m currently working with the DARPA CRASH program on Racket and with Mozilla Labs on JavaScript.",
      "Key": "samtobinhochstadt",
      "Name": "Sam Tobin-Hochstadt",
      "URL": "http://samth.github.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/samtobinhochstadt/386d08d9-8ef6-4cb4-bc21-b47c79b6ad55/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "moritzangermann",
      "Name": "Moritz Angermann"
    },
    {
      "Affiliation": "",
      "Key": "christopherbrown",
      "Name": "Christopher Brown"
    },
    {
      "Affiliation": "University of Chicago",
      "Key": "kavonfarvardin",
      "Name": "Kavon Farvardin",
      "URL": "http://kavon.farvard.in",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kavonfarvardin/e1385ba6-42de-4482-ba49-de87451e6cae/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "amalahmed",
      "Name": "Amal Ahmed",
      "URL": "http://www.ccs.neu.edu/home/amal/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/amalahmed/3b4031f8-79ed-4cc8-b63c-543ba6923acd/small.jpg"
    },
    {
      "Affiliation": "University of Marburg",
      "Key": "ritaloogen",
      "Name": "Rita Loogen",
      "URL": "https://www.mathematik.uni-marburg.de/~loogen/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ritaloogen/3b706431-a833-40e1-b129-ff2e2fa48232/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "matthewpickering",
      "Name": "Matthew Pickering"
    },
    {
      "Affiliation": "UNSW, Australia",
      "Key": "thomassewell",
      "Name": "Thomas Sewell"
    },
    {
      "Affiliation": "",
      "Key": "manuelbarenz",
      "Name": "Manuel Barenz"
    },
    {
      "Affiliation": "",
      "Key": "neilmitchell",
      "Name": "Neil Mitchell"
    },
    {
      "Affiliation": "",
      "Key": "deepthidevakiakkoorath",
      "Name": "Deepthi Devaki Akkoorath"
    },
    {
      "Affiliation": "University of Waterloo",
      "Key": "reidholmes",
      "Name": "Reid Holmes"
    },
    {
      "Affiliation": "IMDEA Software Institute, Spain",
      "Key": "vincentlaporte",
      "Name": "Vincent Laporte"
    },
    {
      "Affiliation": "",
      "Key": "dmitriboulytchev",
      "Name": "Dmitri Boulytchev"
    },
    {
      "Affiliation": "",
      "Key": "danielhillerstrom1",
      "Name": "Daniel Hillerström"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Bio": "R. John M. Hughes (born ca 1958) is a Swedish computer scientist and professor in the department of Computing Science at the Chalmers University of Technology.\nHughes received his PhD from the University of Oxford in 1984 for the thesis \u201cThe Design and Implementation of Programming Languages\u201d.\nHe is a member of the Functional Programming group at Chalmers, and much of his research relates to the Haskell programming language. He does research in the field of programming languages and is the author of several influential research papers on the subject, including \u201cWhy Functional Programming Matters\u201d.[1]\nHe is also one of the developers of QuickCheck, and cofounder and CEO of QuviQ, which provides the QuickCheck software and offers classes in how to use it.",
      "Key": "johnhughes",
      "Name": "John Hughes",
      "URL": "http://www.cse.chalmers.se/~rjmh/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/johnhughes/3f79ad93-d1b9-44df-92af-0d454dbeae0c/small.jpg"
    },
    {
      "Affiliation": "Ambiata (Australia)",
      "Key": "amosrobinson",
      "Name": "Amos Robinson"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "yoshifuminakamura",
      "Name": "Yoshifumi Nakamura"
    },
    {
      "Affiliation": "University of Cambridge",
      "Key": "kathygray",
      "Name": "Kathy Gray",
      "URL": "https://www.cl.cam.ac.uk/~keg29/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kathygray/436af62c-4807-493b-bdcb-d6c5293fbd02/small.jpg"
    },
    {
      "Affiliation": "CNMAT - UC Berkeley",
      "Key": "johnmaccallum",
      "Name": "John MacCallum",
      "URL": "http://john-maccallum.com/"
    },
    {
      "Affiliation": "INRIA",
      "Key": "francoispottier",
      "Name": "Francois Pottier",
      "URL": "http://gallium.inria.fr/~fpottier/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/francoispottier/43c21d9d-be89-4b0d-88e9-4982a91b746c/small.jpg"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "davidchristiansen",
      "Name": "David Christiansen",
      "URL": "http://davidchristiansen.dk",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidchristiansen/44c3b823-ddad-4b19-90d7-13f969bac6ab/small.jpg"
    },
    {
      "Affiliation": "Kochi University of Technology, Japan",
      "Key": "kiminorimatsuzaki",
      "Name": "Kiminori Matsuzaki",
      "URL": "http://www.info.kochi-tech.ac.jp/~kmatsu/"
    },
    {
      "Affiliation": "Docker",
      "Key": "mindypreston",
      "Name": "Mindy Preston",
      "URL": "http://www.somerandomidiot.com",
      "URLphoto": "http://conf.researchr.org/getProfileImage/mindypreston/46677c13-ff2a-4e17-821d-a703ec0f4bd1/small.jpg"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "manuelserrano",
      "Name": "Manuel Serrano",
      "URL": "http://www-sop.inria.fr/members/Manuel.Serrano/"
    },
    {
      "Affiliation": "",
      "Key": "damiendoligez",
      "Name": "Damien Doligez"
    },
    {
      "Affiliation": "UNSW, Australia",
      "Key": "sidneyamani",
      "Name": "Sidney Amani"
    },
    {
      "Affiliation": "Tufts University",
      "Key": "calebhelbling",
      "Name": "Caleb Helbling"
    },
    {
      "Affiliation": "University of Paris Diderot, France",
      "Key": "giuseppecastagna",
      "Name": "Giuseppe Castagna",
      "URL": "http://www.irif.univ-paris-diderot.fr/~gc/"
    },
    {
      "Affiliation": "University of Warwick, UK",
      "Key": "andrzejmurawski",
      "Name": "Andrzej Murawski",
      "URL": "https://www2.warwick.ac.uk/fac/sci/dcs/people/andrzej_murawski/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andrzejmurawski/4a2cb262-2b42-42f0-9db2-58fa397a63dd/small.jpg"
    },
    {
      "Affiliation": "Jane Street",
      "Key": "yaronminsky",
      "Name": "Yaron Minsky",
      "URLphoto": "http://conf.researchr.org/getProfileImage/yaronminsky/4b00b8d8-8a54-452b-b11c-e7c269d64554/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research",
      "Key": "jonathanprotzenko",
      "Name": "Jonathan Protzenko",
      "URL": "https://jonathan.protzenko.fr",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jonathanprotzenko/203c9e40-1cbf-40d3-b59f-da4a4c305361/small.jpg"
    },
    {
      "Affiliation": "Microsoft",
      "Key": "donsyme",
      "Name": "Don Syme",
      "URL": "http://research.microsoft.com/en-us/people/dsyme/"
    },
    {
      "Affiliation": "University of Lugano",
      "Key": "walterbinder",
      "Name": "Walter Binder"
    },
    {
      "Affiliation": "Adzerk",
      "Key": "daveyarwood",
      "Name": "Dave Yarwood",
      "URL": "http://blog.djy.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/daveyarwood/58676b3b-3e61-40db-b399-a6975b5ee375/small.jpg"
    },
    {
      "Affiliation": "Ochanomizu University",
      "Key": "kenichiasai",
      "Name": "Kenichi Asai",
      "URL": "http://pllab.is.ocha.ac.jp/~asai/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kenichiasai/4cd309f4-1d81-4c04-acbb-6ae518baa52b/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "antonsetzer",
      "Name": "Anton Setzer"
    },
    {
      "Affiliation": "University of Edinburgh",
      "Bio": "Philip Wadler is Professor of Theoretical Computer Science at the University of Edinburgh. He is an ACM Fellow and a Fellow of the Royal Society of Edinburgh, past chair of ACM SIGPLAN, past holder of a Royal Society-Wolfson Research Merit Fellowship, and a winner of the POPL Most Influential Paper Award. Previously, he worked or studied at Stanford, Xerox Parc, CMU, Oxford, Chalmers, Glasgow, Bell Labs, and Avaya Labs, and visited as a guest professor in Copenhagen, Sydney, and Paris. He has an h-index of 60, with more than 18,000 citations to his work according to Google Scholar. He contributed to the designs of Haskell, Java, and XQuery, and is a co-author of Introduction to Functional Programming, XQuery from the Experts and Generics and Collections in Java. He has delivered invited talks in locations ranging from Aizu to Zurich.",
      "Key": "philipwadler",
      "Name": "Philip Wadler",
      "URL": "http://homepages.inf.ed.ac.uk/wadler/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/philipwadler/4d28d9ea-0064-4f0f-aa7e-f3cc4d762a78/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "gustavogrieco",
      "Name": "Gustavo Grieco"
    },
    {
      "Affiliation": "",
      "Key": "michelmauny",
      "Name": "Michel Mauny"
    },
    {
      "Affiliation": "Cornell University",
      "Bio": "Nate Foster is an Assistant Professor of Computer Science at Cornell University. His research focuses on developing language abstractions and tools for building reliable systems. He received a PhD in Computer Science from the University of Pennsylvania in 2009, an MPhil in History and Philosophy of Science from Cambridge University in 2008, and a BA in Computer Science from Williams College in 2001. He was a postdoc at Princeton University from 2009-2010. His awards include a Sloan Research Fellowship, an NSF CAREER Award, a Yahoo! Academic Career Enhancement Award, and the Morris and Dorothy Rubinoff Award.",
      "Key": "natefoster",
      "Name": "Nate Foster",
      "URL": "http://www.cs.cornell.edu/~jnfoster/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/natefoster/4e66cd26-1066-423b-bc9f-99384f456d3e/small.jpg"
    },
    {
      "Affiliation": "Aarhus University",
      "Key": "mortenkroghjespersen",
      "Name": "Morten Krogh-Jespersen"
    },
    {
      "Affiliation": "",
      "Key": "luitestegeman",
      "Name": "Luite Stegeman",
      "URL": "http://weblog.luite.com/wordpress/?author=1",
      "URLphoto": "http://conf.researchr.org/getProfileImage/luitestegeman/51fba681-e7d9-4f17-ad0a-72b584411802/small.jpg"
    },
    {
      "Affiliation": "Dartmouth College, USA",
      "Key": "yuhanlyu",
      "Name": "Yu-Han Lyu"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "I am a fifth year Ph.D. student at Northeastern University where I study Computer Science (specifically, programming languages).\nThe promise of programming languages research has been to provide high-level languages in which programmers can easily write complex programs without worrying about speed or low-level machine details. I think we have failed. Languages that provide strong guarantees are bemoaned as too complicated, compilers ignore those high-level guarantees anyway, and the folklore persists that C is the only language useful for writing fast code.\nI want to make programs easier to design, write, and understand. To that end, I work on verifying compilers. I am particularly interested in equivalence preserving (fully-abstract) compilers. I also dabble in dependent types and compiler design and implementation.",
      "Key": "williamjbowman",
      "Name": "William J. Bowman",
      "URL": "https://www.williamjbowman.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/williamjbowman/65b17dd6-298e-44ef-b32a-dc068c8c668b/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Bio": "Daniel P. Friedman is Professor of Computer Science at Indiana University. He is co-author of The Little Schemer, The Seasoned Schemer, The Reasoned Schemer, Scheme and the Art of Programming, and Essentials of Programming Languages, 3rd Edition, all published by MIT press.",
      "Key": "danielfriedman",
      "Name": "Daniel Friedman",
      "URL": "https://www.cs.indiana.edu/~dfried/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danielfriedman/5391c904-695b-421c-9fdf-3e24f5db7103/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "maryshe",
      "Name": "Mary Sheeran",
      "URLphoto": "http://conf.researchr.org/getProfileImage/maryshe/53b14c10-657f-4faf-94fa-a8b70086863d/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "amintimany1",
      "Name": "Amin Timany"
    },
    {
      "Affiliation": "The University of Edinburgh",
      "Bio": "PhD student at the University of Edinburgh, Scotland, UK",
      "Key": "danielhillerstrom",
      "Name": "Daniel Hillerström",
      "URL": "http://www.homepages.inf.ed.ac.uk/s1467124",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danielhillerstrom/22512b81-b136-4451-bcdd-f3d2fbc0210a/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "kennethfoner",
      "Name": "Kenneth Foner"
    },
    {
      "Affiliation": "Portland State University",
      "Key": "timsheard",
      "Name": "Tim Sheard",
      "URL": "http://web.cecs.pdx.edu/~sheard/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/timsheard/56d66b8c-49c6-4c81-8289-b100d778be31/small.jpg"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "olegkiselyov",
      "Name": "Oleg Kiselyov",
      "URL": "http://okmij.org/ftp/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/olegkiselyov/575daa05-880d-4f2f-b085-acbece1d264e/small.jpg"
    },
    {
      "Affiliation": "Los Alamos National Laboratory",
      "Key": "keidavis",
      "Name": "Kei Davis",
      "URLphoto": "http://conf.researchr.org/getProfileImage/keidavis/57c7cd3e-3eff-4d66-9dfa-5e48e71f3ae5/small.jpg"
    },
    {
      "Affiliation": "University of Maryland, USA",
      "Key": "daviddarais",
      "Name": "David Darais",
      "URL": "http://david.darais.com",
      "URLphoto": "http://conf.researchr.org/getProfileImage/daviddarais/84b89731-ca3c-4d97-9540-4ce4db09d1d1/small.jpg"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "takayukimuranushi",
      "Name": "Takayuki Muranushi"
    },
    {
      "Affiliation": "",
      "Key": "andreealutac",
      "Name": "Andreea Lutac"
    },
    {
      "Affiliation": "EPFL, LAMP",
      "Key": "nicolasstucki",
      "Name": "Nicolas Stucki",
      "URL": "https://github.com/nicolasstucki",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nicolasstucki/4dfca9be-ecc5-4acb-a0bf-078dfb4abbf0/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "danielcarballa",
      "Name": "Daniel Carballa"
    },
    {
      "Affiliation": "MPI-SWS, Germany",
      "Key": "ralfjung",
      "Name": "Ralf Jung",
      "URL": "http://www.mpi-sws.org/~jung/"
    },
    {
      "Affiliation": "Princeton University",
      "Key": "davidwalker",
      "Name": "David Walker",
      "URL": "http://www.cs.princeton.edu/~dpw/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidwalker/5b29478e-f296-4401-b3c2-a3ff32437646/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "cagdasbozman",
      "Name": "Çagdas Bozman"
    },
    {
      "Affiliation": "Halmstad University",
      "Bio": "s a Professor of Computer Science at Halmstad University and holds a part-time appointment as a research professor at University of Houston. He is interested in the design, semantics, and implementation of programming and modeling languages. His current research focus is on modeling, rigorous simulation, and verification of cyber-physical systems, and leading the development of the Acumen modeling language.\nTaha is credited with developing the idea of multi-stage programming (or \u201cstaging\u201d for short), and is the designer of several systems based on it, including MetaOCaml, ConCoqtion, Java Mint, the Verilog Preprocessor, RT-FRP, and E-FRP. He contributed to several other programming languages innovations, including statically typed macros, tag elimination, tagless staged interpreters, event-driven functional reactive programming (E-FRP), the notion of exact software design, and gradual typing. Broadly construed, his research interests include cyber-physical systems, software engineering, programming languages, and domain-specific languages. He has chaired and edited the proceedings of several conferences and workshops published by Springer and by the ACM. According to Google Scholar, Taha\u2019s publications had over 3,000 citations and an h-index of 28.\nTaha has been the principal investigator on a number of research awards and contracts from the National Science Foundation (NSF), Semi-conductor Research Consortium (SRC), and Texas Advanced Technology Program (ATP). He received an NSF CAREER award to develop Java Mint. He founded the ACM Conference on Generative Programming and Component Engineering (GPCE), the IFIP Working Group on Program Generation (WG 2.11), and the Middle Earth Programming Languages Seminar (MEPLS). Taha chaired the 2009 IFIP Working Conference on Domain Specific Languages. He is the founding director of the Halmstad Colloquium.",
      "Key": "walidtaha",
      "Name": "Walid Taha",
      "URL": "https://www.cs.rice.edu/~taha/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/walidtaha/5c62fe33-b328-4432-838c-500743ef54c4/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "romangonzalez",
      "Name": "Román González"
    },
    {
      "Affiliation": "University of Hong Kong, China",
      "Key": "zhiyuanshi",
      "Name": "Zhiyuan Shi"
    },
    {
      "Affiliation": "INRIA",
      "Key": "timothybourke",
      "Name": "Timothy Bourke",
      "URL": "http://www.tbrk.org",
      "URLphoto": "http://conf.researchr.org/getProfileImage/timothybourke/747739f4-e5f1-4d96-957d-a9e98c1ba4f7/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "ruperthorlick",
      "Name": "Rupert Horlick"
    },
    {
      "Affiliation": "Kyoto University, Japan",
      "Key": "shinyakatsumata",
      "Name": "Shin-ya Katsumata",
      "URL": "http://www.kurims.kyoto-u.ac.jp/~sinya/index-e.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/shinyakatsumata/5e61dcb3-bb87-442b-bbd6-0f9a566f939d/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "ohadkammar1",
      "Name": "Ohad Kammar"
    },
    {
      "Affiliation": "",
      "Key": "calebcase",
      "Name": "Caleb Case"
    },
    {
      "Affiliation": "",
      "Key": "williambowman",
      "Name": "William Bowman"
    },
    {
      "Affiliation": "Microsoft Research, UK",
      "Bio": "Simon Peyton Jones, MA, MBCS, CEng, graduated from Trinity College Cambridge in 1980. After two years in industry, he spent seven years as a lecturer at University College London, and nine years as a professor at Glasgow University, before moving to Microsoft Research (Cambridge) in 1998. His main research interest is in functional programming languages, their implementation, and their application. He has led a succession of research projects focused around the design and implementation of production-quality functional-language systems for both uniprocessors and parallel machines. He was a key contributor to the design of the now-standard functional language Haskell, and is the lead designer of the widely-used Glasgow Haskell Compiler (GHC). He has written two textbooks about the implementation of functional languages.\nMore generally, he is interested in language design, rich type systems, software component architectures, compiler technology, code generation, runtime systems, virtual machines, and garbage collection. He is particularly motivated by direct use of principled theory to practical language design and implementation \u2013 that\u2019s one reason he loves functional programming so much.",
      "Key": "simonpaytonjones",
      "Name": "Simon Peyton Jones",
      "URLphoto": "http://conf.researchr.org/getProfileImage/simonpaytonjones/6128a22a-7036-4d52-90ac-2b1b5be66354/small.jpg"
    },
    {
      "Affiliation": "University College London, UK",
      "Bio": "I am a lecturer (assistant professor) at University College London.\nPrior to joining UCL, I was a postdoctoral researcher at IMDEA Software Institute (Madrid, Spain). I defended my PhD in 2012 in the DistriNet research group at the Department of Computer Sciences of KU Leuven (Belgium). Before that I received my MSc degree in Mathematics and Computer Science from Saint Petersburg State University (Russia) in 2008.\nMy research interests dwell in the area of the design and implementation of programming languages, including but not limited to program semantics, certified programming, concurrency and abstract interpretation. I am particularly interested in developing verification techniques and static analyses for higher-order and concurrent programs.",
      "Key": "ilyasergey",
      "Name": "Ilya Sergey",
      "URL": "http://ilyasergey.net",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ilyasergey/b2941c89-4843-4194-852a-81c8a30814fa/small.jpg"
    },
    {
      "Affiliation": "Rakuten, Inc.",
      "Key": "yosukehara",
      "Name": "Yosuke Hara",
      "URL": "http://about.me/yosukehara",
      "URLphoto": "http://conf.researchr.org/getProfileImage/yosukehara/61544089-2ea3-4149-b1e0-1f42aa3b8951/small.jpg"
    },
    {
      "Affiliation": "University of Birmingham, UK",
      "Key": "neelakantankrishnaswami",
      "Name": "Neelakantan R. Krishnaswami",
      "URL": "https://www.mpi-sws.org/~neelk/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/neelakantankrishnaswami/61a5e7f5-2edd-4b98-ad13-3295b01601ca/small.jpg"
    },
    {
      "Affiliation": "University of Utah",
      "Key": "matthewflatt",
      "Name": "Matthew Flatt",
      "URL": "http://www.cs.utah.edu/~mflatt/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthewflatt/61fb7ec4-16ed-42de-bbc5-597943a6c87e/small.jpg"
    },
    {
      "Affiliation": "University of Victoria",
      "Key": "jakobleben",
      "Name": "Jakob Leben",
      "URL": "http://mistic.finearts.uvic.ca/people/jakob-leben/"
    },
    {
      "Affiliation": "",
      "Key": "takashikato",
      "Name": "Takashi Kato"
    },
    {
      "Affiliation": "",
      "Key": "philipdexter",
      "Name": "Philip Dexter"
    },
    {
      "Affiliation": "Princeton University, USA",
      "Key": "zoeparaskevopoulou",
      "Name": "Zoe Paraskevopoulou",
      "URL": "https://zoep.github.io/"
    },
    {
      "Affiliation": "Carnegie Mellon University",
      "Key": "umutacar",
      "Name": "Umut Acar"
    },
    {
      "Affiliation": "",
      "Key": "henriknilsson",
      "Name": "Henrik Nilsson"
    },
    {
      "Affiliation": "Uppsala University, Sweden",
      "Key": "johannesborgstrom",
      "Name": "Johannes Borgström",
      "URL": "http://johannes.borgstroem.org/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/johannesborgstrom/0437a8f1-262d-49c7-8e29-9fcb98748d31/small.jpg"
    },
    {
      "Affiliation": "Karlsruhe Institute of Technology",
      "Key": "joachimbreitner",
      "Name": "Joachim Breitner",
      "URL": "http://pp.ipd.kit.edu/~breitner/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/joachimbreitner/654ab64c-b0bc-4f0a-b9d2-d7803d69ae97/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "pablobuiras",
      "Name": "Pablo Buiras",
      "URL": "http://www.cse.chalmers.se/~buiras/"
    },
    {
      "Affiliation": "University of Genoa, France",
      "Key": "tommasopetrucciani",
      "Name": "Tommaso Petrucciani",
      "URL": "http://dibris.unige.it/petrucciani-tommaso",
      "URLphoto": "http://conf.researchr.org/getProfileImage/tommasopetrucciani/757aad12-2deb-4368-8683-be668c4bc957/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology, Sweden",
      "Key": "magnusomyreen",
      "Name": "Magnus O. Myreen"
    },
    {
      "Affiliation": "University of Chile, Chile",
      "Key": "etanter",
      "Name": "Éric Tanter",
      "URL": "http://pleiad.cl/people/etanter",
      "URLphoto": "http://conf.researchr.org/getProfileImage/etanter/9bd12954-3541-41ba-9fb4-9ca8e0701371/small.jpg"
    },
    {
      "Affiliation": "University of Pennsylvania",
      "Bio": "Benjamin Pierce is Henry Salvatori Professor of Computer and Information Science at the University of Pennsylvania and a Fellow of the ACM. His research interests include programming languages, type systems, language-based security, computer-assisted formal verification, differential privacy, and synchronization technologies. He is the author of the widely used graduate textbooks Types and Programming Languages and Software Foundations. He has served as co-Editor in Chief of the Journal of Functional Programming, as Managing Editor for Logical Methods in Computer Science, and as editorial board member of Mathematical Structures in Computer Science, Formal Aspects of Computing, and ACM Transactions on Programming Languages and Systems. He is also the lead designer of the popular Unison file synchronizer.",
      "Key": "benjamincpierce",
      "Name": "Benjamin C. Pierce",
      "URL": "http://www.cis.upenn.edu/~bcpierce/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/benjamincpierce/688c8954-7d00-4ed7-92d2-d787c46fd8f0/small.jpg"
    },
    {
      "Affiliation": "University of Glasgow",
      "Bio": "Natalia Chechina is a Research Fellow at the University of Glasgow. She received a PhD degree from Heriot-Watt University, UK in 2011. She then worked as a Research Associate at the University of Glasgow in the RELEASE project (2011-2015 A High-Level Paradigm for Reliable Large-Scale Server Software) sponsored by an EU FP7 STREP (287510).",
      "Key": "nataliachechina",
      "Name": "Natalia Chechina",
      "URL": "http://dcs.gla.ac.uk/~natalia/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nataliachechina/6898c8ee-e453-4770-9e3b-eb76fa0c595e/small.jpg"
    },
    {
      "Affiliation": "OCamlPro",
      "Key": "fabricelefessant",
      "Name": "Fabrice Le Fessant"
    },
    {
      "Affiliation": "MPI-SWS",
      "Key": "aaronturon",
      "Name": "Aaron Turon"
    },
    {
      "Affiliation": "Standard Chartered Bank and Chordify",
      "Bio": "I am currently a developer at Standard Chartered Bank. I\u2019m also co-founder at Chordify, responsible for the functional back-end.\nBefore joining Standard Chartered, I was a postdoctoral research assistant in the Programming Languages group at the Department of Computer Science of the University of Oxford, working on the Unifying Theories of Generic Programming project. Previously I was a PhD student at the Department of Information and Computing Sciences of Utrecht University in the Netherlands. My PhD topic was Real-Life Datatype Generic Programming, supervised by Johan Jeuring, Andres L&ouml;h, and Doaitse Swierstra.\nBefore that I graduated from Minho University in Computer Science and Systems Engineering (Licenciatura em Engenharia de Sistemas e Inform&aacute;tica).\nI have also been a Summer Student at CERN, an intern at Philips Research, and a research intern at Microsoft Research Cambridge.",
      "Key": "josepedromagalhaes",
      "Name": "José Pedro Magalhães",
      "URL": "http://dreixel.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/josepedromagalhaes/6a8abf68-ef0c-4fbc-ba43-dbd5405bcdb7/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research, UK",
      "Bio": "I am a Principal Researcher at Microsoft Research, Cambridge, where I manage Programming Principles and Tools. As a part-time position, I also hold the Chair in Computer Security and am a member of the Laboratory for Foundations of Computer Science and the Security and Privacy group in the School of Informatics in the University of Edinburgh. I convene the University of Edinburgh Microsoft Research Joint Initiative in Informatics. I participate in the Data Science PhD programme. My current research is on probabilistic programming for machine learning.",
      "Key": "andrewdgordon",
      "Name": "Andrew D. Gordon",
      "URL": "https://onedrive.live.com/view.aspx/adg?cid=c6149b019d236bf5",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andrewdgordon/6a7c06a4-cf70-4529-ad02-55b979e93f82/small.jpg"
    },
    {
      "Affiliation": "Ambiata",
      "Key": "markhibberd",
      "Name": "Mark Hibberd",
      "URL": "http://mth.io",
      "URLphoto": "http://conf.researchr.org/getProfileImage/markhibberd/6c2bcdd1-96b3-45e5-85aa-51efcd8d9f06/small.jpg"
    },
    {
      "Affiliation": "UPMC, France",
      "Key": "pierreevaristedagand",
      "Name": "Pierre-Evariste Dagand",
      "URL": "https://pages.lip6.fr/Pierre-Evariste.Dagand/#contact",
      "URLphoto": "http://conf.researchr.org/getProfileImage/pierreevaristedagand/6c4733a2-2ea6-4600-98c6-d38e4e96fac3/small.jpg"
    },
    {
      "Affiliation": "Utrecht University",
      "Bio": "Dr. Jurriaan Hage is an assistant professor at Utrecht University. His work in programming technology is largely focused on two aspects: the optimisation of functional languages by means of type and effect systems, and type error diagnosis for strongly typed functional languages. He is currently the lead maintainer of the Helium compiler for learning Haskell. Besides these two focus areas, he is also active in programming plagiarism detection, legacy system modernization, and the (soft type) analysis of dynamic languages.",
      "Key": "jurriaanhage",
      "Name": "Jurriaan Hage",
      "URL": "http://foswiki.cs.uu.nl/foswiki/Hage/WebHome",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jurriaanhage/6c70858b-7831-4fd8-ad40-4798efd9f1d6/small.jpg"
    },
    {
      "Affiliation": "University of New South Wales",
      "Key": "gabrielekeller",
      "Name": "Gabriele Keller",
      "URL": "https://www.cse.unsw.edu.au/~keller/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/gabrielekeller/6d6ca9ff-4423-4136-9776-43f25bd5ac29/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "atzevanderploeg",
      "Name": "Atze van der Ploeg"
    },
    {
      "Affiliation": "Google",
      "Key": "martinabadi",
      "Name": "Martin Abadi",
      "URL": "https://users.soe.ucsc.edu/~abadi/home.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/martinabadi/082202e6-c10a-45ed-b843-746524c2192b/small.jpg"
    },
    {
      "Affiliation": "Ahrefs Research",
      "Key": "igorpikovets",
      "Name": "Igor Pikovets",
      "URLphoto": "http://conf.researchr.org/getProfileImage/igorpikovets/6e4d4c23-25c7-45b6-88d1-b4d3b4b3cb49/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Key": "satnamsingh",
      "Name": "Satnam Singh",
      "URLphoto": "http://conf.researchr.org/getProfileImage/satnamsingh/703b6b15-d5bb-4536-8360-15bb2f4371d0/small.jpg"
    },
    {
      "Affiliation": "University of Virginia, USA",
      "Key": "westleyweimer",
      "Name": "Westley Weimer"
    },
    {
      "Affiliation": "",
      "Key": "dakotafisher",
      "Name": "Dakota Fisher"
    },
    {
      "Affiliation": "UNSW, Australia",
      "Bio": "Liam is a PhD student at UNSW Australia working on Trustworthy Systems projects with Data61 at CSIRO (formerly known as NICTA). His PhD work focuses on the use of linear typed languages to provide easy-to-reason-about semantics for formal verification of operating system components. More broadly, his research interests include automated proof and reasoning, particularly in the context of dependently typed programming languages, type inference, static analysis, and concurrency.",
      "Key": "liamoconnor",
      "Name": "Liam O'Connor",
      "URL": "http://liamoc.net",
      "URLphoto": "http://conf.researchr.org/getProfileImage/liamoconnor/62bc9dba-ffaf-41b7-94db-85d112d608ea/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "andreymokhov",
      "Name": "Andrey Mokhov"
    },
    {
      "Affiliation": "University of Kiel, Germany",
      "Key": "sandradylus",
      "Name": "Sandra Dylus"
    },
    {
      "Affiliation": "Carnegie Mellon University, USA",
      "Key": "guyblelloch",
      "Name": "Guy Blelloch"
    },
    {
      "Affiliation": "",
      "Key": "larrydiehl",
      "Name": "Larry Diehl"
    },
    {
      "Affiliation": "University of Maryland, USA",
      "Key": "davidvanhorn",
      "Name": "David Van Horn",
      "URL": "https://www.cs.umd.edu/~dvanhorn/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidvanhorn/767593d7-5911-4b7b-8895-518920ea97a7/small.jpg"
    },
    {
      "Affiliation": "Intel Labs",
      "Key": "hailiu",
      "Name": "Hai Liu"
    },
    {
      "Affiliation": "Aarhus University",
      "Key": "kaspersvendsen",
      "Name": "Kasper Svendsen"
    },
    {
      "Affiliation": "iCanMakeItBetter",
      "Key": "brucetate",
      "Name": "Bruce Tate",
      "URL": "http://icanmakeitbetter.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/brucetate/782673e1-ed27-4c86-935b-26812bc5f618/small.jpg"
    },
    {
      "Affiliation": "Indiana University",
      "Bio": "Amr Sabry is a Professor of Computer Science at Indiana University. His research interests are in the semantics, logical foundations, and implementations of programming languages. He has published on a range of themes including the typing, logical foundations, and programming applications of continuations and continuation-passing style, reasoning about monadic effects and staged computation, and programming language models of quantum computing. Together with Matthias Felleisen, Sabry wrote a series of papers on the use of continuations in the compilation of functional languages which includes one of the fifty most influential papers in the last twenty years of the ACM SIGPLAN Conference Programming Language Design and Implementation (PLDI). Together with Eugenio Moggi, Sabry gave what is considered the long-awaited definitive answer that monadic encapsulation of effects using rank-2 polymorphism is correct.",
      "Key": "amrsabry",
      "Name": "Amr Sabry",
      "URL": "http://www.cs.indiana.edu/~sabry/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/amrsabry/7843569a-6cf4-454d-a693-f07f4bf33d64/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "martinceresa",
      "Name": "Martín Ceresa"
    },
    {
      "Affiliation": "University of Utah, USA",
      "Key": "michaeldadams",
      "Name": "Michael D. Adams"
    },
    {
      "Affiliation": "",
      "Key": "renickbell",
      "Name": "Renick Bell",
      "URL": "http://www.renickbell.net/doku.php",
      "URLphoto": "http://conf.researchr.org/getProfileImage/renickbell/7a8eae2d-7872-493d-b999-ca6bb3aa2798/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "andreasloscher",
      "Name": "Andreas Löscher"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "ryanrnewton",
      "Name": "Ryan R. Newton",
      "URL": "http://www.cs.indiana.edu/~rrnewton/homepage.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ryanrnewton/7bd51bcb-5e54-4397-9ea7-abc910cfb02a/small.jpg"
    },
    {
      "Affiliation": "FireEye Dresden",
      "Key": "keikonakata",
      "Name": "Keiko Nakata"
    },
    {
      "Affiliation": "University of Chicago",
      "Bio": "John Reppy has been exploring issues in language design and implementation since the late 1980\u2019s, with a focus on higher-order, typed, functional languages. He is the inventor of Concurrent ML (CML), co-inventor of the Moby programming language, and has made major contributions to the Standard ML of New Jersey system. He is also the co-editor of the the Standard ML Basis Library specification. His current research focus is on the design and implementation of parallel-programming languages as part of the Manticore and Diderot projects.\nHe received his PhD from Cornell University in 1992 and worked at Bell Laboratories, Murray Hill for eleven years. He is currently a professor of Computer Science and a Senior Fellow of the Computation Institute at the University of Chicago. From August 2011 through August 2013, he served as a Program Director at the National Science Foundation where he helped start the Exploiting Parallelism and Scalability program (XPS).",
      "Key": "johnreppy",
      "Name": "John Reppy",
      "URL": "http://people.cs.uchicago.edu/~jhr/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/johnreppy/7c9e332e-ee11-4f40-82ee-8864028ba80b/small.jpg"
    },
    {
      "Affiliation": "University of California at San Diego, USA",
      "Bio": "I am an Associate Professor in the Department of Computer Science, Jacobs School of Engineering, at the University of California, San Diego, CA, USA.\nResearch Interests: I am interested in Programming Languages and Software Engineering, more specifically, in techniques for building reliable computer systems. My work draws from, combines and contributes to the areas of Model Checking, Program Analysis and Automated Deduction.",
      "Key": "ranjitjhala",
      "Name": "Ranjit Jhala",
      "URL": "http://goto.ucsd.edu/~rjhala/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ranjitjhala/7caf970e-726b-4661-be22-94492edb4cf7/small.jpg"
    },
    {
      "Affiliation": "University of Leeds",
      "Bio": "I have been at Leeds since 2001. Previously I was a lecturer in Mathematics and in Computer Science at Keele University. Even earlier I was a research assistant at the University of Strathclyde in Glasgow. I am a graduate of the University of Manchester where I studied Mathematics (BSc) and Computer Science (MSc, PhD). More recently (2010) after part-time study, I gained a BA (1st class) in Fine Art from Leeds College of Art. I have received funding from EPSRC and AHRC for projects on the interface between Art and Science. The experimentation with three-dimensional drawing was in collaboration with Claude Heath and Patricia Cain.",
      "Key": "johnstell",
      "Name": "John Stell",
      "URL": "http://www.comp.leeds.ac.uk/jgs/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/johnstell/7d072291-ad2c-451f-a38f-d026bb57a48e/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "yanchen",
      "Name": "Yan Chen",
      "URLphoto": "http://conf.researchr.org/getProfileImage/yanchen/7d451438-0124-4d7d-b42c-677f9413677b/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "johnlato",
      "Name": "John Lato",
      "URL": "http://johnlato.blogspot.cz/"
    },
    {
      "Affiliation": "CNRS PPS",
      "Key": "jeromevouillon",
      "Name": "Jerome Vouillon",
      "URL": "http://www.pps.univ-paris-diderot.fr/~vouillon/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jeromevouillon/7f821cea-72f3-4094-9e89-468a43ec4efd/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "yuhengxie",
      "Name": "Yuheng Xie"
    },
    {
      "Affiliation": "Jane Street",
      "Key": "leowhite",
      "Name": "Leo White"
    },
    {
      "Affiliation": "Tohoku University",
      "Bio": "Professor in Graduate School of Information Sciences, Tohoku University from May 2014. Main interest includes the theory and applications of programming languages and type systems in a variety of domains including process calculi, partial evaluation, security foundations, and functional programming.",
      "Key": "eijirosumii",
      "Name": "Eijiro Sumii",
      "URL": "http://www.kb.ecei.tohoku.ac.jp/~sumii/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/eijirosumii/80a91b58-b657-4288-90f2-a5d5986f7774/small.jpg"
    },
    {
      "Affiliation": "MIT",
      "Bio": "In February 2005 I submitted my thesis for my Master of Engineering degree. My master\u2019s research project is titled The Symmetriad. It is a software system for computing and presenting interesting, enlightening, and illuminating images of highly symmetric 3- and 4-dimensional objects. It has been a major enough part of my life and work that it has its own segment of this website.\nFor my current research, I am experimenting with embedding a probablistic inference system into Scheme. The basic idea is to allow one to represent probability distributions as \u201crandom\u201d programs. Such programs are the most expressive possible probabilistic formalism, and could surely be the basis of a good tool if one could put a good inference engine behind them. I\u2019ve worked out a reasonable interface to doing inference in discrete-only probability spaces this way, and published a prototype of it that does inference with depth-first search, and am now trying to figure out how to implement a machine that can track dependencies in its computations to do backtracking more intelligently.",
      "Key": "alexeyradul",
      "Name": "Alexey Radul",
      "URL": "http://web.mit.edu/~axch/www/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/alexeyradul/80b374ed-cd13-4c34-83c3-ace8f170128a/small.jpg"
    },
    {
      "Affiliation": "Verizon Labs",
      "Key": "runarolibjarnason",
      "Name": "Rúnar Óli Bjarnason",
      "URL": "http://blog.higher-order.com/about/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/runarolibjarnason/80b55114-945f-4892-9da7-bb9ff9d94fdc/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "enguerranddecorne",
      "Name": "Enguerrand Decorne"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "yosukefukuda",
      "Name": "Yosuke Fukuda"
    },
    {
      "Affiliation": "",
      "Key": "jacqueshenrijourdan",
      "Name": "Jacques-Henri Jourdan"
    },
    {
      "Affiliation": "",
      "Key": "mariomorohernandez",
      "Name": "Mario Moro Hernandez"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "trevormcdonell",
      "Name": "Trevor L. McDonell",
      "URL": "http://www.cse.unsw.edu.au/~tmcdonell"
    },
    {
      "Affiliation": "Well-Typed",
      "Key": "duncancoutts",
      "Name": "Duncan Coutts",
      "URL": "https://github.com/dcoutts",
      "URLphoto": "http://conf.researchr.org/getProfileImage/duncancoutts/85e5e271-df57-4716-87fb-77faac6f47f1/small.jpg"
    },
    {
      "Affiliation": "Data61, Australia",
      "Key": "yutakanagashima",
      "Name": "Yutaka Nagashima"
    },
    {
      "Affiliation": "McGill University, Canada",
      "Key": "davidthibodeau",
      "Name": "David Thibodeau"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "flavienbreuvart",
      "Name": "Flavien Breuvart"
    },
    {
      "Affiliation": "Stanford University",
      "Bio": "I am a fourth year PhD student at Stanford advised by David Mazi&egrave;res and John Mitchell. I am a proud member of the Secure Computer Systems group. I\u2019m interested in applying operating system mechanisms (hardware isolation, dynamic resource limits) to the design and construction of programming languages, and vice versa (type systems, formal verification, information flow control). I\u2019m a big fan of Haskell, a non-strict purely functional language.r.",
      "Key": "edwardzyang",
      "Name": "Edward Z. Yang",
      "URL": "http://ezyang.com",
      "URLphoto": "http://conf.researchr.org/getProfileImage/edwardzyang/870a9dc5-eac9-4b9d-8453-ea916df981b5/small.jpg"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "vincentprunet",
      "Name": "Vincent Prunet"
    },
    {
      "Affiliation": "UNSW, Australia",
      "Key": "zilinchen",
      "Name": "Zilin Chen"
    },
    {
      "Affiliation": "",
      "Key": "martenagren",
      "Name": "Marten Agren"
    },
    {
      "Affiliation": "iMinds, Belgium",
      "Key": "jespercockx",
      "Name": "Jesper Cockx",
      "URL": "https://distrinet.cs.kuleuven.be/people/jesper",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jespercockx/113f5ec5-aa52-443e-93e2-e7d8d136577b/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "koenclaessen",
      "Name": "Koen Claessen",
      "URL": "http://www.cse.chalmers.se/~koen/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/koenclaessen/893f5363-3c94-4f98-a251-06c021537878/small.jpg"
    },
    {
      "Affiliation": "Kochi University of Technology",
      "Key": "shigeyukisato",
      "Name": "Shigeyuki Sato"
    },
    {
      "Affiliation": "Tufts University",
      "Bio": "Kathleen Fisher is Professor in the Computer Science Department at Tufts. Previously, she was a Principal Member of the Technical Staff at AT&amp;T Labs Research, a Consulting Faculty Member in the Computer Science Department at Stanford University, and a program manager at DARPA where she started and managed the HACMS and PPAML programs. Kathleen\u2019s research focuses on advancing the theory and practice of programming languages and on applying ideas from the programming language community to the problem of ad hoc data management. The main thrust of her work has been in domain-specific languages to facilitate programming with massive amounts of ad hoc data, including the Hancock system for efficiently building signatures from massive transaction streams and the PADS system for managing ad hoc data. Recently, she has been exploring synergies between machine learning and programming languages and studying how to apply advances in programming languages to the problem of building more secure systems.\nKathleen is an ACM Fellow. She has served as program chair for FOOL, ICFP, CUFP, and OOPSLA and as General Chair for ICFP 2015. Kathleen is past Chair of the ACM Special Interest Group in Programming Languages (SIGPLAN), past Co-Chair of CRA\u2019s Committee on the Status of Women (CRA-W), and a former editor of the Journal of Functional Programming. She is an Associate Editor for TOPLAS.",
      "Key": "kathleenfisher",
      "Name": "Kathleen Fisher",
      "URL": "http://www.cs.tufts.edu/~kfisher",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kathleenfisher/04a1b289-f7fe-4e91-b686-6b34a7a45cb2/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research",
      "Key": "claudiorusso",
      "Name": "Claudio Russo"
    },
    {
      "Affiliation": "Tohoku University",
      "Key": "tomohirosasaki",
      "Name": "Tomohiro Sasaki"
    },
    {
      "Affiliation": "IBM Research Lab Zurich",
      "Key": "lydiaychen",
      "Name": "Lydia Y. Chen"
    },
    {
      "Affiliation": "Obsidian Systems LLC",
      "Key": "ryantrinkle",
      "Name": "Ryan Trinkle",
      "URL": "https://obsidian.systems/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ryantrinkle/8da7a5a4-ba97-4d65-bbad-058f3f5a93dc/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "antonekblad",
      "Name": "Anton Ekblad"
    },
    {
      "Affiliation": "University of Cambridge",
      "Bio": "I am a Post-doctoral Research Associate under the OCaml Labs initiative at the University of Cambridge Computer Lab, an 1851 Research Fellow and a Research Fellow at Darwin College, Cambridge. I am also a member of the Network and Operating Systems group.\nI am interested in the design and implementation of concurrent functional programming languages targeting scalable platforms such as many-core processors and compute clouds. My research spans programming models, compilers, static analysis, schedulers, threading systems, and memory management.\nBefore coming to Cambridge, I was a graduate student at Purdue University where I obtained an MS and a PhD degree in Computer Science under the supervision of the wonderful Prof. Suresh Jagannathan. At Purdue, I led the MultiMLton and Quelea projects. Before that, I obtained my BEng degree in Computer Science and Engineering from Anna University, India.",
      "Key": "kcsivaramakrishnan",
      "Name": "KC Sivaramakrishnan",
      "URL": "http://kcsrk.info/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kcsivaramakrishnan/8e3c8515-42d7-499a-9b77-9d8918acb314/small.jpg"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "wazimmohammedismail",
      "Name": "Wazim Mohammed Ismail",
      "URL": "https://www.linkedin.com/in/wazimismail",
      "URLphoto": "http://conf.researchr.org/getProfileImage/wazimmohammedismail/2bad9693-1619-4f6b-8fa6-549cabe6c3ba/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "marcpouzet",
      "Name": "Marc Pouzet"
    },
    {
      "Affiliation": "University of Kent, UK",
      "Key": "scottowens",
      "Name": "Scott Owens",
      "URL": "http://www.cl.cam.ac.uk/~so294/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/scottowens/8ea3498a-d167-4417-a1c8-bb0e57a23b5e/small.jpg"
    },
    {
      "Affiliation": "INESC-ID / Instituto Superior Técnico, Universidade de Lisboa",
      "Key": "vascovasconcelos",
      "Name": "Vasco Vasconcelos"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "andrzejfilinski",
      "Name": "Andrzej Filinski"
    },
    {
      "Affiliation": "",
      "Key": "mulei",
      "Name": "Mu Lei"
    },
    {
      "Affiliation": "University of Cambridge, UK",
      "Key": "anthonyfox",
      "Name": "Anthony Fox"
    },
    {
      "Affiliation": "EPFL",
      "Bio": "Nada Amin is a member of the Scala team at EPFL, where she studies type systems and hacks on programming languages. She has contributed to Clojure\u2019s core.logic and Google\u2019s Closure compiler. She\u2019s loved helping others learn to program ever since tutoring SICP as an undergraduate lab assistant at MIT.",
      "Key": "nadaamin",
      "Name": "Nada Amin",
      "URL": "http://people.epfl.ch/nada.amin",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nadaamin/90474e20-cab9-4520-944b-4ed731d34b58/small.jpg"
    },
    {
      "Affiliation": "",
      "Bio": ".NET/JS developer of eclectic background. After getting a degree in Linguistics, he lived and worked in Japan and Germany before going back to this home country, Spain. He\u2019s developed different kind of applications like CAT (Computer Aided Translation) software. His interest in functional programming and web development led him to create Fable, an F# to JS compiler, which has quickly become very popular in the F# community. International speaker, has presented about F# and his projects in the US, UK, Japan and Spain. Currently also learning about Machine Learning and finishing a book on F#. Twitter: @alfonsogcnunez",
      "Key": "alfonsogarciacaro",
      "Name": "Alfonso Garcia-Caro",
      "URL": "https://fable-compiler.github.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/alfonsogarciacaro/c7d1ea63-6ca5-4c1a-9e68-c298d9e148a3/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "matthewwindsor",
      "Name": "Matthew Windsor"
    },
    {
      "Affiliation": "Microsoft Research India",
      "Key": "aseemrastogi",
      "Name": "Aseem Rastogi",
      "URL": "https://www.microsoft.com/en-us/research/people/aseemr/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/aseemrastogi/60be692f-f2e1-4eef-ac4a-85f7accdba8e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "yutakamaruyama",
      "Name": "Yutaka Maruyama"
    },
    {
      "Affiliation": "University of Massachusetts Lowell",
      "Key": "jaymccarthy1",
      "Name": "Jay McCarthy",
      "URL": "https://jeapostrophe.github.io/home/"
    },
    {
      "Affiliation": "University of St. Andrews, UK",
      "Key": "kevinhammond",
      "Name": "Kevin Hammond"
    },
    {
      "Affiliation": "",
      "Key": "daanleijen1",
      "Name": "Daan Leijen"
    },
    {
      "Affiliation": "University of Edinburgh",
      "Key": "jamesmckinna",
      "Name": "James McKinna",
      "URL": "http://homepages.inf.ed.ac.uk/jmckinna/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jamesmckinna/952fd786-6075-4473-a497-9731c712994d/small.jpg"
    },
    {
      "Affiliation": "University of Tsukuba",
      "Key": "yukiyoshikameyama",
      "Name": "Yukiyoshi Kameyama",
      "URL": "http://logic.cs.tsukuba.ac.jp/~kam/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/yukiyoshikameyama/9534d5f6-ee47-4a5e-ad7f-9397c6a4854a/small.jpg"
    },
    {
      "Affiliation": "Jet.com",
      "Key": "rachelreese",
      "Name": "Rachel Reese"
    },
    {
      "Affiliation": "Imperial College London, UK",
      "Bio": "Nobuko Yoshida is Professor of Computing. She has applied session types to Web services and programming languages, and introduced multiparty session types. Based on Multiparty session types, she established JBoss Red Hat Scribble project. She was awarded a CNRS visiting fellowship and visiting professorship at Paris VII. She is an editor of Journal of Logical Algebraic Methods in Programming, the chief editor of The Computer-aided Verification and Concurrency Column for EATCS Bulletin and the editor of Acta Informatica. She has served as a PC member for over 50 conferences in the past five years. She was regularly invited to give the key note talks \u2013 recent invited talks include 8th International Symposium on Trustworthy Global Computing (TGC 2013) at Buenos Aires and Joint 25th International Conference on Rewriting Techniques and Applications and 12th International Conference on Typed Lambda Calculi and Applications in 2014. She is a member of IFIP 2.4, and the JBoss Red Hat Savara and Scribble Projects. Her industry partners include Cognizant, Red Hat, VMware, Pivotal and Ocean Observatories Initiative.",
      "Key": "nobukoyoshida",
      "Name": "Nobuko Yoshida",
      "URL": "http://www.doc.ic.ac.uk/~yoshida/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nobukoyoshida/95f0da90-a4f5-4116-a942-682afbef42de/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research, Cambridge",
      "Bio": "I am a Senior Researcher at Microsoft Research in Cambridge, working in the Programming Principles and Tools Group.\nMy research ranges from proof theory and categorical logic, through semantics of programming languages and static analyses, to programming language design and compiler implementation. My thesis was on strictness analysis and I have since worked on topics that include term calculi and categorical models for linear logic, MLj and SML.NET (optimizing compilers from SML to the JVM and .NET with extensions for interlanguage working), Polyphonic C#/Cω (C# with join-calculus concurrency and XML/relational data constructs), monads and effect systems, models for dynamic allocation, and, most recently, compositional compiler correctness, mechanically formalized logics for reasoning about machine code programs, and reactive programming.\nI have a degree in Mathematics and a PhD in Computer Science, both from the University of Cambridge, and am a Fellow Commoner of Queens\u2019 College, where I was previously a Bye-Fellow. Before joining Microsoft, I was an SERC Research Fellow, an RA on an EU ESPRIT project and Senior Research Scientist at Persimmon IT, Inc. I have served as Editor-in-Chief of Computer Languages, Systems and Structures (Elsevier) and am currently a member of the Editorial Board of the Journal of Functional Programming (CUP).",
      "Key": "nickbenton",
      "Name": "Nick Benton",
      "URL": "http://research.microsoft.com/en-us/um/people/nick/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nickbenton/960043c6-4701-4d8c-b5eb-2eb0b04310db/small.jpg"
    },
    {
      "Affiliation": "Tohoku University, Japan",
      "Key": "ayumishinohara",
      "Name": "Ayumi Shinohara"
    },
    {
      "Affiliation": "Northeastern University",
      "Key": "matthiasfelleisen",
      "Name": "Matthias Felleisen",
      "URL": "http://www.ccs.neu.edu/home/matthias/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthiasfelleisen/3781509a-02f7-4e22-822d-04481501e833/small.jpg"
    },
    {
      "Affiliation": "iMinds, Belgium",
      "Bio": "My research interests are somewhat varied. I work on formalising properties of object-oriented and object-capability programming languages, specifically a property called effect parametricity. I am also interested in secure compilation and full abstraction properties and applying logical relations to prove them. Furthermore, I work on functional and dependently typed programming and programming languages. I have worked on a Haskell parsing library called grammar-combinators and have added instance arguments to the programming language/proof assistant Agda. I have also worked on information flow security, in particular a technique called secure multi-execution.",
      "Key": "dominiquedevriese",
      "Name": "Dominique Devriese",
      "URL": "https://distrinet.cs.kuleuven.be/people/dominiqu",
      "URLphoto": "http://conf.researchr.org/getProfileImage/dominiquedevriese/986ff5db-c4f8-4f24-8384-d3f6b6328da0/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Key": "jordanwalke",
      "Name": "Jordan Walke"
    },
    {
      "Affiliation": "",
      "Key": "piyushkurur",
      "Name": "Piyush Kurur"
    },
    {
      "Affiliation": "",
      "Key": "antalspectorzabusky",
      "Name": "Antal Spector-Zabusky"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "annasofiekiehn",
      "Name": "Anna Sofie Kiehn"
    },
    {
      "Affiliation": "",
      "Key": "colinrunciman",
      "Name": "Colin Runciman"
    },
    {
      "Affiliation": "",
      "Key": "hannesmehnert",
      "Name": "Hannes Mehnert"
    },
    {
      "Affiliation": "Technischen Universität Kaiserslautern",
      "Key": "annettebieniusa",
      "Name": "Annette Bieniusa",
      "URL": "http://www-user.rhrk.uni-kl.de/~bieniusa/"
    },
    {
      "Affiliation": "Ambiata",
      "Key": "nickhibberd",
      "Name": "Nick Hibberd"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "arthurchargueraud",
      "Name": "Arthur Charguéraud",
      "URL": "http://arthur.chargueraud.org/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/arthurchargueraud/9aed9f5a-138b-4fa1-93bd-f97952267417/small.jpg"
    },
    {
      "Affiliation": "University of New South Wales",
      "Key": "benlippmeier",
      "Name": "Ben Lippmeier",
      "URL": "http://benl.ouroborus.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/benlippmeier/9bb00e8c-9048-4fec-847b-6d7743f8fa62/small.jpg"
    },
    {
      "Affiliation": "VMware Research",
      "Key": "scottlystigfritchie",
      "Name": "Scott Lystig Fritchie",
      "URL": "http://www.snookles.com/scott/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/scottlystigfritchie/9bf47506-da0e-43b1-bc1b-6682ea6fcf36/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "seanmoss",
      "Name": "Sean Moss"
    },
    {
      "Affiliation": "Mozilla Research",
      "Bio": "I am a researcher at Mozilla, currently working on the servo parallel web browser project.\nI recently got my Ph.D. from the University of Chicago\u2018s Computer Science department, studying under Dr. John Reppy. My Master\u2019s paper was on the implementation of analysis and optimization passes in our parallel compiler, Manticore. My Ph.D. research was on how to add mutation safely and efficiently into a functional parallel programming language. I\u2019ve also been doing work on our runtime, garbage collector, and most recently some extensions to control-flow analysis. Before that, over the course of seven years I was a manager and a developer at Microsoft in the Visual Studio organization, working on next-generation software development tools technology out at the Redmond, WA offices.",
      "Key": "larsbergstrom",
      "Name": "Lars Bergstrom",
      "URL": "http://www.lars.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/larsbergstrom/9ca63362-26d0-4146-981e-0acd67948078/small.jpg"
    },
    {
      "Affiliation": "KnitYak",
      "Key": "fabienneserriere",
      "Name": "Fabienne Serrière",
      "URL": "http://fabienne.us/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/fabienneserriere/9cc167a5-c55d-43b3-957b-f4a936742a2a/small.jpg"
    },
    {
      "Affiliation": "MPI-SWS, Germany",
      "Key": "ezgicicek",
      "Name": "Ezgi Çiçek",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ezgicicek/12d59906-480a-4b13-b5e7-85bb743ea9f0/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "janbracker1",
      "Name": "Jan Bracker"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "cosminoancea",
      "Name": "Cosmin Oancea"
    },
    {
      "Affiliation": "Tama Art University",
      "Key": "akihirokubota",
      "Name": "Akihiro Kubota",
      "URL": "http://faculty.tamabi.ac.jp/html/en/23.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/akihirokubota/9e679f57-e1a3-453f-9d13-693e2df40f7e/small.jpg"
    },
    {
      "Affiliation": "University of Strathclyde",
      "Key": "conormcbride",
      "Name": "Conor McBride",
      "URL": "https://personal.cis.strath.ac.uk/conor.mcbride/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/conormcbride/9f046c72-4ce8-4396-b5a3-896faa3c5546/small.jpg"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "masakiiwasawa",
      "Name": "Masaki Iwasawa"
    },
    {
      "Affiliation": "Delft University of Technology",
      "Key": "elmervanchastelet",
      "Name": "Elmer van Chastelet",
      "URLphoto": "http://conf.researchr.org/getProfileImage/elmervanchastelet/55ccc9a8-327f-423a-ae20-01391b394a05/small.jpg"
    },
    {
      "Affiliation": "Data61, Australia",
      "Key": "japhethlim",
      "Name": "Japheth Lim"
    },
    {
      "Affiliation": "",
      "Key": "rudybraquehais",
      "Name": "Rudy Braquehais"
    },
    {
      "Affiliation": "",
      "Key": "carloslopezpampin",
      "Name": "Carlos Lopez Pampin"
    },
    {
      "Affiliation": "ThoughtWorks (UK) Ltd.",
      "Key": "chrisford",
      "Name": "Chris Ford",
      "URL": "https://www.thoughtworks.com/de/profiles/chris-ford"
    },
    {
      "Affiliation": "",
      "Key": "thomasrefis",
      "Name": "Thomas Réfis"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "filipsieczkowski",
      "Name": "Filip Sieczkowski",
      "URLphoto": "http://conf.researchr.org/getProfileImage/filipsieczkowski/798bba62-e2ef-466f-8548-ab13f479cd83/small.jpg"
    },
    {
      "Affiliation": "Chalmers University of Technology ",
      "Key": "alejandrorusso",
      "Name": "Alejandro Russo",
      "URL": "http://www.cse.chalmers.se/~russo/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/alejandrorusso/4304fb98-9fc5-4dd8-95c1-8fa2ca83765d/small.jpg"
    },
    {
      "Affiliation": "University of Strathclyde",
      "Key": "robertatkey",
      "Name": "Robert Atkey",
      "URL": "http://bentnib.org/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/robertatkey/a443368a-f3a2-4f73-b8ba-16a6e976b4d8/small.jpg"
    },
    {
      "Affiliation": "Erlang Solutions Ltd.",
      "Key": "viktoriafordos",
      "Name": "Viktória Fördős",
      "URLphoto": "http://conf.researchr.org/getProfileImage/viktoriafordos/a479b518-1019-4964-bdd6-52dfff98c989/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "shayannajd",
      "Name": "Shayan Najd"
    },
    {
      "Affiliation": "IMDEA Software Institute",
      "Bio": "My research is in the design and implementation of programming languages and logics for software verification. More specifically, I am interested in applying programming methodology to facilitate the construction of formal proofs in mathematics in general, and of program correctness in particular. My recent focus has been on designing methods for integrating programming with pointers, concurrency, and other important imperative features, into dependent type systems such as that of the proof assistant Coq. The goal of the integration is to leverage the proving power of Coq to obtain effective and scalable ways for reasoning about security and correctness of imperative programs.\nI am also interested in all other aspects of formal mathematics and programming language theory and applications related to compilation, optimization, semantics, interactive theorem proving, program extraction, automated deduction, decision procedures, program analysis and model checking.",
      "Key": "aleksandarnanevski",
      "Name": "Aleksandar Nanevski",
      "URL": "http://software.imdea.org/~aleks/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/aleksandarnanevski/a632b0b7-3813-4fc4-9622-b9341ae24ce1/small.jpg"
    },
    {
      "Affiliation": "INRIA",
      "Key": "karthikeyanbhargavan",
      "Name": "Karthikeyan Bhargavan"
    },
    {
      "Affiliation": "",
      "Key": "matthewle",
      "Name": "Matthew Le"
    },
    {
      "Affiliation": "MIT",
      "Bio": "Adam Chlipala finished his BS in computer science at Carnegie Mellon in 2003 and his PhD in computer science at UC Berkeley in 2007. Before starting at MIT, he was a postdoctoral fellow at Harvard. His research focuses on applications of formal logic to software development and analysis. One specialty area is building machine-checked mathematical proofs of correctness for programming tools like compilers and runtime systems, and he has a general interest in the pragmatics of machine-checked mathematics. He also works in the design and implementation of functional programming languages, as in the example of his new domain-specific programming language Ur/Web, which brings strong mathematical guarantees to the world of Web applications.",
      "Key": "adamchlipala",
      "Name": "Adam Chlipala",
      "URL": "http://adam.chlipala.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/adamchlipala/a7d25ff6-3cad-4dcc-8eae-b6c075b5a9ec/small.jpg"
    },
    {
      "Affiliation": "KU Leuven",
      "Bio": "Tom Schrijvers obtained his master degree in engineering (computer science) in 2001 at KU Leuven, Belgium.\nAs a research assistant of the Flemish Fund for Scientific Research (FWO), his research at the department of computer science of the KU Leuven centered around `Analyses, optimizations and extensions of Constraint Handling Rules\u2019. In 2005 he defended his Ph.D. with congratulations of the jury.\nFrom 2006 to 2010, he extended his research towards Functional Programming languages, as postdoctoral researcher of the FWO at the KU Leuven.\nFrom 2010 to 2014, he was head of the programming languages group at Ghent University.\nOn October 1, 2014, Tom Schrijvers re-joined KU Leuven as Research Professor (BOF ZAP) at the Department of Computer Science.",
      "Key": "tomschrijvers",
      "Name": "Tom Schrijvers",
      "URL": "http://people.cs.kuleuven.be/~tom.schrijvers/index.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/tomschrijvers/a98809e5-8f2b-4964-92df-cb2afcddec7a/small.jpg"
    },
    {
      "Affiliation": "Galois, Inc.",
      "Key": "iavordiatchki1",
      "Name": "Iavor Diatchki",
      "URL": "https://galois.com/team/iavor-diatchki/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/iavordiatchki1/a98c116d-b41d-4fac-96cb-c83ce3a61d28/small.jpg"
    },
    {
      "Affiliation": "University of Utah",
      "Key": "williamebyrd",
      "Name": "William E. Byrd",
      "URL": "http://webyrd.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/williamebyrd/aa1e29fc-357f-4d95-a530-54e03b327c80/small.jpg"
    },
    {
      "Affiliation": "University of Colorado, Boulder",
      "Bio": "I\u2019m interested in designing PL-based abstractions for settings in which humans and computers cooperate to create and process information. In particular, I\u2019ve co-created abstractions for Incremental Computing (See Adapton for details) and for Secure Multiparty Computation (See Wysteria for details).\nI am an assistant professor in the Department of Computer Science at University of Colorado Boulder. I am a co-director of the CU Programming Languages and Verification group (CUPLV). Before joining CU, I was a postdoc researcher working with Michael Hicks, Jeff Foster, David Van Horn and the PLUM group at the University of Maryland. As a PhD student, I was advised by Umut Acar.",
      "Key": "matthewahammer",
      "Name": "Matthew Hammer",
      "URL": "http://matthewhammer.org",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthewahammer/0f8bb7ab-bcde-4522-beb0-8fb15d612e1b/small.jpg"
    },
    {
      "Affiliation": "University of Cambridge",
      "Key": "tomaspetricek",
      "Name": "Tomas Petricek",
      "URL": "http://tomasp.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/tomaspetricek/aa2abc02-5c45-470a-9c6e-54673abbfb5b/small.jpg"
    },
    {
      "Affiliation": "Data61 at CSIRO, Australia",
      "Bio": "I did my PhD at the University of Cambridge, finishing in 1999. Since 2003, I have worked in Canberra, first with NICTA, and now with Data61 (the result of NICTA merging into CSIRO)",
      "Key": "michaelnorrish",
      "Name": "Michael Norrish",
      "URL": "http://ts.data61.csiro.au/people/?cn=Michael+Norrish",
      "URLphoto": "http://conf.researchr.org/getProfileImage/michaelnorrish/b4ee437b-353d-4dc9-8d90-ed1f71465fe6/small.jpg"
    },
    {
      "Affiliation": "University of Cambridge",
      "Bio": "Peter Sewell is Professor of Computer Science and EPSRC Leadership Fellow at the University of Cambridge Computer Laboratory. He held a Royal Society University Research Fellowship from 1999-2007, and took his PhD in Edinburgh in 1995, supervised by Robin Milner, after studying in Cambridge and Oxford. His research aims to build rigorous foundations for the engineering of real-world computer systems, to make them better-understood, more robust, and more secure. He and his colleagues have recently focussed on the relaxed-memory concurrency models of multiprocessors and concurrent languages (x86, ARM, IBM Power, and C/C++11), on verified compilation of concurrency (CompCertTSO and the concurrency compilation schemes from C/C++11 to x86, Power, and ARM), and on tools for applied semantics. He previously worked on various topics in programming languages, network protocols, security, and concurrency theory.",
      "Key": "petersewell",
      "Name": "Peter Sewell",
      "URL": "http://www.cl.cam.ac.uk/~pes20/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/petersewell/ac0067dd-f678-4b79-afe4-d46b690cb437/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "gerardoaragoncamarasa",
      "Name": "Gerardo Aragon-Camarasa"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "atsushiigarashi",
      "Name": "Atsushi Igarashi",
      "URL": "http://www.fos.kuis.kyoto-u.ac.jp/~igarashi/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/atsushiigarashi/ae991859-ca67-45f9-8593-f61d14290797/small.jpg"
    },
    {
      "Affiliation": "TypeLead",
      "Key": "rahulmuttineni",
      "Name": "Rahul Muttineni"
    },
    {
      "Affiliation": "MPI-SWS, Germany",
      "Key": "deepakgarg",
      "Name": "Deepak Garg",
      "URL": "http://www.mpi-sws.org/~dg",
      "URLphoto": "http://conf.researchr.org/getProfileImage/deepakgarg/2a70fd29-76c7-4771-98ce-7d8c591f4e69/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Key": "joshberdine",
      "Name": "Josh Berdine",
      "URLphoto": "http://conf.researchr.org/getProfileImage/joshberdine/b1c92682-62c8-42c1-8417-7cfac503f7e7/small.jpg"
    },
    {
      "Affiliation": "Kobe University",
      "Key": "junichiromakino",
      "Name": "Junichiro Makino"
    },
    {
      "Affiliation": "",
      "Key": "atsurohoshino",
      "Name": "Atsuro Hoshino"
    },
    {
      "Affiliation": "Tallinn University of Technology, Estonia",
      "Key": "tarmouustalu",
      "Name": "Tarmo Uustalu"
    },
    {
      "Affiliation": "INRIA",
      "Key": "gabrielscherer",
      "Name": "Gabriel Scherer",
      "URL": "http://gallium.inria.fr/~scherer/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/gabrielscherer/12b45ebf-b3bf-4d6e-a8eb-fb44283475f9/small.jpg"
    },
    {
      "Affiliation": "Kyushu Institute of Technology, Japan",
      "Key": "kentoemoto",
      "Name": "Kento Emoto",
      "URL": "http://www.ipl-lab.org/~emoto/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kentoemoto/b34f755c-18e4-4a0d-89a3-f7b10b0ff331/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "francescocesarini",
      "Name": "Francesco Cesarini"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "yuukinishida",
      "Name": "Yuuki Nishida"
    },
    {
      "Affiliation": "",
      "Key": "ryanyates",
      "Name": "Ryan Yates"
    },
    {
      "Affiliation": "National Taiwan University, Taiwan",
      "Key": "yuhsichiang",
      "Name": "Yu-Hsi Chiang"
    },
    {
      "Affiliation": "INRIA Rocquencourt",
      "Key": "lucmaranget",
      "Name": "Luc Maranget"
    },
    {
      "Affiliation": "Technical University of Denmark",
      "Bio": "I hold a PhD degree from BRICS, Department of Computer Science, University of Aarhus (AU). My supervisor was Olivier Danvy. During my education I visited Patrick Cousot\u2019s group at the D&eacute;partement d\u2019Informatique at Ecole Normale Sup&eacute;rieure in Paris and professor Norman Ramsey at the Division of Engineering and Applied Sciences at Harvard University. After graduating I moved to Rennes in France to work at IRISA / INRIA Rennes - Bretagne Atlantique with Thomas P. Jensen in the Lande (now: Celtique) project. In 2009 I was supported by the Carlsberg Foundation as a post-doc initially with John P. Gallagher in the PLIS group at CBIT, Roskilde University and later back at AU with Michael I. Schwartzbach. I was at AU for a total of five years as lecturer and researcher in the Programming Languages group, for the last 1.5 years with Anders M&oslash;ller at CASA. I now work with Hanne and Flemming Nielson in the Section for Formal Methods (formerly: Language-Based Technology) at DTU Compute at the Technical University of Denmark.",
      "Key": "janmidtgaard",
      "Name": "Jan Midtgaard",
      "URL": "http://janmidtgaard.dk/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/janmidtgaard/deb4aff7-1902-4d2f-8512-c8968c89e722/small.jpg"
    },
    {
      "Affiliation": "None",
      "Key": "danielszmulewicz",
      "Name": "Daniel Szmulewicz",
      "URL": "http://danielsz.github.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danielszmulewicz/f956fe2a-d12f-4c87-ab40-cd1aee1379dc/small.jpg"
    },
    {
      "Affiliation": "IHPC at A*STAR, Singapore",
      "Key": "yongkiamtan",
      "Name": "Yong Kiam Tan"
    },
    {
      "Affiliation": "INRIA",
      "Key": "ludoviccourtes",
      "Name": "Ludovic Courtès"
    },
    {
      "Affiliation": "University of Bristol, UK",
      "Key": "nicolaswu",
      "Name": "Nicolas Wu",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nicolaswu/b942d968-9bf7-4c15-9110-828a9d048664/small.jpg"
    },
    {
      "Affiliation": "University of Glasgow",
      "Key": "patrickmaier",
      "Name": "Patrick Maier"
    },
    {
      "Affiliation": "University of Oregon, USA",
      "Key": "zenaariola",
      "Name": "Zena M. Ariola"
    },
    {
      "Affiliation": "University of Cambridge, UK",
      "Key": "jeremyyallop",
      "Name": "Jeremy Yallop",
      "URL": "http://www.cl.cam.ac.uk/~jdy22/"
    },
    {
      "Affiliation": "Nagoya University",
      "Key": "jacquesgarrigue",
      "Name": "Jacques Garrigue",
      "URL": "http://www.math.nagoya-u.ac.jp/~garrigue/home.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jacquesgarrigue/bec96eef-5450-49a7-b90f-669ca609e0c7/small.jpg"
    },
    {
      "Affiliation": "McGill University, Canada",
      "Bio": "Brigitte Pientka is an Associate Professor in the School of Computer Science at McGill University, and leading the Computation and Logic group. She received her PhD from Carnegie Mellon University in 2003, and studied previously at the University of Edinburgh and Technical University of Darmstadt.",
      "Key": "brigittepientka",
      "Name": "Brigitte Pientka",
      "URL": "http://www.cs.mcgill.ca/~bpientka/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/brigittepientka/bfe09af5-4a41-4a4e-ac04-154edf90c7a6/small.jpg"
    },
    {
      "Affiliation": "Academia Sinica, Taiwan",
      "Key": "shinchengmu",
      "Name": "Shin-Cheng Mu",
      "URL": "http://www.iis.sinica.edu.tw/~scm/"
    },
    {
      "Affiliation": "Imperial College London",
      "Key": "tobyshaw1",
      "Name": "Toby Shaw",
      "URL": "http://www.doc.ic.ac.uk/~ts3314/"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "akimasamorihata",
      "Name": "Akimasa Morihata",
      "URL": "http://www.graco.c.u-tokyo.ac.jp/labs/morihata/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/akimasamorihata/c0883451-c2d1-42da-8e5d-d6e6699b8c8e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "ivanperez",
      "Name": "Ivan Perez"
    },
    {
      "Affiliation": "University of Glasgow",
      "Key": "johnmagnusmotron",
      "Name": "John Magnus Motron"
    },
    {
      "Affiliation": "Microsoft Research, Cambridge",
      "Key": "dimitriosvytiniotis",
      "Name": "Dimitrios Vytiniotis",
      "URLphoto": "http://conf.researchr.org/getProfileImage/dimitriosvytiniotis/727f6b72-4d78-4863-a3a8-9b15d45ce7ac/small.jpg"
    },
    {
      "Affiliation": "Tohoku University, Japan",
      "Key": "kazuyayaguchi",
      "Name": "Kazuya Yaguchi"
    },
    {
      "Affiliation": "FoAM / University of Leeds",
      "Key": "alexmclean",
      "Name": "Alex McLean",
      "URL": "http://slab.org/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/alexmclean/c13dfa03-2e59-45c8-bd3a-8fabfe30e6ca/small.jpg"
    },
    {
      "Affiliation": "University of Bologna, France",
      "Key": "ugodallago",
      "Name": "Ugo Dal Lago"
    },
    {
      "Affiliation": "Chalmers University of Technology",
      "Key": "patrikjansson",
      "Name": "Patrik Jansson",
      "URL": "https://www.chalmers.se/en/Staff/Pages/patrik-jansson.aspx",
      "URLphoto": "http://conf.researchr.org/getProfileImage/patrikjansson/14102235-c1e2-4283-8f8b-20cf67eb7d91/small.jpg"
    },
    {
      "Affiliation": "Commonwealth Bank, Australia",
      "Key": "jostberthold",
      "Name": "Jost Berthold",
      "URL": "http://jberthold.github.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jostberthold/c3f914a1-1bb4-492d-b74d-01369522b821/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM \u2013 a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.",
      "Key": "janvitek",
      "Name": "Jan Vitek",
      "URL": "http://janvitek.org",
      "URLphoto": "http://conf.researchr.org/getProfileImage/janvitek/c3fd972d-66cc-4957-a21b-ab216354322c/small.jpg"
    },
    {
      "Affiliation": "Université de Montréal",
      "Key": "marcfeeley",
      "Name": "Marc Feeley",
      "URL": "http://www.iro.umontreal.ca/~feeley/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/marcfeeley/c4944f85-a097-4217-bba9-704dad804d71/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "theolaurent",
      "Name": "Théo Laurent"
    },
    {
      "Affiliation": "Tsuru Capital",
      "Key": "fumiakikinoshita",
      "Name": "Fumiaki Kinoshita"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "kotarotakeda",
      "Name": "Kotaro Takeda"
    },
    {
      "Affiliation": "",
      "Key": "martindybdal",
      "Name": "Martin Dybdal"
    },
    {
      "Affiliation": "Kenji Rikitake Professional Engineer's Office",
      "Key": "kenjirikitake",
      "Name": "Kenji Rikitake",
      "URL": "http://www.k2r.org/kenji/profile",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kenjirikitake/c66d3f56-22a5-48b1-9027-01675805124b/small.jpg"
    },
    {
      "Affiliation": "Inria, France",
      "Key": "mikerainey",
      "Name": "Mike Rainey",
      "URL": "http://gallium.inria.fr/~rainey/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/mikerainey/c6ac4f11-4b95-4867-9d94-476a32e260fe/small.jpg"
    },
    {
      "Affiliation": "Aarhus University, Denmark",
      "Key": "larsbirkedal",
      "Name": "Lars Birkedal",
      "URL": "http://cs.au.dk/~birke/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/larsbirkedal/c7844c55-6fb8-44e5-ad4d-45b69ae0dea8/small.jpg"
    },
    {
      "Affiliation": "University of Edinburgh",
      "Bio": "I am a Royal Society University Research Fellow and Reader in the Laboratory for Foundations of Computer Science, University of Edinburgh, working in the areas of databases and programming languages.\nFrom September 2004 until October 2008 I was a postdoctoral research associate in the Database Group. I have also been involved with the Digital Curation Centre and during 2008-2009 I organized a Theme Program on Principles of Provenance for the eScience Institute.\nI earned my PhD in Computer Science at Cornell University in August 2004. From January to May 2003 I visited Cambridge University\u2019s Computer Laboratory. In the summer of 2001 I worked at Intertrust on a summer internship. I have a BS in Computer Science and Mathematics (May 1998) and MS in Mathematics (August 1998) from Carnegie Mellon University.\nBefore that I lived in Wisconsin, land of cheese.",
      "Key": "jamescheney",
      "Name": "James Cheney",
      "URL": "http://homepages.inf.ed.ac.uk/jcheney/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jamescheney/c7db8ce3-9700-443f-b342-5327b7f3946f/small.jpg"
    },
    {
      "Affiliation": "Radboud University Nijmegen",
      "Bio": "I joined Oxford University in October 2007. Before, I was a lecturer in the Institut f&uuml;r Informatik III at Universit&auml;t Bonn. I am the Chairman of Examiners on the MScs in Software Engineering and Software and Systems Security. I am the secretary of IFIP Working Group 2.8 (Functional Programming). I am a member of IFIP Working Group 2.1 (Algorithmic Languages and Calculi) and EAPLS. I am an editor of the Journal of Functional Programming. I also served as Guest Editor of the Special Issue on Generic Programming and the Special Issue on Functional Pearls. I am the organiser and chair of IFL 2012 (Oxford) and a member of the IFL steering committee. I was the general chair of ICFP 2007 and a member of the ICFP steering committee. I was the organizer and co-chair of the Workshop on Generic Programming 2008 (WGP \u201908). I was the organizer and chair of the Workshop on Generic Programming 2006 (WGP \u201906) and the Haskell Workshop 2001. I am also founder and chair of the WGP Steering Committee. I serve on the program committee of IFL 2010. I served on the Haskell 98 committee and on the program committees of WAAAPL\u201999, WGP 2000, ICFP 2000, Haskell 2000, WCGP \u201902, ICFP 2003, Haskell 2003, MetaOCaml workshop, Second MetaOCaml Workshop, POPL 2005, IFL 2006, TFP 2008, APLAS 2009, IFL 2009, PPDP 2009, TFP 2009 and IFL 2010. I co-organised the Spring School on Datatype-Generic Programming (Nottingham, 2006); I was also one of the lecturers. I lecturered at the Spring School on Generic and Indexed Programming (Oxford, March 2010), the Central European Functional Programming School (Komarno, Slovakia, May 2009) and the Summer School on Generic Programming (Oxford, August 2002).",
      "Key": "ralfhinze",
      "Name": "Ralf Hinze",
      "URL": "http://www.cs.ox.ac.uk/ralf.hinze/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ralfhinze/c7e27e5b-dcd4-4783-859a-9467ea6a543f/small.jpg"
    },
    {
      "Affiliation": "Eötvös Loránd University",
      "Key": "melindatoth",
      "Name": "Melinda Toth",
      "URLphoto": "http://conf.researchr.org/getProfileImage/melindatoth/c892d078-6b96-4725-986e-9ed7565e39f2/small.jpg"
    },
    {
      "Affiliation": "ENS Rennes, France",
      "Key": "davidpichardie",
      "Name": "David Pichardie",
      "URL": "http://www.irisa.fr/celtique/pichardie/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidpichardie/b0f30e9b-c1d3-4e4f-9923-4cf150989f86/small.jpg"
    },
    {
      "Affiliation": "KAIST",
      "Key": "sukyoungryu",
      "Name": "Sukyoung Ryu",
      "URL": "http://plrg.kaist.ac.kr/ryu",
      "URLphoto": "http://conf.researchr.org/getProfileImage/sukyoungryu/3bdcd232-f3d4-4610-9953-30b513926e54/small.jpg"
    },
    {
      "Affiliation": "Kyoto University",
      "Key": "natsukihosono",
      "Name": "Natsuki Hosono"
    },
    {
      "Affiliation": "McMaster University",
      "Key": "jacquescarette",
      "Name": "Jacques Carette",
      "URL": "http://www.cas.mcmaster.ca/~carette",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jacquescarette/cbb97dd2-6942-4eec-8a4a-bed915929a88/small.jpg"
    },
    {
      "Affiliation": "CNRS",
      "Key": "pierregeneves",
      "Name": "Pierre Geneves",
      "URL": "http://www.pierresoft.com/pierre.geneves",
      "URLphoto": "http://conf.researchr.org/getProfileImage/pierregeneves/ccc23112-5064-461f-a1bd-26c3dd5dfe46/small.jpg"
    },
    {
      "Affiliation": "University of Hong Kong, China",
      "Key": "joaoalpuim",
      "Name": "João Alpuim"
    },
    {
      "Affiliation": "University of Oregon, USA",
      "Key": "pauldownen",
      "Name": "Paul Downen"
    },
    {
      "Affiliation": "Portland State University",
      "Bio": "I am a Professor in the Department of Computer Science in the Maseeh College of Engineering &amp; Computer Science at Portland State University in Portland, Oregon, USA.\nMy research interests include all aspects of programming language design, implementation, and application. I am particularly interested in the use of advanced programming language technologies for systems programming, and in the development and application of expressive type and module systems that support the construction and certification of secure and reliable software systems.\nI am a member of IFIP Working Group 2.8 - Functional Programming.\nAt various times, I served as a PI for the HASP, Programatica and the Timber projects. (People still ask me about Timbot).\nI was the original designer and implementor of the Gofer and Hugs systems. But, after ten years\u2019 work, I no longer maintain or develop those systems.\nI live and work in Oregon in the USA. You\u2019d like it here too \u2026",
      "Key": "markjones",
      "Name": "Mark Jones",
      "URL": "http://web.cecs.pdx.edu/~mpj/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/markjones/cdebe836-fdeb-4fb5-9f2d-181462ee49cf/small.jpg"
    },
    {
      "Affiliation": "Goldsmiths University of London",
      "Key": "rebeccafiebrink",
      "Name": "Rebecca Fiebrink",
      "URL": "http://www.doc.gold.ac.uk/~mas01rf/Rebecca_Fiebrink_Goldsmiths/welcome.html",
      "URLphoto": "http://conf.researchr.org/getProfileImage/rebeccafiebrink/ceab7c3a-2bad-45d5-86bc-1ba4b3188315/small.jpg"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "kenfriislarsen",
      "Name": "Ken Friis Larsen",
      "URL": "http://www.diku.dk/~kflarsen/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/kenfriislarsen/cf12e6be-ff08-405d-94f4-0cada3ed7100/small.jpg"
    },
    {
      "Affiliation": "Northeastern University",
      "Bio": "(this profile is inactive, it is a duplicate.)",
      "Key": "gabrielscherer1",
      "Name": "Gabriel Scherer",
      "URLphoto": "http://conf.researchr.org/getProfileImage/gabrielscherer1/d070028f-9382-4b21-a799-054024c2d718/small.jpg"
    },
    {
      "Affiliation": "Dwango",
      "Key": "seitaroyuki",
      "Name": "Seitaro Yuki"
    },
    {
      "Affiliation": "iMinds - Distrinet, KU Leuven",
      "Bio": "Assistant professor at the iMinds-DistriNet research group at the Department of Computer Science, KU Leuven - University of Leuven, Belgium",
      "Key": "bartjacobs",
      "Name": "Bart Jacobs",
      "URL": "http://www.cs.kuleuven.be/~bartj/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/bartjacobs/03696ccf-6db6-4b61-8da5-b46289ec3d06/small.jpg"
    },
    {
      "Affiliation": "AppNexus",
      "Key": "paulkhuong",
      "Name": "Paul Khuong",
      "URL": "http://www.pvk.ca/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/paulkhuong/d290ef2a-1709-4bfd-8b52-43e1df60e626/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "satvikchauhan",
      "Name": "Satvik Chauhan"
    },
    {
      "Affiliation": "",
      "Key": "willsewell",
      "Name": "Will Sewell"
    },
    {
      "Affiliation": "Purdue & Oracle Labs",
      "Bio": "Tiark Rompf is an assistant professor at Purdue University and a researcher at Oracle Labs. His work focuses on runtime code generation, advanced compiler technology, and associated language support. From 2008 to 2014 he was a member of Martin Odersky\u2019s Scala team at EPFL where he developed the LMS compiler framework and made various contributions to the Scala language and toolchain (delimited continuations, efficient immutable data structures, compiler speedups, type system work).",
      "Key": "tiarkrompf",
      "Name": "Tiark Rompf",
      "URL": "http://tiarkrompf.github.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/tiarkrompf/d3fd69bf-73a6-4b68-8bd4-0d154207d7d7/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "abhishekanand",
      "Name": "Abhishek Anand"
    },
    {
      "Affiliation": "Fujitsu Limited",
      "Key": "hikaruinoue",
      "Name": "Hikaru Inoue"
    },
    {
      "Affiliation": "University of Rennes 1, France",
      "Bio": "I am professor in the computer science department of the University of Rennes 1, where I am in charge of the research master in computer science. I am a member of CELTIQUE, a joint project-team with Inria Rennes Bretagne Atlantique and the IRISA laboratory. \nMy research activities concern the formal verification using the Coq proof assistant of program transformations and semantic properties of programming languages, such as those found in the CompCert compiler and the Verasco static analyzer. I teach mechanized semantics (in Coq), functional programming (in OCaml), formal methods (using the Why3 tool), and software vulnerabilities.",
      "Key": "sandrineblazy",
      "Name": "Sandrine Blazy",
      "URL": "http://www.irisa.fr/celtique/blazy/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/sandrineblazy/bacd0031-1d22-476c-b6e5-fc58b1ab1177/small.jpg"
    },
    {
      "Affiliation": "University of Bordeaux",
      "Key": "davidjanin",
      "Name": "David Janin",
      "URL": "http://www.labri.fr/perso/janin/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/davidjanin/156a0aaf-9300-4ea3-8597-3cf733cda7b9/small.jpg"
    },
    {
      "Affiliation": "Facebook",
      "Bio": "Simon Marlow is a Software Engineer on Facebook\u2019s Site Integrity Infrastructure team in London. He is working on Haxl, a Haskell-based domain-specific language that is used by the teams fighting spam and malware. Simon is a co-author of the Glasgow Haskell Compiler, author of the book \u201cParallel and Concurrent Programming in Haskell\u201d, and has a string of research publications in functional programming, language design, compilers, and language implementation.",
      "Key": "simonmarlow",
      "Name": "Simon Marlow",
      "URL": "http://community.haskell.org/~simonmar/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/simonmarlow/d6f3111f-a2c1-4f7f-af4b-7744c18ea27e/small.jpg"
    },
    {
      "Affiliation": "Well-Typed LLP",
      "Bio": "Since 2010, I am a partner and Haskell Consultant at Well-Typed LLP.",
      "Key": "andresloh",
      "Name": "Andres Löh",
      "URL": "http://www.andres-loeh.de/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andresloh/d7276ea5-1b0c-4d50-9ffb-6cadab33f624/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "alexhixon",
      "Name": "Alex Hixon"
    },
    {
      "Affiliation": "Yale",
      "Bio": "Mark Santolucito is a Computer Science PhD student at Yale University, where he is studying programming languages with Ruzica Piskac. his recent work has focused on automatic program synthesis and programming-by-example in Haskell. These technologies help new programmers start making real programs more quickly and easily. Previously, hs had worked with Paul Hudak at Yale prior to his passing. This reserach focused on Functional Reactive Programming, a new paradigm for building interactive systems. Mark also graduated Cum Laude from Amherst College with a BA in both Computer Science and Music, where he was awarded the Best Computer Science Thesis Award in addition to the Lerner Piano Prize upon graduation.",
      "Key": "marksantolucito",
      "Name": "Mark Santolucito",
      "URL": "http://marksantolucito.com/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/marksantolucito/d85a4c81-2760-4217-9d0b-71cbb6ca306f/small.jpg"
    },
    {
      "Affiliation": "Tsuru Capital",
      "Key": "alexlang",
      "Name": "Alex Lang",
      "URL": "https://www.linkedin.com/in/alex-lang-309a6953"
    },
    {
      "Affiliation": "RIKEN",
      "Key": "hisashiyashiro",
      "Name": "Hisashi Yashiro"
    },
    {
      "Affiliation": "Data61 at CSIRO, Australia",
      "Key": "ramanakumar",
      "Name": "Ramana Kumar",
      "URL": "https://www.cl.cam.ac.uk/~rk436/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/ramanakumar/d929d436-8b41-4a14-b544-c55f5890380f/small.jpg"
    },
    {
      "Affiliation": "Indiana University, USA",
      "Key": "chungchiehshan",
      "Name": "Chung-chieh Shan",
      "URL": "http://homes.soic.indiana.edu/ccshan/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/chungchiehshan/5f1d6cc2-6e76-484a-bafe-85460ba4c6e5/small.jpg"
    },
    {
      "Affiliation": "Ecole Polytechnique Federale de Lausanne",
      "Bio": "Martin Odersky is a professor at EPFL in Lausanne, Switzerland. He has been working on programming languages for most of his career. He first studied structured and object-oriented programming as a PhD student of Niklaus Wirth, then fell in love with functional programming while working as a post doc at IBM and Yale. When Java came out, he started to add functional programming constructs to the new platform. This led to Pizza and GJ and eventually to Java 5 with generics. During that time he also developed javac, the current reference compiler for Java. \nOver the last 10 years, Martin worked on unifying object-oriented and functional programming in the Scala language. Scala quickly escaped from the research lab and became a popular open source tool and industrial language. He now oversees development of Scala as head of the programming group at EPFL and as chairman of the Typesafe company.",
      "Key": "martinodersky",
      "Name": "Martin Odersky",
      "URL": "http://lampwww.epfl.ch/~odersky/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/martinodersky/fc1dd696-d0d4-47cb-9d9a-bba012d98f9e/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "lennartaugustsson",
      "Name": "Lennart Augustsson"
    },
    {
      "Affiliation": "",
      "Key": "gergoerdi",
      "Name": "Gergo Erdi"
    },
    {
      "Affiliation": "Wesleyan University",
      "Key": "danlicata",
      "Name": "Dan Licata",
      "URL": "http://dlicata.web.wesleyan.edu",
      "URLphoto": "http://conf.researchr.org/getProfileImage/danlicata/dbade80f-98b4-4022-a768-aa16c35b21d1/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "andreasrossberg",
      "Name": "Andreas Rossberg",
      "URL": "http://www.mpi-sws.org/~rossberg/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/andreasrossberg/dd081052-55a0-4210-8ea6-3f2e1bd20d04/small.jpg"
    },
    {
      "Affiliation": "SmartStream Technologies",
      "Key": "steveshogren",
      "Name": "Steve Shogren",
      "URLphoto": "http://conf.researchr.org/getProfileImage/steveshogren/ddc1c08d-9abf-417d-88d9-97b6cfa349dc/small.jpg"
    },
    {
      "Affiliation": "University of Birmingham, UK",
      "Key": "michaelarntzenius",
      "Name": "Michael Arntzenius"
    },
    {
      "Affiliation": "University of Washington, USA",
      "Bio": "Dan Grossman is a Professor in the Department of Computer Science &amp; Engineering at the University of Washington where he has been a faculty member since 2003. He holds the J. Ray Bowen Professorship for Innovation in Engineering Education. He is his department\u2019s Associate Chair for Education.\nDan completed his Ph.D. at Cornell University and his undergraduate studies at Rice University. His research interests lie in the area of programming languages, ranging from theory to design to implementation, with a focus on improving software quality. In recent years, he has focused on better techniques for expressing, analyzing, and executing multithreaded programs. He has collaborated actively with researchers in several other disciplines of computer science, particularly computer architecture on problems at the hardware/software interface including approximate programming.\nDan has served on roughly thirty conference and workshop program committees. He has served on the ACM SIGPLAN Executive Committee and the Steering Committee for the ACM / IEEE-CS 2013 Computer Science Curriculum. He currently serves on the CRA Board and the ACM Education Board.\nDan is the instructor for a popular MOOC on undergraduate topics in programming languages and functional programming.\nDan is the proud and obsessed father of two sons, born December 2013 and September 2015. Prior to that all-encompassing-change, Dan enjoyed playing (poorly) and watching ice hockey, (road) bicycling, hiking, non-fiction, and enjoying good food, beer, and live theatre. Now he usually manages to read one book a month. Dan lives with a dog that was born on the streets of Brazil. Dan has never had a cavity.",
      "Key": "dangrossman",
      "Name": "Dan Grossman",
      "URL": "http://homes.cs.washington.edu/~djg/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/dangrossman/dff81f8f-ccc6-42cd-87f7-d5436a3c65e8/small.jpg"
    },
    {
      "Affiliation": "Active Group GmbH",
      "Key": "michaelsperber",
      "Name": "Michael Sperber",
      "URL": "http://deinprogramm.de/sperber/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/michaelsperber/e0008500-aa96-40e3-87f9-afe454474878/small.jpg"
    },
    {
      "Affiliation": "University of Freiburg, Germany",
      "Key": "peterthiemann",
      "Name": "Peter Thiemann",
      "URL": "http://www2.informatik.uni-freiburg.de/~thiemann/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/peterthiemann/e05f6038-4b5e-4c38-91bb-a460b5d8d756/small.jpg"
    },
    {
      "Affiliation": "Well-Typed LLP",
      "Key": "bengamari",
      "Name": "Ben Gamari"
    },
    {
      "Affiliation": "University of Tokyo, Japan",
      "Key": "keiichiwatanabe",
      "Name": "Keiichi Watanabe"
    },
    {
      "Affiliation": "University of Edinburgh, UK",
      "Key": "marcinszymczak",
      "Name": "Marcin Szymczak"
    },
    {
      "Affiliation": "Indiana University",
      "Key": "jasonhemann",
      "Name": "Jason Hemann",
      "URL": "http://hemann.pl"
    },
    {
      "Affiliation": "",
      "Key": "theophanehufschmitt",
      "Name": "Théophane Hufschmitt"
    },
    {
      "Affiliation": "University of Oxford, UK",
      "Bio": "I am Director of the Software Engineering Programme, which offers part-time professional Masters\u2019 degrees in Software Engineering and in Software and Systems Security. I am currently the Chair of Faculty of Computer Science. For the academic years 2008-2010 was also Deputy Director of the Computing Laboratory (now the Department of Computer Science). I am a fellow of Kellogg College. Before taking up this post in 1999, I held lectureships at Oxford Brookes University and the University of Auckland, New Zealand.",
      "Key": "jeremygibbons",
      "Name": "Jeremy Gibbons",
      "URL": "http://www.cs.ox.ac.uk/jeremy.gibbons/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/jeremygibbons/e4e44a9a-31d8-4104-abdc-4a28ecbd8618/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "michalchalmoviansky",
      "Name": "Michal Chalmovianský"
    },
    {
      "Affiliation": "Galois",
      "Key": "josecalderon",
      "Name": "Jose Calderon",
      "URLphoto": "http://conf.researchr.org/getProfileImage/josecalderon/e4e6ac0b-3f3d-4388-b08d-ee21e3ef5511/small.jpg"
    },
    {
      "Affiliation": "Google",
      "Key": "matthiasblume",
      "Name": "Matthias Blume",
      "URL": "http://people.cs.uchicago.edu/~blume/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthiasblume/e5c5dffb-152a-4fbc-8579-3b01d4de6c1a/small.jpg"
    },
    {
      "Affiliation": "Ambiata",
      "Key": "jacobstanley",
      "Name": "Jacob Stanley"
    },
    {
      "Affiliation": "University of Melbourne, Australia",
      "Key": "tobymurray",
      "Name": "Toby Murray",
      "URL": "http://people.eng.unimelb.edu.au/tobym",
      "URLphoto": "http://conf.researchr.org/getProfileImage/tobymurray/b22e1351-c7fc-420a-acef-492aadfce115/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "dmitrikosarev",
      "Name": "Dmitri Kosarev"
    },
    {
      "Affiliation": "IRIF, Université Paris Diderot",
      "Bio": "I am a PostDoc at Universit&eacute; Paris 7, in the PPS team of IRIF, working on the RAPIDO project with Alexis Saurin. Previously, I was a PostDoc at the School of Electronic Engineering and Computer Science at Queen Mary University, London, working under the supervision of Nikos Tzevelekos. I have done my PhD at the &Eacute;cole des Mines de Nantes in the Ascola Team, under the co-supervision of Nicolas Tabareau and Alexandre Miquel.",
      "Key": "guilhemjaber",
      "Name": "Guilhem Jaber",
      "URL": "http://guilhem.jaber.fr"
    },
    {
      "Affiliation": "University of Glasgow",
      "Key": "philtrinder",
      "Name": "Phil Trinder",
      "URL": "http://www.dcs.gla.ac.uk/~trinder/"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Key": "henrikurms",
      "Name": "Henrik Urms"
    },
    {
      "Affiliation": "Atlassian",
      "Key": "brianmckenna",
      "Name": "Brian McKenna",
      "URL": "https://brianmckenna.org/"
    },
    {
      "Affiliation": "KU Leuven, Belgium",
      "Key": "maciejpirog",
      "Name": "Maciej Piróg",
      "URL": "http://people.cs.kuleuven.be/~maciej.pirog/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/maciejpirog/6d35caec-bf73-4a63-b16b-9ee7f05d2a71/small.jpg"
    },
    {
      "Affiliation": "Microsoft Research",
      "Key": "cedricfournet",
      "Name": "Cedric Fournet",
      "URL": "http://research.microsoft.com/en-us/um/people/fournet/"
    },
    {
      "Affiliation": "University of Utah, USA",
      "Key": "thomasgilray",
      "Name": "Thomas Gilray"
    },
    {
      "Affiliation": "Tohoku University, Japan",
      "Key": "atsushiohori",
      "Name": "Atsushi Ohori"
    },
    {
      "Affiliation": "",
      "Key": "jenniferpaykin",
      "Name": "Jennifer Paykin"
    },
    {
      "Affiliation": "Intel Labs",
      "Key": "lindseykuper",
      "Name": "Lindsey Kuper",
      "URL": "http://www.cs.indiana.edu/~lkuper/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/lindseykuper/eceeaffb-2748-4078-aaf9-31e603ef1b68/small.jpg"
    },
    {
      "Affiliation": "Cisco Systems, Inc",
      "Key": "rkentdybvig",
      "Name": "R. Kent Dybvig",
      "URL": "http://www.cs.indiana.edu/~dyb/"
    },
    {
      "Affiliation": "Harvard University",
      "Key": "christosdimoulas",
      "Name": "Christos Dimoulas",
      "URL": "http://people.seas.harvard.edu/~chrdimo/"
    },
    {
      "Affiliation": "",
      "Key": "kazuhikoyamamoto",
      "Name": "Kazuhiko Yamamoto"
    },
    {
      "Affiliation": "Aarhus University, Denmark",
      "Key": "robbertkrebbers",
      "Name": "Robbert Krebbers",
      "URL": "http://robbertkrebbers.nl"
    },
    {
      "Affiliation": "Scheme Arts LLC",
      "Key": "shirokawai",
      "Name": "Shiro Kawai",
      "URL": "http://blog.practical-scheme.net/gauche",
      "URLphoto": "http://conf.researchr.org/getProfileImage/shirokawai/ef4ed47c-9214-4388-9400-2c751c83efd6/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "benjamincanou",
      "Name": "Benjamin Canou"
    },
    {
      "Affiliation": "Flensburg University of Applied Sciences, Germany",
      "Key": "janchristiansen",
      "Name": "Jan Christiansen"
    },
    {
      "Affiliation": "",
      "Key": "jamesmckinna1",
      "Name": "James McKinna"
    },
    {
      "Affiliation": "",
      "Key": "adamsandbergeriksson",
      "Name": "Adam Sandberg Eriksson"
    },
    {
      "Affiliation": "University of Strathclyde",
      "Key": "jameschapman",
      "Name": "James Chapman",
      "URL": "http://jmchapman.github.io/"
    },
    {
      "Affiliation": "Hendrix College",
      "Key": "brentyorgey",
      "Name": "Brent Yorgey",
      "URL": "http://ozark.hendrix.edu/~yorgey/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/brentyorgey/f4238cb4-a860-4baf-9f38-14aa0fe3ee75/small.jpg"
    },
    {
      "Affiliation": "University of Kiel, Germany",
      "Key": "nikitadanilenko",
      "Name": "Nikita Danilenko"
    },
    {
      "Affiliation": "Drexel University",
      "Bio": "I am currently an Assistant Professor in the Department of Computing at Drexel University.\nFrom September 2011 to August 2013, I was a post doc researcher with the Programming Principles and Tools group at Microsoft Research Cambridge (UK!).\nI received my Ph.D. in May 2011. I was jointly advised by Greg Morrisett and Matt Welsh.\nIn a former life, I resided in the SF Bay Area and worked for several tech companies, all of which are now defunct. Most of my work was related to handheld devices.",
      "Key": "geoffreymainland",
      "Name": "Geoffrey Mainland",
      "URL": "https://www.cs.drexel.edu/~mainland/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/geoffreymainland/f4d2954c-4691-4d0b-99fb-92b91fb0f773/small.jpg"
    },
    {
      "Affiliation": "INRIA",
      "Key": "jeankarimzinzindohoue",
      "Name": "Jean-Karim Zinzindohoue"
    },
    {
      "Affiliation": "University of Utah, USA",
      "Bio": "Associate Professor in Computing Science at the University of Utah. \nVisiting Associate Professor at the Harvard Medical School. \nStrategist in the Executive Office of the President at The White House.",
      "Key": "matthewmight",
      "Name": "Matthew Might",
      "URL": "http://matt.might.net/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/matthewmight/f660997f-e8d1-4f78-9a97-396d4da34536/small.jpg"
    },
    {
      "Affiliation": "University of Paris-Sud, France",
      "Key": "kimnguyen",
      "Name": "Kim Nguyễn"
    },
    {
      "Affiliation": "University of Torino",
      "Key": "marcoaldinucci",
      "Name": "Marco Aldinucci",
      "URL": "http://alpha.di.unito.it/marco-aldinucci/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/marcoaldinucci/f75f4ad2-1618-4c1f-b593-7ff067598640/small.jpg"
    },
    {
      "Affiliation": "iMinds, Belgium",
      "Key": "frankpiessens",
      "Name": "Frank Piessens"
    },
    {
      "Affiliation": "DARPA",
      "Bio": "Dr. Suresh Jagannathan joined DARPA in September 2013. His research interests include programming languages, compilers, program verification, and concurrent and distributed systems. Prior to joining DARPA, Dr. Jagannathan was a professor of computer science at Purdue University. He has also served as visiting faculty at Cambridge University, where he spent a sabbatical year in 2010; and as a senior research scientist at the NEC Research Institute in Princeton, N.J. Dr. Jagannathan has published more than 125 peer-reviewed conference and journal publications and has co-authored one textbook. He holds three patents. He serves on numerous program and steering committees, and is on the editorial boards of several journals. Dr. Jagannathan holds Doctor of Philosophy and Master of Science degrees in Electrical Engineering and Computer Science from the Massachusetts Institute of Technology. He earned a Bachelor of Science degree in Computer Science from the State University of New York, Stony Brook.",
      "Key": "sureshjagannathan",
      "Name": "Suresh Jagannathan",
      "URL": "https://www.cs.purdue.edu/homes/suresh/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/sureshjagannathan/f79bf74a-0796-4b58-bff0-6f4127919074/small.jpg"
    },
    {
      "Affiliation": "DIKU, University of Copenhagen",
      "Bio": "I try to make functional programs to really, really fast. It\u2019s not easy.",
      "Key": "troelshenriksen",
      "Name": "Troels Henriksen",
      "URL": "http://sigkill.dk",
      "URLphoto": "http://conf.researchr.org/getProfileImage/troelshenriksen/cc6f9601-4f83-467d-8063-85f9b13b9f6f/small.jpg"
    },
    {
      "Affiliation": "UC San Diego",
      "Bio": "I am a 5th year PhD student in Programming Systems group of UCSD, supervised by Ranjit Jhala. My research interests include static program verification and type systems. I am working on LiquidHaskell, a static verifier for Haskell based on Liquid Types.",
      "Key": "nikivazou",
      "Name": "Niki Vazou",
      "URL": "http://goto.ucsd.edu/~nvazou/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/nikivazou/8cc6ddec-154b-47e9-b40d-c66e78476391/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "davidkalopermersinjak",
      "Name": "David Kaloper-Mersinjak"
    },
    {
      "Affiliation": "Vertigo Technology (Australia)",
      "Key": "filmackay",
      "Name": "Fil Mackay"
    },
    {
      "Affiliation": "Cognitect",
      "Key": "carinmeier",
      "Name": "Carin Meier",
      "URL": "http://gigasquid.github.io/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/carinmeier/f974915c-cbda-4c48-9f62-7571f2f6ea04/small.jpg"
    },
    {
      "Affiliation": "University of Oregon, USA",
      "Key": "lukemaurer",
      "Name": "Luke Maurer"
    },
    {
      "Affiliation": "University of St. Andrews, UK",
      "Key": "susmitsarkar",
      "Name": "Susmit Sarkar",
      "URL": "www.cs.st-andrews.ac.uk/~ss265"
    },
    {
      "Affiliation": "University of Pennsylvania, USA",
      "Key": "christinerizkallah",
      "Name": "Christine Rizkallah",
      "URL": "http://people.mpi-inf.mpg.de/~crizkall/"
    },
    {
      "Affiliation": "MPI-SWS, Germany",
      "Key": "derekdreyer",
      "Name": "Derek Dreyer",
      "URL": "http://www.mpi-sws.org/~dreyer",
      "URLphoto": "http://conf.researchr.org/getProfileImage/derekdreyer/fa38ae17-ad43-4448-b1d5-20bb6e281012/small.jpg"
    },
    {
      "Affiliation": "Kochi University of Technology",
      "Key": "onofrecollruiz",
      "Name": "Onofre Coll Ruiz"
    },
    {
      "Affiliation": "Jane Street",
      "Bio": "I am a software developer at Jane Street Europe. I spend much of my time writing code in the Objective Caml language. In my spare time I am an active caver and also play the organ. Before moving to Jane Street I worked as a GNU toolchain developer for CodeSourcery, and previous to that as a Research Associate on the EPSRC-funded project Naming, Distribution, and Versioning: Programming Language Design and Implementation at the University of Cambridge Computer Laboratory. I hold MA and PhD degrees in Computer Science from Cambridge; my doctoral work was part of the FreshML research project that finished at the end of 2004.\nDuring my PhD work I developed the Fresh Objective Caml language, the successor to FreshML, which provides integrated support for programming with names. My PhD thesis, a runner-up in the BCS Distinguished Dissertation Awards 2005, goes into considerable detail about both pragmatic and theoretical aspects of this language.",
      "Key": "markshinwell",
      "Name": "Mark Shinwell",
      "URL": "http://www.three-tuns.net/mark/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/markshinwell/fbe66a14-690b-444c-8100-d01fc3a7d58d/small.jpg"
    },
    {
      "Affiliation": "IMDEA Software Institute",
      "Key": "anindyabanerjee",
      "Name": "Anindya Banerjee"
    },
    {
      "Affiliation": "Facebook",
      "Key": "bartosznitka",
      "Name": "Bartosz Nitka"
    },
    {
      "Affiliation": "University of St. Andrews, UK",
      "Bio": "Lecturer in Computer Science at the University of St Andrews",
      "Key": "edwinbrady",
      "Name": "Edwin Brady",
      "URL": "https://eb.host.cs.st-andrews.ac.uk/",
      "URLphoto": "http://conf.researchr.org/getProfileImage/edwinbrady/80bf0399-ea88-42fd-b3bb-b3462f9d69b2/small.jpg"
    },
    {
      "Affiliation": "",
      "Key": "kostissagonas",
      "Name": "Kostis Sagonas"
    },
    {
      "Affiliation": "University of Hong Kong, China",
      "Key": "brunooliveira",
      "Name": "Bruno C. d. S. Oliveira",
      "URL": "http://www.cs.hku.hk/research/profile.jsp?teacher=bruno",
      "URLphoto": "http://conf.researchr.org/getProfileImage/brunooliveira/fec3698f-899c-4d10-ba39-bcd0d777191c/small.jpg"
    },
    {
      "Affiliation": "SparkFund",
      "Key": "clairealvis",
      "Name": "Claire Alvis",
      "URLphoto": "http://conf.researchr.org/getProfileImage/clairealvis/ff399b72-fde9-459b-968a-79327f31f261/small.jpg"
    }
  ],
  "Sessions": [
    {
      "Abstract": "",
      "Day": "2016-09-20",
      "Items": [
        "icfp-2016-icfp-2016-report-presentation",
        "icfp-2016-icfp-2016-report-icfp-program-chair-report-and-contest-presentation"
      ],
      "Key": "e840fcc5-cb7a-4f80-ba47-2e8253897cf5",
      "Location": "Noh Theater",
      "Time": "17:40 - 18:10",
      "Title": "Reports: ICFP Program Chair Report and Contest Presentation",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "",
      "Day": "2016-09-21",
      "Items": [
        "icfp-2016-icfp-2016-report-src-awards-david-van-horn-",
        "icfp-2016-icfp-2016-report-icfp-2017-closing-icfp-2017-presentation"
      ],
      "Key": "a751306b-5791-4114-b653-a0416dfc1e4c",
      "Location": "Noh Theater",
      "Time": "17:40 - 18:10",
      "Title": "Reports: SRC Awards and Closing",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 will feature keynote talks by Martin Abadi, Sukyoung Ryu, and Dan Licata.",
      "Chairs": ["gabrielekeller"],
      "ChairsString": "Gabriele Keller",
      "Day": "2016-09-20",
      "Items": ["icfp-2016-keynote-talks-sukyoung-ryu"],
      "Key": "616b60c5-67e3-45ef-9c1a-7e5e8bcbe141",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "Keynote Talks: Keynote 2",
      "Type": "Keynote Talks"
    },
    {
      "Abstract": "ICFP 2016 will feature keynote talks by Martin Abadi, Sukyoung Ryu, and Dan Licata.",
      "Chairs": ["eijirosumii"],
      "ChairsString": "Eijiro Sumii",
      "Day": "2016-09-19",
      "Items": ["icfp-2016-keynote-talks-martin-abadi"],
      "Key": "8439cbc1-276a-4d5a-92be-9873a187b113",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "Keynote Talks: Keynote 1",
      "Type": "Keynote Talks"
    },
    {
      "Abstract": "Receptions and Banquet",
      "Day": "2016-09-20",
      "Items": ["icfp-2016-reception-reception"],
      "Key": "bdf55744-36fc-45f7-9920-707547bc08d2",
      "Location": "Hotel Nikko",
      "Time": "19:00 - 21:00",
      "Title": "Receptions: Banquet and SIGPLAN Awards",
      "Type": "Receptions"
    },
    {
      "Abstract": "Receptions and Banquet",
      "Day": "2016-09-19",
      "Items": ["icfp-2016-reception-reception"],
      "Key": "8db56729-6527-4b55-b2e1-dc17e75338a1",
      "Location": "Reception Hall 1",
      "Time": "18:30 - 20:30",
      "Title": "Receptions: Welcome Reception with SRC Posters",
      "Type": "Receptions"
    },
    {
      "Abstract": "ICFP 2016 will feature keynote talks by Martin Abadi, Sukyoung Ryu, and Dan Licata.",
      "Chairs": ["jacquesgarrigue1"],
      "ChairsString": "Jacques Garrigue",
      "Day": "2016-09-21",
      "Items": ["icfp-2016-keynote-talks-dan-licata"],
      "Key": "46906070-2bea-4f9c-8365-e196a7ca7624",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "Keynote Talks: Keynote 3",
      "Type": "Keynote Talks"
    },
    {
      "Abstract": "Receptions and Banquet",
      "Day": "2016-09-22",
      "Items": ["icfp-2016-reception-all-icfp-participants-are-welcome"],
      "Key": "52fb4ae3-3da0-44f2-923d-7ba69ecb8923",
      "Location": "Reception Hall 2",
      "Time": "18:30 - 20:30",
      "Title": "Receptions: Industrial Reception",
      "Type": "Receptions"
    },
    {
      "Abstract": "The home page for this workshop can be found here: \n \n http://scheme2016.snow-fort.org/",
      "Day": "2016-09-18",
      "Items": [
        "scheme-2016-papers-function-compose-type-cut-and-the-algebra-of-logic",
        "scheme-2016-papers-deriving-pure-functional-one-pass-operations-for-processing-tail-aligned-lists"
      ],
      "Key": "c5078805-7dd4-4e4f-a045-fdcc63bc1509",
      "Location": "Conference Room 2",
      "Time": "15:30 - 16:30",
      "Title": "Scheme 2016 - : Functional Programming",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "",
      "Day": "2016-09-18",
      "Items": [
        "tyde-2016-papers-opening",
        "tyde-2016-papers-welcome",
        "tyde-2016-papers-choose-your-own-derivative"
      ],
      "Key": "342a0417-5de1-493b-b553-4e81ff484930",
      "Location": "Conference Room 1",
      "Time": "09:15 - 10:15",
      "Title": "TyDe 2016 - : Session One",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "We proudly announce the SIGPLAN Programming Languages Mentoring Workshop at ICFP. The purpose of this mentoring workshop is to encourage senior undergraduate and beginning graduate students to pursue careers in programming language research. We are specifically interested in attracting groups who have traditionally not had the opportunity to participate in research in functional programming. This workshop will be a combination of learning about the work being done in several areas of programming language research and mentoring with respect to helping students prepare for graduate school and the rest of their career. We will bring together leaders in programming language research from academia and industry to give talks on the kind of research typically performed after obtaining a Ph.D. The workshop will engage students, specifically interested in programming language research, in a process of imagining how they might contribute to the world.\nWorkshop Focus\nOur effort is inspired by and modeled on the highly successful mentoring workshop associated with the POPL conference (PLMW). This workshop has occurred yearly since 2012; we\u2019d like to bring this opportunity to the functional programming community. Our focus for this workshop will be early career graduate students. In particular, we will design the program for the benefit of students entering their first or second year of graduate school. Undergraduates who are seriously considering an academic career will also benefit from the workshop.\nApplications (Due July 1st)\nTo apply for support to come to PLMW and ICFP, please login to hotcrp. Note that hotcrp is not designed precisely for scholarship applications: \n \n please click \u201cstart new submission\u201d. \n please put \u201ctitle\u201d into the \u201ctitle\u201d field and list yourself as the only \u201cauthor\u201d. \n please fill out the rest of the fields as they appear in the form. \n\nFollow this link: https://plmw-icfp16.hotcrp.com/ to begin the application process. You do not need to complete the application in a single sitting; please complete it at your leisure, but finish by July 1st.\nPlease email the organizers if you have any questions.",
      "Chairs": ["amalahmed"],
      "ChairsString": "Amal Ahmed",
      "Day": "2016-09-18",
      "Items": [
        "plmw-icfp-2016-welcome-to-icfp-",
        "plmw-icfp-2016-rust-pl-research-in-industry"
      ],
      "Key": "0b4ef24c-6981-4cd5-97c5-b866f008a32c",
      "Location": "Conference Room 5",
      "Time": "09:15 - 10:15",
      "Title": "PLMW 2016 - : 1",
      "Type": "Talks"
    },
    {
      "Abstract": "",
      "Day": "2016-09-18",
      "Items": [
        "tyde-2016-papers-applications-of-applicative-proof-search",
        "tyde-2016-papers-liberating-effects-with-rows-and-handlers"
      ],
      "Key": "00b7ab0a-22c3-452e-9de7-1111ac6ff5a3",
      "Location": "Conference Room 1",
      "Time": "14:00 - 15:00",
      "Title": "TyDe 2016 - : Session Three",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop can be found here: \n \n http://scheme2016.snow-fort.org/",
      "Day": "2016-09-18",
      "Items": [
        "scheme-2016-papers-opening-remarks",
        "scheme-2016-papers-a-verified-lisp-implementation-for-a-verified-theorem-prover"
      ],
      "Key": "dc257720-f53d-4c2b-9753-b9fd5bb4880c",
      "Location": "Conference Room 2",
      "Time": "09:15 - 10:15",
      "Title": "Scheme 2016 - : Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop can be found here: \n \n http://scheme2016.snow-fort.org/",
      "Day": "2016-09-18",
      "Items": [
        "scheme-2016-papers-miniadapton-a-minimal-implementation-of-incremental-computation-in-scheme",
        "scheme-2016-papers-nash-a-tracing-jit-for-extension-language",
        "scheme-2016-papers-ghosts-in-the-machine"
      ],
      "Key": "612a9a92-2d46-46c6-9f07-b085b884820f",
      "Location": "Conference Room 2",
      "Time": "10:45 - 12:15",
      "Title": "Scheme 2016 - : Scheming",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "We proudly announce the SIGPLAN Programming Languages Mentoring Workshop at ICFP. The purpose of this mentoring workshop is to encourage senior undergraduate and beginning graduate students to pursue careers in programming language research. We are specifically interested in attracting groups who have traditionally not had the opportunity to participate in research in functional programming. This workshop will be a combination of learning about the work being done in several areas of programming language research and mentoring with respect to helping students prepare for graduate school and the rest of their career. We will bring together leaders in programming language research from academia and industry to give talks on the kind of research typically performed after obtaining a Ph.D. The workshop will engage students, specifically interested in programming language research, in a process of imagining how they might contribute to the world.\nWorkshop Focus\nOur effort is inspired by and modeled on the highly successful mentoring workshop associated with the POPL conference (PLMW). This workshop has occurred yearly since 2012; we\u2019d like to bring this opportunity to the functional programming community. Our focus for this workshop will be early career graduate students. In particular, we will design the program for the benefit of students entering their first or second year of graduate school. Undergraduates who are seriously considering an academic career will also benefit from the workshop.\nApplications (Due July 1st)\nTo apply for support to come to PLMW and ICFP, please login to hotcrp. Note that hotcrp is not designed precisely for scholarship applications: \n \n please click \u201cstart new submission\u201d. \n please put \u201ctitle\u201d into the \u201ctitle\u201d field and list yourself as the only \u201cauthor\u201d. \n please fill out the rest of the fields as they appear in the form. \n\nFollow this link: https://plmw-icfp16.hotcrp.com/ to begin the application process. You do not need to complete the application in a single sitting; please complete it at your leisure, but finish by July 1st.\nPlease email the organizers if you have any questions.",
      "Chairs": ["amalahmed"],
      "ChairsString": "Amal Ahmed",
      "Day": "2016-09-18",
      "Items": [
        "plmw-icfp-2016-basic-mechanics-of-operational-semantics",
        "plmw-icfp-2016-some-types-of-types"
      ],
      "Key": "f562c81d-609b-464f-87ed-51335f8f7c76",
      "Location": "Conference Room 5",
      "Time": "10:45 - 12:15",
      "Title": "PLMW 2016 - : 2",
      "Type": "Talks"
    },
    {
      "Abstract": "We proudly announce the SIGPLAN Programming Languages Mentoring Workshop at ICFP. The purpose of this mentoring workshop is to encourage senior undergraduate and beginning graduate students to pursue careers in programming language research. We are specifically interested in attracting groups who have traditionally not had the opportunity to participate in research in functional programming. This workshop will be a combination of learning about the work being done in several areas of programming language research and mentoring with respect to helping students prepare for graduate school and the rest of their career. We will bring together leaders in programming language research from academia and industry to give talks on the kind of research typically performed after obtaining a Ph.D. The workshop will engage students, specifically interested in programming language research, in a process of imagining how they might contribute to the world.\nWorkshop Focus\nOur effort is inspired by and modeled on the highly successful mentoring workshop associated with the POPL conference (PLMW). This workshop has occurred yearly since 2012; we\u2019d like to bring this opportunity to the functional programming community. Our focus for this workshop will be early career graduate students. In particular, we will design the program for the benefit of students entering their first or second year of graduate school. Undergraduates who are seriously considering an academic career will also benefit from the workshop.\nApplications (Due July 1st)\nTo apply for support to come to PLMW and ICFP, please login to hotcrp. Note that hotcrp is not designed precisely for scholarship applications: \n \n please click \u201cstart new submission\u201d. \n please put \u201ctitle\u201d into the \u201ctitle\u201d field and list yourself as the only \u201cauthor\u201d. \n please fill out the rest of the fields as they appear in the form. \n\nFollow this link: https://plmw-icfp16.hotcrp.com/ to begin the application process. You do not need to complete the application in a single sitting; please complete it at your leisure, but finish by July 1st.\nPlease email the organizers if you have any questions.",
      "Chairs": ["atsushiigarashi"],
      "ChairsString": "Atsushi Igarashi",
      "Day": "2016-09-18",
      "Items": [
        "plmw-icfp-2016-principle-and-practice-of-ocaml-type-debugger",
        "plmw-icfp-2016-unaccustomed-as-i-am-to-public-speaking"
      ],
      "Key": "9bb04981-588a-4e1b-b22c-3a24d4a5db4b",
      "Location": "Conference Room 5",
      "Time": "17:00 - 18:00",
      "Title": "PLMW 2016 - : 5",
      "Type": "Talks"
    },
    {
      "Abstract": "",
      "Day": "2016-09-18",
      "Items": [
        "tyde-2016-papers-generic-diff3-for-algebraic-datatypes",
        "tyde-2016-papers-programming-assistance-for-type-directed-programming",
        "tyde-2016-papers-generic-partially-static-data",
        "tyde-2016-papers-bidirectional-transformations-are-proof-relevant-bisimulations"
      ],
      "Key": "66e04730-7377-4cc1-8eb4-71b8adfa9ad0",
      "Location": "Conference Room 1",
      "Time": "10:45 - 12:15",
      "Title": "TyDe 2016 - : Session Two",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "",
      "Day": "2016-09-18",
      "Items": [
        "tyde-2016-papers-parameterized-extensible-effects-and-session-types",
        "tyde-2016-papers-an-agda-formalisation-of-the-transitive-closure-of-block-matrices"
      ],
      "Key": "0f7e0ad1-e879-4d05-8668-2a3c0a0ae30e",
      "Location": "Conference Room 1",
      "Time": "17:00 - 18:00",
      "Title": "TyDe 2016 - : Session Five",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "We proudly announce the SIGPLAN Programming Languages Mentoring Workshop at ICFP. The purpose of this mentoring workshop is to encourage senior undergraduate and beginning graduate students to pursue careers in programming language research. We are specifically interested in attracting groups who have traditionally not had the opportunity to participate in research in functional programming. This workshop will be a combination of learning about the work being done in several areas of programming language research and mentoring with respect to helping students prepare for graduate school and the rest of their career. We will bring together leaders in programming language research from academia and industry to give talks on the kind of research typically performed after obtaining a Ph.D. The workshop will engage students, specifically interested in programming language research, in a process of imagining how they might contribute to the world.\nWorkshop Focus\nOur effort is inspired by and modeled on the highly successful mentoring workshop associated with the POPL conference (PLMW). This workshop has occurred yearly since 2012; we\u2019d like to bring this opportunity to the functional programming community. Our focus for this workshop will be early career graduate students. In particular, we will design the program for the benefit of students entering their first or second year of graduate school. Undergraduates who are seriously considering an academic career will also benefit from the workshop.\nApplications (Due July 1st)\nTo apply for support to come to PLMW and ICFP, please login to hotcrp. Note that hotcrp is not designed precisely for scholarship applications: \n \n please click \u201cstart new submission\u201d. \n please put \u201ctitle\u201d into the \u201ctitle\u201d field and list yourself as the only \u201cauthor\u201d. \n please fill out the rest of the fields as they appear in the form. \n\nFollow this link: https://plmw-icfp16.hotcrp.com/ to begin the application process. You do not need to complete the application in a single sitting; please complete it at your leisure, but finish by July 1st.\nPlease email the organizers if you have any questions.",
      "Chairs": ["atsushiigarashi"],
      "ChairsString": "Atsushi Igarashi",
      "Day": "2016-09-18",
      "Items": [
        "plmw-icfp-2016-program-transformations-for-developing-efficient-and-correct-programs-with-ease",
        "plmw-icfp-2016-how-to-write-papers-so-people-can-read-them"
      ],
      "Key": "62853629-daab-4a6f-a1cd-628de86ad3c6",
      "Location": "Conference Room 5",
      "Time": "15:30 - 16:30",
      "Title": "PLMW 2016 - : 4",
      "Type": "Talks"
    },
    {
      "Abstract": "The home page for this workshop can be found here: \n \n http://scheme2016.snow-fort.org/",
      "Day": "2016-09-18",
      "Items": [
        "scheme-2016-papers-a-scheme-concurrency-library",
        "scheme-2016-papers-multi-purpose-web-framework-design-based-on-websocket-over-http-gateway"
      ],
      "Key": "3895fc57-9575-4595-a9db-41bd1f64ca9c",
      "Location": "Conference Room 2",
      "Time": "17:00 - 18:00",
      "Title": "Scheme 2016 - : Scheming",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "",
      "Day": "2016-09-18",
      "Items": [
        "tyde-2016-papers-programming-with-monadic-csp-style-processes-in-dependent-type-theory",
        "tyde-2016-papers-generic-lookup-and-update-for-infinitary-inductive-recursive-types"
      ],
      "Key": "f4c45c80-a058-4d8f-8414-f2e25214ff70",
      "Location": "Conference Room 1",
      "Time": "15:30 - 16:30",
      "Title": "TyDe 2016 - : Session Four",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop can be found here: \n \n http://scheme2016.snow-fort.org/",
      "Day": "2016-09-18",
      "Items": [
        "scheme-2016-papers-r7rs-update",
        "scheme-2016-papers-gnu-guix-the-functional-gnu-linux-distro-that-s-a-scheme-library"
      ],
      "Key": "d209b43f-6e1e-4fd5-972c-4b95ab3be910",
      "Location": "Conference Room 2",
      "Time": "14:00 - 15:00",
      "Title": "Scheme 2016 - : Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "We proudly announce the SIGPLAN Programming Languages Mentoring Workshop at ICFP. The purpose of this mentoring workshop is to encourage senior undergraduate and beginning graduate students to pursue careers in programming language research. We are specifically interested in attracting groups who have traditionally not had the opportunity to participate in research in functional programming. This workshop will be a combination of learning about the work being done in several areas of programming language research and mentoring with respect to helping students prepare for graduate school and the rest of their career. We will bring together leaders in programming language research from academia and industry to give talks on the kind of research typically performed after obtaining a Ph.D. The workshop will engage students, specifically interested in programming language research, in a process of imagining how they might contribute to the world.\nWorkshop Focus\nOur effort is inspired by and modeled on the highly successful mentoring workshop associated with the POPL conference (PLMW). This workshop has occurred yearly since 2012; we\u2019d like to bring this opportunity to the functional programming community. Our focus for this workshop will be early career graduate students. In particular, we will design the program for the benefit of students entering their first or second year of graduate school. Undergraduates who are seriously considering an academic career will also benefit from the workshop.\nApplications (Due July 1st)\nTo apply for support to come to PLMW and ICFP, please login to hotcrp. Note that hotcrp is not designed precisely for scholarship applications: \n \n please click \u201cstart new submission\u201d. \n please put \u201ctitle\u201d into the \u201ctitle\u201d field and list yourself as the only \u201cauthor\u201d. \n please fill out the rest of the fields as they appear in the form. \n\nFollow this link: https://plmw-icfp16.hotcrp.com/ to begin the application process. You do not need to complete the application in a single sitting; please complete it at your leisure, but finish by July 1st.\nPlease email the organizers if you have any questions.",
      "Chairs": ["robbyfindler"],
      "ChairsString": "Robby Findler",
      "Day": "2016-09-18",
      "Items": [
        "plmw-icfp-2016-analyzing-javascript-web-applications-in-the-wild-mostly-statically",
        "plmw-icfp-2016-introduction-to-dependent-types"
      ],
      "Key": "f10e7070-4422-4ddb-a597-079c93343c11",
      "Location": "Conference Room 5",
      "Time": "14:00 - 15:00",
      "Title": "PLMW 2016 - : 3",
      "Type": "Talks"
    },
    {
      "Abstract": "HOPE workshop aims at bringing together researchers interested in the design, semantics, implementation, and verification of higher-order effectful programs. It will be informal, consisting of invited talks, contributed talks on work in progress, and open-ended discussion sessions. \nGoals of the Workshop\nA recurring theme in many papers at ICFP, and in the research of many ICFP attendees, is the interaction of higher-order programming with various kinds of effects: storage effects, I/O, control effects, concurrency, etc. While effects are of critical importance in many applications, they also make it hard to build, maintain, and reason about one\u2019s code. Higher-order languages (both functional and object-oriented) provide a variety of abstraction mechanisms to help \u201ctame\u201d or \u201cencapsulate\u201d effects (e.g. monads, ADTs, ownership types, typestate, first-class events, transactions, Hoare Type Theory, session types, substructural and region-based type systems), and a number of different semantic models and verification technologies have been developed in order to codify and exploit the benefits of this encapsulation (e.g. bisimulations, step-indexed Kripke logical relations, higher-order separation logic, game semantics, various modal logics). But there remain many open problems, and the field is highly active.\nThe goal of the HOPE workshop is to bring researchers from a variety of different backgrounds and perspectives together to exchange new and exciting ideas concerning the design, semantics, implementation, and verification of higher-order effectful programs.\nWe want HOPE to be as informal and interactive as possible. The program will thus involve a combination of invited talks, contributed talks about work in progress, and open-ended discussion sessions. There will be no published proceedings, but participants will be invited to submit working documents, talk slides, etc. to be posted on the workshop\u2019s website: \n \n http://software.imdea.org/~aleks/hope2016/ \n\nInvited Talk\nEffective programming: bringing algebraic effects and handlers to OCaml\nLeo White, Jane Street\nAlgebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Day": "2016-09-18",
      "Items": ["hope-2016-papers-functional-models-of-full-ground-and-general-reference-cells"],
      "Key": "e843da50-3da7-46f4-93fc-b941455a69d7",
      "Location": "Conference Room 3",
      "Time": "17:00 - 17:30",
      "Title": "HOPE 2016 - : Session 4 (Semantics)",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "HOPE workshop aims at bringing together researchers interested in the design, semantics, implementation, and verification of higher-order effectful programs. It will be informal, consisting of invited talks, contributed talks on work in progress, and open-ended discussion sessions. \nGoals of the Workshop\nA recurring theme in many papers at ICFP, and in the research of many ICFP attendees, is the interaction of higher-order programming with various kinds of effects: storage effects, I/O, control effects, concurrency, etc. While effects are of critical importance in many applications, they also make it hard to build, maintain, and reason about one\u2019s code. Higher-order languages (both functional and object-oriented) provide a variety of abstraction mechanisms to help \u201ctame\u201d or \u201cencapsulate\u201d effects (e.g. monads, ADTs, ownership types, typestate, first-class events, transactions, Hoare Type Theory, session types, substructural and region-based type systems), and a number of different semantic models and verification technologies have been developed in order to codify and exploit the benefits of this encapsulation (e.g. bisimulations, step-indexed Kripke logical relations, higher-order separation logic, game semantics, various modal logics). But there remain many open problems, and the field is highly active.\nThe goal of the HOPE workshop is to bring researchers from a variety of different backgrounds and perspectives together to exchange new and exciting ideas concerning the design, semantics, implementation, and verification of higher-order effectful programs.\nWe want HOPE to be as informal and interactive as possible. The program will thus involve a combination of invited talks, contributed talks about work in progress, and open-ended discussion sessions. There will be no published proceedings, but participants will be invited to submit working documents, talk slides, etc. to be posted on the workshop\u2019s website: \n \n http://software.imdea.org/~aleks/hope2016/ \n\nInvited Talk\nEffective programming: bringing algebraic effects and handlers to OCaml\nLeo White, Jane Street\nAlgebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Day": "2016-09-18",
      "Items": [
        "hope-2016-papers-type-directed-compilation-of-row-typed-algebraic-effects",
        "hope-2016-papers-administrative-normal-form-continued-sharing-control-in-direct-style"
      ],
      "Key": "e8013e4e-57cd-466c-a8bd-1b21f5806842",
      "Location": "Conference Room 3",
      "Time": "15:30 - 16:30",
      "Title": "HOPE 2016 - : Session 3 (Compilation)",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "HOPE workshop aims at bringing together researchers interested in the design, semantics, implementation, and verification of higher-order effectful programs. It will be informal, consisting of invited talks, contributed talks on work in progress, and open-ended discussion sessions. \nGoals of the Workshop\nA recurring theme in many papers at ICFP, and in the research of many ICFP attendees, is the interaction of higher-order programming with various kinds of effects: storage effects, I/O, control effects, concurrency, etc. While effects are of critical importance in many applications, they also make it hard to build, maintain, and reason about one\u2019s code. Higher-order languages (both functional and object-oriented) provide a variety of abstraction mechanisms to help \u201ctame\u201d or \u201cencapsulate\u201d effects (e.g. monads, ADTs, ownership types, typestate, first-class events, transactions, Hoare Type Theory, session types, substructural and region-based type systems), and a number of different semantic models and verification technologies have been developed in order to codify and exploit the benefits of this encapsulation (e.g. bisimulations, step-indexed Kripke logical relations, higher-order separation logic, game semantics, various modal logics). But there remain many open problems, and the field is highly active.\nThe goal of the HOPE workshop is to bring researchers from a variety of different backgrounds and perspectives together to exchange new and exciting ideas concerning the design, semantics, implementation, and verification of higher-order effectful programs.\nWe want HOPE to be as informal and interactive as possible. The program will thus involve a combination of invited talks, contributed talks about work in progress, and open-ended discussion sessions. There will be no published proceedings, but participants will be invited to submit working documents, talk slides, etc. to be posted on the workshop\u2019s website: \n \n http://software.imdea.org/~aleks/hope2016/ \n\nInvited Talk\nEffective programming: bringing algebraic effects and handlers to OCaml\nLeo White, Jane Street\nAlgebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Day": "2016-09-18",
      "Items": [
        "hope-2016-papers-concurrent-data-structures-linked-in-time",
        "hope-2016-papers-growing-a-proof-assistant"
      ],
      "Key": "be7c78dc-0ced-41d6-9188-070ec8c3b105",
      "Location": "Conference Room 3",
      "Time": "14:00 - 15:00",
      "Title": "HOPE 2016 - : Session 2 (Verification)",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "HOPE workshop aims at bringing together researchers interested in the design, semantics, implementation, and verification of higher-order effectful programs. It will be informal, consisting of invited talks, contributed talks on work in progress, and open-ended discussion sessions. \nGoals of the Workshop\nA recurring theme in many papers at ICFP, and in the research of many ICFP attendees, is the interaction of higher-order programming with various kinds of effects: storage effects, I/O, control effects, concurrency, etc. While effects are of critical importance in many applications, they also make it hard to build, maintain, and reason about one\u2019s code. Higher-order languages (both functional and object-oriented) provide a variety of abstraction mechanisms to help \u201ctame\u201d or \u201cencapsulate\u201d effects (e.g. monads, ADTs, ownership types, typestate, first-class events, transactions, Hoare Type Theory, session types, substructural and region-based type systems), and a number of different semantic models and verification technologies have been developed in order to codify and exploit the benefits of this encapsulation (e.g. bisimulations, step-indexed Kripke logical relations, higher-order separation logic, game semantics, various modal logics). But there remain many open problems, and the field is highly active.\nThe goal of the HOPE workshop is to bring researchers from a variety of different backgrounds and perspectives together to exchange new and exciting ideas concerning the design, semantics, implementation, and verification of higher-order effectful programs.\nWe want HOPE to be as informal and interactive as possible. The program will thus involve a combination of invited talks, contributed talks about work in progress, and open-ended discussion sessions. There will be no published proceedings, but participants will be invited to submit working documents, talk slides, etc. to be posted on the workshop\u2019s website: \n \n http://software.imdea.org/~aleks/hope2016/ \n\nInvited Talk\nEffective programming: bringing algebraic effects and handlers to OCaml\nLeo White, Jane Street\nAlgebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Day": "2016-09-18",
      "Items": [
        "hope-2016-papers-effects-as-capabilities",
        "hope-2016-papers-a-logical-account-of-a-type-and-effect-system",
        "hope-2016-papers-simple-dependent-polymorphic-i-o-effects"
      ],
      "Key": "2b59bdb6-bb7e-46dd-a276-6e360d2a5d44",
      "Location": "Conference Room 3",
      "Time": "10:45 - 12:15",
      "Title": "HOPE 2016 - : Session 1 (Effects)",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "HOPE workshop aims at bringing together researchers interested in the design, semantics, implementation, and verification of higher-order effectful programs. It will be informal, consisting of invited talks, contributed talks on work in progress, and open-ended discussion sessions. \nGoals of the Workshop\nA recurring theme in many papers at ICFP, and in the research of many ICFP attendees, is the interaction of higher-order programming with various kinds of effects: storage effects, I/O, control effects, concurrency, etc. While effects are of critical importance in many applications, they also make it hard to build, maintain, and reason about one\u2019s code. Higher-order languages (both functional and object-oriented) provide a variety of abstraction mechanisms to help \u201ctame\u201d or \u201cencapsulate\u201d effects (e.g. monads, ADTs, ownership types, typestate, first-class events, transactions, Hoare Type Theory, session types, substructural and region-based type systems), and a number of different semantic models and verification technologies have been developed in order to codify and exploit the benefits of this encapsulation (e.g. bisimulations, step-indexed Kripke logical relations, higher-order separation logic, game semantics, various modal logics). But there remain many open problems, and the field is highly active.\nThe goal of the HOPE workshop is to bring researchers from a variety of different backgrounds and perspectives together to exchange new and exciting ideas concerning the design, semantics, implementation, and verification of higher-order effectful programs.\nWe want HOPE to be as informal and interactive as possible. The program will thus involve a combination of invited talks, contributed talks about work in progress, and open-ended discussion sessions. There will be no published proceedings, but participants will be invited to submit working documents, talk slides, etc. to be posted on the workshop\u2019s website: \n \n http://software.imdea.org/~aleks/hope2016/ \n\nInvited Talk\nEffective programming: bringing algebraic effects and handlers to OCaml\nLeo White, Jane Street\nAlgebraic effects were originally introduced to study the semantics of computational effects. With the addition of handlers they have become an exciting new programming construct for implementing such effects. Languages such as Eff have demonstrated that handlers can be used as a more composable alternative to monads for implementing effects in a pure language.\nOCaml provides many standard effects, such as mutable state, built into the language. Those effects not built into the language, for example concurrency, are traditionally implemented using monads. The first part of this talk will describe work to implement native algebraic effects for OCaml. The original motivation for this work was to provide built-in support for concurrency in OCaml without tying the language to a particular concurrency implementation. However, algebraic effects support many interesting examples beyond concurrency.\nAs with exceptions, algebraic effects risk being performed in a context where they will not be handled. Type systems designed to track the side-effects of expressions have been around for many years, and seem eminently suitable for ensuring all algebraic effects are appropriately handled. Recent developments in languages such as Koka have begun to produce effect systems that are genuinely usable, but they have yet to breakthrough into a more mainstream language. The second part of this talk will describe work to integrate an effect system into OCaml whilst maintaining backwards compatibility. This system both prevents effects from going unhandled and turns OCaml into a pure functional language: successfully tracking the purity of functions through their types.\nThe talk will discuss the interesting questions and challenges that still remain before this work is ready for release into OCaml.\nThis is joint work with Stephen Dolan, Matija Pretnar and KC Sivaramakrishnan.",
      "Day": "2016-09-18",
      "Items": [
        "hope-2016-papers-introduction",
        "hope-2016-papers-invited-talk"
      ],
      "Key": "e3819cc6-5977-4760-806c-332baca2d3e9",
      "Location": "Conference Room 3",
      "Time": "09:10 - 10:15",
      "Title": "HOPE 2016 - : Welcome and Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-the-state-of-ghc",
        "hiw-2016-papers-contributing-to-ghc"
      ],
      "Key": "0e629eca-8880-441d-96b9-6fd378a213a4",
      "Location": "Conference Room 1",
      "Time": "09:15 - 10:15",
      "Title": "HIW 2016 - : The State of GHC",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-towards-reliable-and-scalable-robot-communication",
        "erlang-2016-papers-erlang-latest-news",
        "erlang-2016-papers-farewell-closing"
      ],
      "Key": "9f69a9d2-a1f0-4001-9c6d-47bbc3da76dd",
      "Location": "Conference Room 2",
      "Time": "16:40 - 18:00",
      "Title": "Erlang 2016 - : Erlang in Robotics & Erlang Latest News",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-opening-welcome",
        "erlang-2016-papers-keynote"
      ],
      "Key": "8a4e2989-a5a5-4e83-bbf5-f93eeff10c82",
      "Location": "Conference Room 2",
      "Time": "09:15 - 10:15",
      "Title": "Erlang 2016 - : Invited Keynote Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-remote-ghci",
        "hiw-2016-papers-ghcvm-a-jvm-backend-for-ghc"
      ],
      "Key": "2a8c260e-632c-42f3-881c-aa2f6752992d",
      "Location": "Conference Room 1",
      "Time": "15:20 - 16:10",
      "Title": "HIW 2016 - : Backends for GHC",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-webassembly-high-speed-at-low-cost-for-everyone",
        "mlfamilyworkshop-2016-papers-extracting-from-f-to-c-a-progress-report"
      ],
      "Key": "e7eecbd2-d4ae-4018-9aa2-90cd7b4cd4a3",
      "Location": "Conference Room 1",
      "Time": "10:35 - 11:25",
      "Title": "ML 2016 - : Web",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-observing-the-consistency-of-distributed-systems",
        "erlang-2016-papers-making-everybody-comfortable-with-erlang-a-scada-system-for-thermal-control"
      ],
      "Key": "2866d1fe-1de7-495a-9b1e-4173e04a1adc",
      "Location": "Conference Room 2",
      "Time": "11:45 - 12:35",
      "Title": "Erlang 2016 - : Experience report presentations ",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-composable-caching-in-swift",
        "cufp-2016-papers-guix-scheme-as-a-uniform-os-admin-and-deployment-interface"
      ],
      "Key": "776d0868-d30c-4c7a-9fd0-c41df0901fa1",
      "Location": "Noh Theater",
      "Time": "15:20 - 16:10",
      "Title": "CUFP 2016 - : Talks 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-classes-for-the-masses",
        "mlfamilyworkshop-2016-papers-close-encounters-of-the-higher-kind-emulating-constructor-classes-in-standard-ml"
      ],
      "Key": "01467cf6-7012-4dd4-bb5a-11ee7489af20",
      "Location": "Conference Room 1",
      "Time": "15:20 - 16:10",
      "Title": "ML 2016 - : Classes",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Chairs": ["kenichiasai"],
      "ChairsString": "Kenichi Asai",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-welcome",
        "mlfamilyworkshop-2016-papers-invited-talk"
      ],
      "Key": "7999e04e-81f4-482e-bc2e-8005543b8a8b",
      "Location": "Conference Room 1",
      "Time": "09:10 - 10:15",
      "Title": "ML 2016 - : Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-eff-directly-in-ocaml",
        "mlfamilyworkshop-2016-papers-compiling-links-effect-handlers-to-the-ocaml-backend"
      ],
      "Key": "8eb9e4c9-f60c-49b3-a1ab-9c58271b5100",
      "Location": "Conference Room 1",
      "Time": "14:00 - 14:50",
      "Title": "ML 2016 - : Effects",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-automatic-generation-of-uml-sequence-diagrams-from-test-counterexamples",
        "erlang-2016-papers-towards-semi-automatic-data-type-translation-for-parallelism-in-erlang"
      ],
      "Key": "75ef0f50-9c5e-4e9d-971c-f09197874672",
      "Location": "Conference Room 2",
      "Time": "15:20 - 16:10",
      "Title": "Erlang 2016 - : Poster presentations",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-chaos-testing-with-f-and-azure",
        "cufp-2016-papers-building-a-web-application-with-continuation-monads"
      ],
      "Key": "44596651-24e5-41f6-a540-ddb6f19407a7",
      "Location": "Noh Theater",
      "Time": "11:45 - 12:35",
      "Title": "CUFP 2016 - : Talks 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-trees-that-grow",
        "hiw-2016-papers-lightning-talks"
      ],
      "Key": "97fa244b-0f9c-40f4-9eca-bfe9177f39f0",
      "Location": "Conference Room 1",
      "Time": "16:40 - 18:00",
      "Title": "HIW 2016 - : Trees and Lightning Talks",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-malfunctional-programming",
        "mlfamilyworkshop-2016-papers-ambiguous-pattern-variables",
        "mlfamilyworkshop-2016-papers-typed-embedding-of-relational-language-in-ocaml"
      ],
      "Key": "02584df5-17b5-40a5-bbd3-73c39ced6ac8",
      "Location": "Conference Room 1",
      "Time": "16:40 - 17:35",
      "Title": "ML 2016 - : Future",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Higher-order, Typed, Inferred, Strict: ACM SIGPLAN ML Family Workshop\nhttp://www.mlworkshop.org/ml2016\nThursday September 22, 2016, Nara, Japan\n(immediately following ICFP and preceding OCaml Users and Developers Workshop)\nML is a very large family of programming languages that includes Standard ML, OCaml, F#, SML#, Manticore, MetaOCaml, JoCaml, Alice ML, Dependent ML, Flow Caml, and many others. All ML languages share several fundamental traits, besides a good deal of syntax. They are higher-order, strict, mostly pure, and typed, with algebraic and other data types. Their type systems are derived from Hindley-Milner. The development of these languages has inspired a significant body of computer science research and influenced the design of many other programming languages, including Haskell, Scala and Clojure, Rust, ATS and many others.\nML workshops have been held in affiliation with ICFP continuously since 2005. This workshop specifically aims to recognise the entire extended ML family and to provide a forum for presenting and discussing common issues, both practical (compilation techniques, implementations of concurrency and parallelism, programming for the Web) and theoretical (fancy types, module systems, metaprogramming). The scope of the workshop includes all aspects of the design, semantics, theory, application, implementation, and teaching of the members of the ML family. We also encourage presentations from related languages (such as Scala, Rust, Nemerle, ATS, etc.), to exchange experience of further developing ML ideas.\nThe ML family workshop will be held in close coordination with the OCaml Users and Developers Workshop.",
      "Day": "2016-09-22",
      "Items": [
        "mlfamilyworkshop-2016-papers-compiling-with-continuations-and-llvm",
        "mlfamilyworkshop-2016-papers-sml-with-natural-join"
      ],
      "Key": "79043db5-af6d-4c18-a68e-1af6cc4d3dc7",
      "Location": "Conference Room 1",
      "Time": "11:45 - 12:25",
      "Title": "ML 2016 - : Implementation",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-a-dependent-haskell-triptych",
        "hiw-2016-papers-automatically-escaping-monads"
      ],
      "Key": "fb6a63ef-fb0f-43f9-92af-3b2ea9ed31d4",
      "Location": "Conference Room 1",
      "Time": "11:45 - 12:35",
      "Title": "HIW 2016 - : Types and Effects",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-backpack-to-work-towards-backpack-in-practice",
        "hiw-2016-papers-more-powerfull-ghc-plugins"
      ],
      "Key": "55c03338-0fda-4ec1-bd51-32b2c58ee7ee",
      "Location": "Conference Room 1",
      "Time": "10:35 - 11:25",
      "Title": "HIW 2016 - : Pluggability and Modularity",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-immutable-infrastructure-deployment-with-haskell",
        "cufp-2016-papers-developing-a-fast-and-durable-pub-sub-message-bus"
      ],
      "Key": "7829be26-8248-44e4-90d0-d6e6ab1ba383",
      "Location": "Noh Theater",
      "Time": "10:35 - 11:25",
      "Title": "CUFP 2016 - : Talks 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-baby-steps-to-unikernels-in-production",
        "cufp-2016-papers-hope-is-a-monad",
        "cufp-2016-papers-closing-remarks"
      ],
      "Key": "3106006a-642a-499d-8591-fae3755195f0",
      "Location": "Noh Theater",
      "Time": "16:40 - 18:00",
      "Title": "CUFP 2016 - : Talks 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-a-scalable-reliable-instant-messenger-using-the-sd-erlang-libraries",
        "erlang-2016-papers-crdts-for-the-configuring-distributed-erlang-systems"
      ],
      "Key": "a8d50bfe-518e-4c3b-aae4-befd6ccb710a",
      "Location": "Conference Room 2",
      "Time": "10:35 - 11:25",
      "Title": "Erlang 2016 - : Scalability and Distribution",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The Haskell implementors\u2019 workshop is a forum for those involved in implementing Haskell systems, infrastructure, libraries and tools, generally for people involved in implementing Haskell technology, to share their work and discuss future directions and collaborations with others.\nIn 2016, the Haskell Implementors Workshop will be co-located with ICFP 2016 in Nara.\nThe workshop does not have proceedings. Talks and/or demos are proposed by submitting an abstract, and selected by a small program committee. The workshop will be informal and interactive, with a flexible timetable and plenty of room for ad-hoc discussion, demos, and impromptu short talks.\nTraditionally, HIW is an open forum for people writing compilers, tools, or libraries, people with cool ideas for directions in which we should take the platform, proposals for new features to be implemented, and half-baked crazy ideas.",
      "Day": "2016-09-24",
      "Items": [
        "hiw-2016-papers-pita-tools-for-making-ghc-fast-again",
        "hiw-2016-papers-ghc-determinism"
      ],
      "Key": "52a61275-85a6-436a-b622-1db377da1e3c",
      "Location": "Conference Room 1",
      "Time": "14:00 - 14:50",
      "Title": "HIW 2016 - : The Engineering of GHC",
      "Type": "Accepted Talks"
    },
    {
      "Abstract": "The Erlang Workshop aims to bring together the open source, academic, and industrial communities of Erlang, to discuss technologies and languages related to Erlang. The Erlang model of concurrent programming has been widely emulated, for example by Akka in Scala, and even new programming languages were designed atop of the Erlang VM, such as Elixir. Therefore we would like to broaden the scope of the workshop to include systems like those mentioned above.\nThe workshop will enable participants to familiarize themselves with recent developments on new techniques and tools, novel applications, draw lessons from users\u2019 experiences and identify research problems and common areas relevant to the practice of Erlang, Erlang-like languages, functional programming, distribution, concurrency etc.",
      "Day": "2016-09-23",
      "Items": [
        "erlang-2016-papers-profiling-actor-utilization-and-communication-in-akka",
        "erlang-2016-papers-the-nifty-way-to-call-hell-from-heaven"
      ],
      "Key": "81e13302-9bbc-4b15-923b-7111a24b8adc",
      "Location": "Conference Room 2",
      "Time": "14:00 - 14:50",
      "Title": "Erlang 2016 - : Tools",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-opening-remarks",
        "cufp-2016-papers-keynote"
      ],
      "Key": "c9fe2cea-701e-40ad-a171-839fc591828a",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "CUFP 2016 - : Keynote",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "Functional Programming has been at the forefront of a new generation of programming technologies, and companies have been successfully utilizing functional programming to enable more flexible, robust, and effective software development.\nThe annual CUFP workshop is designed to serve the growing community of commercial users of functional programming. Practitioners meet and collaborate, language designers and users share ideas about the future of their languages, and experts share their expertise on practical functional programming.\nThe external web site is here: CUFP 2016",
      "Day": "2016-09-24",
      "Items": [
        "cufp-2016-papers-creating-an-approachable-haskell-like-dsl",
        "cufp-2016-papers-the-highs-and-lows-of-optimising-dsls"
      ],
      "Key": "36b59754-fe52-47a3-bc41-df398f462bfa",
      "Location": "Noh Theater",
      "Time": "14:00 - 14:50",
      "Title": "CUFP 2016 - : Talks 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-call-for-collaboration-computational-musicology-profit",
        "farm-2016-papers-demo-alda-a-text-based-music-composition-language"
      ],
      "Key": "d76e041b-1980-4abe-99c6-c50f03bddc3b",
      "Location": "Conference Room 2",
      "Time": "15:20 - 16:10",
      "Title": "FARM 2016 - : 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["davidduke"],
      "ChairsString": "David Duke",
      "Day": "2016-09-22",
      "Items": ["fhpc-2016-papers-discussion"],
      "Key": "22d72108-0cc2-4e75-aa80-749367af0631",
      "Location": "Conference Room 2",
      "Time": "17:05 - 18:00",
      "Title": "FHPC 2016 - : DIscussion",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-bithoven-g-del-encoding-of-chamber-music-and-functional-8-bit-audio-synthesis",
        "farm-2016-papers-structured-reactive-programming-with-polymorphic-temporal-tiles"
      ],
      "Key": "a4bbd0d4-0f70-42cf-81d0-0848b09b7493",
      "Location": "Conference Room 2",
      "Time": "09:15 - 10:15",
      "Title": "FARM 2016 - : 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["yukiyoshikameyama"],
      "ChairsString": "Yukiyoshi Kameyama",
      "Day": "2016-09-22",
      "Items": ["fhpc-2016-papers-s6raph-vertex-centric-graph-processing-framework-with-functional-interface"],
      "Key": "6c301d44-5a71-4fb9-86cf-3434f5c644cb",
      "Location": "Conference Room 2",
      "Time": "16:40 - 17:05",
      "Title": "FHPC 2016 - : Graph Processing",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["yukiyoshikameyama"],
      "ChairsString": "Yukiyoshi Kameyama",
      "Day": "2016-09-22",
      "Items": ["fhpc-2016-papers-invited-talk"],
      "Key": "96baab66-8548-49d3-aa3b-ed630ded8452",
      "Location": "Conference Room 2",
      "Time": "09:15 - 10:15",
      "Title": "FHPC 2016 - : Invited Talk",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["benlippmeier"],
      "ChairsString": "Ben Lippmeier",
      "Day": "2016-09-22",
      "Items": [
        "fhpc-2016-papers-low-level-functional-gpu-programming-for-parallel-algorithms",
        "fhpc-2016-papers-apl-on-gpus-a-tail-from-the-past-scribbled-in-futhark"
      ],
      "Key": "5a9780d0-fb07-46a3-8db9-0f9a40a05263",
      "Location": "Conference Room 2",
      "Time": "14:00 - 14:50",
      "Title": "FHPC 2016 - : GPUs",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["zhenjianghu"],
      "ChairsString": "Zhenjiang Hu",
      "Day": "2016-09-22",
      "Items": [
        "fhpc-2016-papers-icicle-write-once-run-once",
        "fhpc-2016-papers-using-fusion-to-enable-late-design-decisions-for-pipelined-computations"
      ],
      "Key": "38c99da0-64a6-4c38-a20f-911c729ba90b",
      "Location": "Conference Room 2",
      "Time": "10:35 - 11:25",
      "Title": "FHPC 2016 - : Domain Specific Languages",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["davidduke"],
      "ChairsString": "David Duke",
      "Day": "2016-09-22",
      "Items": [
        "fhpc-2016-papers-automatic-generation-of-efficient-codes-from-mathematical-descriptions-of-stencil-computation",
        "fhpc-2016-papers-jit-costing-adaptive-skeletons-for-performance-portability"
      ],
      "Key": "06924f6f-4248-4352-a877-3cbcd38f3b57",
      "Location": "Conference Room 2",
      "Time": "11:45 - 12:35",
      "Title": "FHPC 2016 - : Code Generation",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-arrp-a-functional-language-with-multi-dimensional-signals-and-recurrence-equations",
        "farm-2016-papers-demo-klangmeister"
      ],
      "Key": "b2f813e7-f9ce-4f25-b9a6-e91fb6564657",
      "Location": "Conference Room 2",
      "Time": "11:45 - 12:35",
      "Title": "FARM 2016 - : 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-demo-juniper-a-functional-reactive-programming-language-for-the-arduino",
        "farm-2016-papers-juniper-a-functional-reactive-programming-language-for-the-arduino"
      ],
      "Key": "9a471c50-ce5a-4d88-aeed-f88d13aea7d7",
      "Location": "Conference Room 2",
      "Time": "10:35 - 11:25",
      "Title": "FARM 2016 - : 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Chairs": ["renickbell"],
      "ChairsString": "Renick Bell",
      "Day": "2016-09-24",
      "Items": ["farm-2016-papers-farm-2016-performance-evening"],
      "Key": "bfb481f9-c6eb-40c6-8d6d-93c169af77e2",
      "Location": "Live House Beverly Hills Restaurant",
      "Time": "19:30 - 21:30",
      "Title": "FARM 2016 - : Performance Evening",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The 5th ACM SIGPLAN Workshop on Functional High-Performance Computing workshop aims at bringing together researchers exploring uses of functional (or more generally, declarative or high-level) programming technology in application domains where high performance is essential. The aim of the meeting is to enable sharing of results, experiences, and novel ideas about how high-level, declarative specifications of computationally challenging problems can serve as maintainable and portable code that approaches (or even exceeds) the performance of machine-oriented imperative implementations. \nAll aspects of performance critical programming and parallel programming are in-scope for the workshop, irrespective of hardware target. This includes both traditional large-scale scientific computing (HPC), as well as work targeting single node systems with SMPs, GPUs, FPGAs, or embedded processors. FHPC 2016 seeks to encourage a range of submissions, focussing on work in progress and facilitating early exchange of ideas and open discussion on innovative and/or emerging results. Experience reports are also welcome.\nMore information at the external website: FHPC 2016",
      "Chairs": ["hailiu"],
      "ChairsString": "Hai Liu",
      "Day": "2016-09-22",
      "Items": [
        "fhpc-2016-papers-streaming-nested-data-parallelism-on-multicores",
        "fhpc-2016-papers-polarized-data-parallel-data-flow"
      ],
      "Key": "bf4f6782-c853-4cd1-a83e-2c216774fd83",
      "Location": "Conference Room 2",
      "Time": "15:20 - 16:10",
      "Title": "FHPC 2016 - : Streaming and Dataflow",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-demo-voxelcad-a-collaborative-voxel-based-cad-tool",
        "farm-2016-papers-o-om-structured-functional-communication-between-computer-music-systems-using-osc-and-odot"
      ],
      "Key": "40703321-7fdb-45c4-b494-42451dc993ff",
      "Location": "Conference Room 2",
      "Time": "14:00 - 14:50",
      "Title": "FARM 2016 - : 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The ACM SIGPLAN International Workshop on Functional Art, Music, Modelling and Design (FARM) gathers together people who are harnessing functional techniques in the pursuit of creativity and expression.\nFunctional Programming has emerged as a mainstream software development paradigm, and its artistic and creative use is booming. A growing number of software toolkits, frameworks and environments for art, music and design now employ functional programming languages and techniques. FARM is a forum for exploration and critical evaluation of these developments, for example to consider potential benefits of greater consistency, tersity, and closer mapping to a problem domain.",
      "Day": "2016-09-24",
      "Items": [
        "farm-2016-papers-a-livecoding-semantics-for-functional-reactive-programming",
        "farm-2016-papers-demo-epimorphism"
      ],
      "Key": "9c8f91f1-4683-44ff-8374-47f057eaf422",
      "Location": "Conference Room 2",
      "Time": "16:40 - 18:00",
      "Title": "FARM 2016 - : 6",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-conex-establishing-trust-into-data-repositories",
        "ocaml-2016-papers-opam-builder-continuous-monitoring-of-opam-repositories"
      ],
      "Key": "7dc62793-f55c-4d52-9a18-1ec6fa301937",
      "Location": "Conference Room 1",
      "Time": "11:45 - 12:35",
      "Title": "OCaml 2016 - : Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-who-s-got-your-mail-mr-mime-",
        "ocaml-2016-papers-improving-the-ocaml-web-stack-motivations-and-progress",
        "ocaml-2016-papers-closing"
      ],
      "Key": "876f1edb-afc4-4c51-9d21-034fb9a02cd1",
      "Location": "Conference Room 1",
      "Time": "17:05 - 18:00",
      "Title": "OCaml 2016 - : Session 6",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-statistically-profiling-memory-in-ocaml",
        "ocaml-2016-papers-lock-free-programming-for-the-masses"
      ],
      "Key": "aebcbd84-c683-41e1-b6ba-2b370be6693e",
      "Location": "Conference Room 1",
      "Time": "10:40 - 11:30",
      "Title": "OCaml 2016 - : Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-welcome-mark-shinwell-",
        "ocaml-2016-papers-invited-talk",
        "ocaml-2016-papers-the-state-of-the-ocaml-platform-september-2016",
        "ocaml-2016-papers-learn-ocaml-an-online-learning-center-for-ocaml"
      ],
      "Key": "09101750-1c94-4bb3-93e0-a52fd8716acc",
      "Location": "Conference Room 1",
      "Time": "09:09 - 10:25",
      "Title": "OCaml 2016 - : Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-semantics-of-the-lambda-intermediate-language",
        "ocaml-2016-papers-generic-programming-in-ocaml"
      ],
      "Key": "95223bf4-e684-49d4-aa0a-f4aae67e3364",
      "Location": "Conference Room 1",
      "Time": "15:20 - 16:10",
      "Title": "OCaml 2016 - : Session 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-sundials-ml-interfacing-with-numerical-solvers",
        "ocaml-2016-papers-ocaml-inside-a-drop-in-replacement-for-libtls"
      ],
      "Key": "86a204f8-539a-46ae-b4c7-4c2f59abe8bf",
      "Location": "Conference Room 1",
      "Time": "14:00 - 14:50",
      "Title": "OCaml 2016 - : Session 4 ",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system and tools. Previous editions have been colocated with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, following the OCaml Meetings that ran until 2011.\nThe home page for this workshop can be found here: http://ocaml.org/meetings/ocaml/2016/",
      "Day": "2016-09-23",
      "Items": [
        "ocaml-2016-papers-inuit-library-from-printf-to-interactive-user-interfaces",
        "ocaml-2016-papers-ocp-lint-a-plugin-based-style-checker-with-semantic-patches",
        "ocaml-2016-papers-partial-evaluation-and-metaprogramming"
      ],
      "Key": "c66f6a9d-f2da-4e54-af71-b6c5dcf47c83",
      "Location": "Conference Room 1",
      "Time": "16:10 - 17:05",
      "Title": "OCaml 2016 - : Break and Poster Session",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-23",
      "Items": ["icfp-2016-tutorials-t8-transforming-data-into-gui-a-new-style-graphical-user-interface-library-for-haskell"],
      "Key": "4c786e0a-d13a-40b9-afb9-bf06fa538c00",
      "Location": "Conference Room 5",
      "Time": "14:00 - 17:30",
      "Title": "Tutorials: T8",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-22",
      "Items": ["icfp-2016-tutorials-t3-introduction-to-ocaml"],
      "Key": "cbb95466-c10e-403f-97f1-bd362b591eda",
      "Location": "Conference Room 6",
      "Time": "14:00 - 17:30",
      "Title": "Tutorials: T3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-23",
      "Items": ["icfp-2016-tutorials-t7-purescript-front-end-developement"],
      "Key": "2938db66-0c81-4beb-8d93-924541856262",
      "Location": "Conference Room 6",
      "Time": "14:00 - 17:30",
      "Title": "Tutorials: T7",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-22",
      "Items": ["icfp-2016-tutorials-t1-teaching-functional-programming"],
      "Key": "290ad426-e311-4a66-b501-2c57aa9897eb",
      "Location": "Conference Room 6",
      "Time": "09:15 - 12:45",
      "Title": "Tutorials: T1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-22",
      "Items": ["icfp-2016-tutorials-t2-extensible-effects-understanding-them-implementing-them-using-them"],
      "Key": "34be1a73-ba3a-4f93-883e-d9f7cb86bf82",
      "Location": "Conference Room 5",
      "Time": "09:15 - 12:45",
      "Title": "Tutorials: T2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-23",
      "Items": ["icfp-2016-tutorials-t6-liquidhaskell-verification-of-haskell-programs-with-smts"],
      "Key": "370f6dfe-bdc9-4e1a-8d4a-afe4d72d0276",
      "Location": "Conference Room 5",
      "Time": "09:15 - 12:45",
      "Title": "Tutorials: T6",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-22",
      "Items": ["icfp-2016-tutorials-http-cufp-org-2016-t4-andres-loh-generic-programming-html"],
      "Key": "2bdb74e1-b3ed-457c-a00c-24d3421dcd47",
      "Location": "Conference Room 5",
      "Time": "14:00 - 17:30",
      "Title": "Tutorials: T4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "CUFP tutorials are in-depth, hands-on sessions for learning functional programming languages, libraries and toolkits directly from the experts and leaders in their fields. We have a broad variety of tutorials, including OCaml, Scripting Haskell, LiquidHaskell, PureScript, Coq, F* for programming effectful programs, and Clojure.\nMore details can be found on the CUFP page",
      "Day": "2016-09-23",
      "Items": ["icfp-2016-tutorials-t5-fable-an-f-to-javascript-compiler"],
      "Key": "95dd92d1-d5a9-49d5-8a22-451ef2583fe8",
      "Location": "Conference Room 6",
      "Time": "09:15 - 12:45",
      "Title": "Tutorials: T5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Items": [
        "haskellsymp-2016-papers-non-recursive-make-considered-harmful-build-systems-at-scale",
        "haskellsymp-2016-papers-lazy-graph-processing-in-haskell"
      ],
      "Key": "3c4d0b98-76a6-4ce2-9592-368a71ffa479",
      "Location": "Noh Theater",
      "Time": "15:20 - 16:10",
      "Title": "Haskell 2016 - : Abstractions that Scale",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["johanjeuring"],
      "ChairsString": "Johan Jeuring",
      "Day": "2016-09-20",
      "Items": [
        "icfp-2016-papers-dynamic-witnesses-for-static-type-errors",
        "icfp-2016-papers-automatically-disproving-fair-termination-of-higher-order-functional-programs",
        "icfp-2016-papers-higher-order-ghost-state"
      ],
      "Key": "7090029f-cbd8-4ad4-ad74-2de5c23d2070",
      "Location": "Noh Theater",
      "Time": "13:30 - 14:45",
      "Title": "Research Papers: Session 6",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["alejandrorusso"],
      "ChairsString": "Alejandro Russo",
      "Day": "2016-09-21",
      "Items": [
        "icfp-2016-papers-talking-bananas-structural-recursion-for-session-types",
        "icfp-2016-papers-the-best-of-both-worlds-linear-functional-programming-without-compromise",
        "icfp-2016-papers-towards-context-free-session-types"
      ],
      "Key": "3227db39-c87a-4ca1-a9d2-aca33deb1b0b",
      "Location": "Noh Theater",
      "Time": "15:05 - 16:20",
      "Title": "Research Papers: Session 11",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Items": [
        "haskellsymp-2016-papers-the-key-monad-type-safe-unconstrained-dynamic-typing",
        "haskellsymp-2016-papers-supermonads-one-notion-to-bind-them-all"
      ],
      "Key": "4ff7201b-c8f4-4328-8bb5-8c51afb2b7de",
      "Location": "Noh Theater",
      "Time": "14:00 - 14:50",
      "Title": "Haskell 2016 - : Monads",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["akimasamorihata"],
      "ChairsString": "Akimasa Morihata",
      "Day": "2016-09-19",
      "Items": [
        "icfp-2016-papers-farms-pipes-streams-and-reforestation-reasoning-about-structured-parallel-processes-using-types-and-hylomorphisms",
        "icfp-2016-papers-dag-calculus-a-calculus-for-parallel-computation",
        "icfp-2016-papers-a-lambda-calculus-foundation-for-universal-probabilistic-programming",
        "icfp-2016-papers-deriving-a-probability-density-calculator-functional-pearl-"
      ],
      "Key": "98114e9a-d131-4f5e-a7ce-567740b27c71",
      "Location": "Noh Theater",
      "Time": "10:45 - 12:25",
      "Title": "Research Papers: Session 1",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Items": [
        "haskellsymp-2016-papers-experience-report-types-for-a-relational-algebra-library",
        "haskellsymp-2016-papers-embedding-session-types-in-haskell"
      ],
      "Key": "13ec3bae-8e51-474b-a7d5-92609c8c46cb",
      "Location": "Noh Theater",
      "Time": "10:35 - 11:25",
      "Title": "Haskell 2016 - : Types",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["johnreppy"],
      "ChairsString": "John Reppy",
      "Day": "2016-09-21",
      "Items": [
        "icfp-2016-papers-hierarchical-memory-management-for-parallel-programs",
        "icfp-2016-papers-allocation-characterizes-polyvariance",
        "icfp-2016-papers-a-fully-concurrent-garbage-collector-for-functional-programs-on-multicore-processors"
      ],
      "Key": "6f592d51-f410-4590-9fb8-a724d640463e",
      "Location": "Noh Theater",
      "Time": "13:30 - 14:45",
      "Title": "Research Papers: Session 10",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-22",
      "Items": [
        "haskellsymp-2016-papers-welcome",
        "haskellsymp-2016-papers-fitspec-refining-property-sets-for-functional-testing",
        "haskellsymp-2016-papers-quickfuzz-an-automatic-random-fuzzer-for-common-file-formats"
      ],
      "Key": "378c2ef1-9f70-4ce2-bb64-5050d5e001c0",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "Haskell 2016 - : Testing",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Chairs": ["geoffreymainland"],
      "ChairsString": "Geoffrey Mainland",
      "Day": "2016-09-22",
      "Items": ["haskellsymp-2016-papers-lightning-talks"],
      "Key": "1ef0b92e-d21c-4bf0-90e3-213b6cde4612",
      "Location": "Noh Theater",
      "Time": "16:40 - 18:00",
      "Title": "Haskell 2016 - : Lightning Talks",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Items": ["haskellsymp-2016-papers-pc-chair-report-and-state-of-haskell"],
      "Key": "30095ab5-3aec-4863-a746-e3153bd138d9",
      "Location": "Noh Theater",
      "Time": "11:45 - 12:35",
      "Title": "Haskell 2016 - : PC Chair Report and State of Haskell",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["scottowens"],
      "ChairsString": "Scott Owens",
      "Day": "2016-09-20",
      "Items": [
        "icfp-2016-papers-constructive-galois-connections-taming-the-galois-connection-framework-for-mechanized-metatheory",
        "icfp-2016-papers-an-abstract-memory-functor-for-verified-c-static-analyzers"
      ],
      "Key": "b4c10aa0-2d61-43a1-bfef-12cf7f9f574e",
      "Location": "Noh Theater",
      "Time": "16:50 - 17:40",
      "Title": "Research Papers: Session 8",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["kathleenfisher"],
      "ChairsString": "Kathleen Fisher",
      "Day": "2016-09-19",
      "Items": [
        "icfp-2016-papers-a-new-verified-compiler-backend-for-cakeml",
        "icfp-2016-papers-sequent-calculus-as-a-compiler-intermediate-language",
        "icfp-2016-papers-refinement-through-restraint-bringing-down-the-cost-of-verification"
      ],
      "Key": "e6fb0652-a86e-485b-b526-74bc013abe8e",
      "Location": "Noh Theater",
      "Time": "13:40 - 14:55",
      "Title": "Research Papers: Session 2",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Items": [
        "haskellsymp-2016-papers-revisiting-software-transactional-memory-in-haskell",
        "haskellsymp-2016-papers-autobahn-using-genetic-algorithms-to-infer-strictness-annotations"
      ],
      "Key": "e33a536e-e90e-4c7e-b65d-c1395d8cf257",
      "Location": "Noh Theater",
      "Time": "09:15 - 10:15",
      "Title": "Haskell 2016 - : Strictness and STM ",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["robbyfindler"],
      "ChairsString": "Robby Findler",
      "Day": "2016-09-20",
      "Items": [
        "icfp-2016-papers-a-glimpse-of-hopjs",
        "icfp-2016-papers-experience-report-growing-and-shrinking-polygons-for-random-testing-of-computational-geometry-algorithms",
        "icfp-2016-papers-think-like-a-vertex-behave-like-a-function-a-functional-dsl-for-vertex-centric-big-graph-processing",
        "icfp-2016-papers-datafun-a-functional-datalog"
      ],
      "Key": "5025e25c-fabb-413e-bd09-02c608f21078",
      "Location": "Noh Theater",
      "Time": "10:35 - 12:15",
      "Title": "Research Papers: Session 5",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-22",
      "Items": [
        "haskellsymp-2016-papers-free-delivery-functional-pearl-",
        "haskellsymp-2016-papers-how-to-twist-pointers-without-breaking-them"
      ],
      "Key": "c941d121-846c-4e46-82f2-1ff9b6864384",
      "Location": "Noh Theater",
      "Time": "11:45 - 12:35",
      "Title": "Haskell 2016 - : Functors",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-22",
      "Items": [
        "haskellsymp-2016-papers-causal-commutative-arrows-revisited",
        "haskellsymp-2016-papers-functional-reactive-programming-refactored"
      ],
      "Key": "9bd5161d-2ba5-4740-a401-fdaf889bd2df",
      "Location": "Noh Theater",
      "Time": "10:35 - 11:25",
      "Title": "Haskell 2016 - : FRP",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-22",
      "Items": [
        "haskellsymp-2016-papers-high-performance-client-side-web-applications-through-haskell-edsls",
        "haskellsymp-2016-papers-experience-report-developing-high-performance-http-2-server-in-haskell"
      ],
      "Key": "bc0bcf18-da3f-4c1d-a3e8-91801b2280d7",
      "Location": "Noh Theater",
      "Time": "14:00 - 14:50",
      "Title": "Haskell 2016 - : Web Technology",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["samlindley"],
      "ChairsString": "Sam Lindley",
      "Day": "2016-09-21",
      "Items": [
        "icfp-2016-papers-ghostbuster-a-tool-for-simplifying-and-converting-gadts",
        "icfp-2016-papers-indexed-codata-types",
        "icfp-2016-papers-disjoint-intersection-types",
        "icfp-2016-papers-set-theoretic-types-for-polymorphic-variants"
      ],
      "Key": "545af61a-d946-4ce4-8c2b-209ceea29cf9",
      "Location": "Noh Theater",
      "Time": "10:35 - 12:15",
      "Title": "Research Papers: Session 9",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["neelakantankrishnaswami"],
      "ChairsString": "Neelakantan R. Krishnaswami",
      "Day": "2016-09-19",
      "Items": [
        "icfp-2016-papers-fully-abstract-compilation-via-universal-embedding",
        "icfp-2016-papers-oh-lord-please-don-t-let-contracts-be-misunderstood-a-variation-on-old-gems-functional-pearl-",
        "icfp-2016-papers-a-type-theory-for-incremental-computational-complexity-with-control-flow-changes"
      ],
      "Key": "1311169e-6cda-4157-b42a-8025e6cccd10",
      "Location": "Noh Theater",
      "Time": "15:15 - 16:30",
      "Title": "Research Papers: Session 3",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-22",
      "Items": [
        "haskellsymp-2016-papers-pattern-synonyms",
        "haskellsymp-2016-papers-desugaring-haskell-s-do-notation-into-applicative-operations"
      ],
      "Key": "292ded5a-5332-4eba-92e6-151f03ba61b8",
      "Location": "Noh Theater",
      "Time": "15:20 - 16:10",
      "Title": "Haskell 2016 - : Language Features",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["andresloh"],
      "ChairsString": "Andres Löh",
      "Day": "2016-09-20",
      "Items": [
        "icfp-2016-papers-unifiers-as-equivalences-proof-relevant-unification-of-dependently-typed-data",
        "icfp-2016-papers-elaborator-reflection-extending-idris-in-idris",
        "icfp-2016-papers-partial-type-equivalences-for-verified-dependent-interoperability"
      ],
      "Key": "e50893ae-5a8b-43d7-86bb-efca02ee8f43",
      "Location": "Noh Theater",
      "Time": "15:05 - 16:20",
      "Title": "Research Papers: Session 7",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["jeremygibbons"],
      "ChairsString": "Jeremy Gibbons",
      "Day": "2016-09-21",
      "Items": [
        "icfp-2016-papers-combining-effects-and-coeffects-via-grading",
        "icfp-2016-papers-string-diagrams-for-free-monads-functional-pearl-"
      ],
      "Key": "fcf4b13f-e804-4a4a-a5c4-5d8b9cd46417",
      "Location": "Noh Theater",
      "Time": "16:50 - 17:40",
      "Title": "Research Papers: Session 12",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "ICFP 2016 provides a forum for researchers and developers to hear about the latest work on the design, implementations, principles, and uses of functional programming. The conference covers the entire spectrum of work, from practice to theory, including its peripheries. \n \n ICFP 2016- Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming \n Full Citation in the ACM Digital Library \n \n \n SESSION: Invited Talks \n  TensorFlow: learning functions at scale  \n  \n  Mart&iacute;n Abadi \n  \n  Journey to find bugs in JavaScript web applications in the wild  \n  \n  Sukyoung Ryu \n  \n  A functional programmer's guide to homotopy type theory  \n  \n  Dan Licata \n  \n SESSION: Session 1 \n  Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms  \n  \n  David Castro \n  Kevin Hammond \n  Susmit Sarkar \n  \n  Dag-calculus: a calculus for parallel computation  \n  \n  Umut A. Acar \n  Arthur Chargu&eacute;raud \n  Mike Rainey \n  Filip Sieczkowski \n  \n  A lambda-calculus foundation for universal probabilistic programming  \n  \n  Johannes Borgstr&ouml;m \n  Ugo Dal Lago \n  Andrew D. Gordon \n  Marcin Szymczak \n  \n  Deriving a probability density calculator (functional pearl)  \n  \n  Wazim Mohammed Ismail \n  Chung-chieh Shan \n  \n SESSION: Session 2 \n  A new verified compiler backend for CakeML  \n  \n  Yong Kiam Tan \n  Magnus O. Myreen \n  Ramana Kumar \n  Anthony Fox \n  Scott Owens \n  Michael Norrish \n  \n  Sequent calculus as a compiler intermediate language  \n  \n  Paul Downen \n  Luke Maurer \n  Zena M. Ariola \n  Simon Peyton Jones \n  \n  Refinement through restraint: bringing down the cost of verification  \n  \n  Liam O'Connor \n  Zilin Chen \n  Christine Rizkallah \n  Sidney Amani \n  Japheth Lim \n  Toby Murray \n  Yutaka Nagashima \n  Thomas Sewell \n  Gerwin Klein \n  \n SESSION: Session 3 \n  Fully abstract compilation via universal embedding  \n  \n  Max S. New \n  William J. Bowman \n  Amal Ahmed \n  \n  Oh Lord, please don't let contracts be misunderstood (functional pearl)  \n  \n  Christos Dimoulas \n  Max S. New \n  Robert Bruce Findler \n  Matthias Felleisen \n  \n  A type theory for incremental computational complexity with control flow changes  \n  \n  Ezgi &Ccedil;i&ccedil;ek \n  Zoe Paraskevopoulou \n  Deepak Garg \n  \n SESSION: Session 4 \n  Compact bit encoding schemes for simply-typed lambda-terms  \n  \n  Kotaro Takeda \n  Naoki Kobayashi \n  Kazuya Yaguchi \n  Ayumi Shinohara \n  \n  Queueing and glueing for optimal partitioning (functional pearl)  \n  \n  Shin-Cheng Mu \n  Yu-Hsi Chiang \n  Yu-Han Lyu \n  \n  All sorts of permutations (functional pearl)  \n  \n  Jan Christiansen \n  Nikita Danilenko \n  Sandra Dylus \n  \n SESSION: Session 5 \n  A glimpse of Hopjs  \n  \n  Manuel Serrano \n  Vincent Prunet \n  \n  Experience report: growing and shrinking polygons for random testing of computational geometry algorithms  \n  \n  Ilya Sergey \n  \n  Think like a vertex, behave like a function! a functional DSL for vertex-centric big graph processing  \n  \n  Kento Emoto \n  Kiminori Matsuzaki \n  Zhenjiang Hu \n  Akimasa Morihata \n  Hideya Iwasaki \n  \n  Datafun: a functional Datalog  \n  \n  Michael Arntzenius \n  Neelakantan R. Krishnaswami \n  \n SESSION: Session 6 \n  Dynamic witnesses for static type errors (or, ill-typed programs usually go wrong)  \n  \n  Eric L. Seidel \n  Ranjit Jhala \n  Westley Weimer \n  \n  Automatically disproving fair termination of higher-order functional programs  \n  \n  Keiichi Watanabe \n  Ryosuke Sato \n  Takeshi Tsukada \n  Naoki Kobayashi \n  \n  Higher-order ghost state  \n  \n  Ralf Jung \n  Robbert Krebbers \n  Lars Birkedal \n  Derek Dreyer \n  \n SESSION: Session 7 \n  Unifiers as equivalences: proof-relevant unification of dependently typed data  \n  \n  Jesper Cockx \n  Dominique Devriese \n  Frank Piessens \n  \n  Elaborator reflection: extending Idris in Idris  \n  \n  David Christiansen \n  Edwin Brady \n  \n  Partial type equivalences for verified dependent interoperability  \n  \n  Pierre-Evariste Dagand \n  Nicolas Tabareau \n  &Eacute;ric Tanter \n  \n SESSION: Session 8 \n  Constructive Galois connections: taming the Galois connection framework for mechanized metatheory  \n  \n  David Darais \n  David Van Horn \n  \n  An abstract memory functor for verified C static analyzers  \n  \n  Sandrine Blazy \n  Vincent Laporte \n  David Pichardie \n  \n SESSION: Session 9 \n  Ghostbuster: a tool for simplifying and converting GADTs  \n  \n  Trevor L. McDonell \n  Timothy A. K. Zakian \n  Matteo Cimini \n  Ryan R. Newton \n  \n  Indexed codata types  \n  \n  David Thibodeau \n  Andrew Cave \n  Brigitte Pientka \n  \n  Disjoint intersection types  \n  \n  Bruno C. d. S. Oliveira \n  Zhiyuan Shi \n  Jo&atilde;o Alpuim \n  \n  Set-theoretic types for polymorphic variants  \n  \n  Giuseppe Castagna \n  Tommaso Petrucciani \n  Kim Nguyễn \n  \n SESSION: Session 10 \n  Hierarchical memory management for parallel programs  \n  \n  Ram Raghunathan \n  Stefan K. Muller \n  Umut A. Acar \n  Guy Blelloch \n  \n  Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis  \n  \n  Thomas Gilray \n  Michael D. Adams \n  Matthew Might \n  \n  A fully concurrent garbage collector for functional programs on multicore processors  \n  \n  Katsuhiro Ueno \n  Atsushi Ohori \n  \n SESSION: Session 11 \n  Talking bananas: structural recursion for session types  \n  \n  Sam Lindley \n  J. Garrett Morris \n  \n  The best of both worlds: linear functional programming without compromise  \n  \n  J. Garrett Morris \n  \n  Context-free session types  \n  \n  Peter Thiemann \n  Vasco T. Vasconcelos \n  \n SESSION: Session 12 \n  Combining effects and coeffects via grading  \n  \n  Marco Gaboardi \n  Shin-ya Katsumata \n  Dominic Orchard \n  Flavien Breuvart \n  Tarmo Uustalu \n  \n  String diagrams for free monads (functional pearl)  \n  \n  Maciej Pir&oacute;g \n  Nicolas Wu",
      "Chairs": ["tomschrijvers"],
      "ChairsString": "Tom Schrijvers",
      "Day": "2016-09-19",
      "Items": [
        "icfp-2016-papers-compact-bit-encoding-schemes-for-simply-typed-lambda-terms",
        "icfp-2016-papers-queueing-and-glueing-for-optimal-partitioning-functional-pearl-",
        "icfp-2016-papers-all-sorts-of-permutations-functional-pearl-"
      ],
      "Key": "20fb1d9c-ec54-444c-bb8b-dbdd82918b92",
      "Location": "Noh Theater",
      "Time": "17:00 - 18:15",
      "Title": "Research Papers: Session 4",
      "Type": "Accepted Papers"
    },
    {
      "Abstract": "The home page for this workshop is here:\nhttps://www.haskell.org/haskell-symposium/2016/index.html",
      "Day": "2016-09-23",
      "Key": "358b0f99-0bda-4d37-98a5-c386fd74654f",
      "Location": "Noh Theater",
      "Time": "16:40 - 18:00",
      "Title": "Haskell 2016 - ",
      "Type": "Accepted Papers"
    }
  ],
  "Sponsors": "ahrefs, Jane Street, Mozilla Research, Ambiata, Bloomberg, Data 61 CSIRO, Facebook, Galois, Inc., Tsuru Capital, X, Awake Networks, IntelliFactory, Microsoft Research, Obsidian Systems, Oracle Labs, StackBuilders, Well-Typed, ACM, SIGPLAN",
  "URL": "http://conf.researchr.org/home/icfp-2016",
  "VenueInfo": {"Name": "Nara Kasugano International Forum"}
}